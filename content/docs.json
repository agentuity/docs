{
  "docs": [
    {
      "file": "CLI/agent.mdx",
      "meta": {
        "title": "Agent Commands",
        "description": "Commands for managing agents in your Agentuity project"
      },
      "content": "\nThe `agent` commands allow you to create, list, delete, and manage agents in your Agentuity project.\n\n## agent create\n\nCreates a new agent in your project.\n\n### Aliases\n\n`agentuity agent new` (shortcut for `agentuity agent create`)\n\n### Usage\n\n```bash\nagentuity agent create [name] [description] [auth_type]\n```\n\n**Arguments:**\n- `name` - The name of the agent\n- `description` - A description of what the agent does\n- `auth_type` - Authentication method for the agent (API Key or None)\n\n**Flags:**\n- `-d, --dir string` - The project directory\n\nThis command will prompt you for:\n- The name of the agent\n- A description of what the agent does\n- Authentication type (API Key or None)\n\nAfter providing this information, the command will:\n1. Create the agent in the Agentuity Cloud\n2. Set up the necessary local files for the agent\n3. Update your project configuration to include the new agent\n\n### Example\n\n```bash\n$ agentuity agent create\nWhat should we name the agent? MyNewAgent\nHow should we describe what the MyNewAgent agent does? This agent processes customer support requests\n✓ Agent created successfully\n```\n\n## agent list\n\nLists all agents in your project.\n\n### Aliases\n\n`agentuity agent ls` (shortcut for `agentuity agent list`)\n\n### Usage\n\n```bash\nagentuity agent list\n```\n\n**Flags:**\n- `-d, --dir string` - The project directory\n\nThis command will display a list of all agents in your project, including:\n- Agent name\n- Agent ID\n- Agent description\n- Status (whether the agent exists locally, remotely, or both)\n\n### Example\n\n```bash\n$ agentuity agent list\nsrc/agents\n├── MyFirstAgent\n│  ├── ID: 3c4c0b692533d7807cf0f649ef425dfa29b58bcc99be03e208e52749107fca2e\n│  └── Description: A simple agent that can generate text\n│\n└── MyNewAgent\n   ├── ID: 7a8b9c0d1e2f3g4h5i6j7k8l9m0n1o2p3q4r5s6t7u8v9w0x1y2z3a4b5c6d7e8f\n   └── Description: This agent processes customer support requests\n```\n\n## agent delete\n\nDeletes one or more agents from your project.\n\n### Aliases\n\n`agentuity agent rm` or `agentuity agent del` (shortcuts for `agentuity agent delete`)\n\n### Usage\n\n```bash\nagentuity agent delete\n```\n\n**Flags:**\n- `-d, --dir string` - The project directory\n\nThis command will:\n1. Display a list of all agents in your project\n2. Allow you to select one or more agents to delete\n3. Ask for confirmation before deleting the selected agents\n4. Delete the selected agents from both the Agentuity Cloud and your local project\n\n### Example\n\n```bash\n$ agentuity agent delete\nSelect one or more agents to delete:\n[ ] MyFirstAgent 3c4c0b692533d7807cf0f649ef425dfa29b58bcc99be03e208e52749107fca2e\n[x] MyNewAgent 7a8b9c0d1e2f3g4h5i6j7k8l9m0n1o2p3q4r5s6t7u8v9w0x1y2z3a4b5c6d7e8f\n\nAre you sure you want to delete the selected agents? This action cannot be undone. [y/N] y\n✓ Agent deleted successfully\n```\n\n## agent apikey\n\nGets the API key for an agent.\n\n### Aliases\n\n`agentuity agent key` (shortcut for `agentuity agent apikey`)\n\n### Usage\n\n```bash\nagentuity agent apikey [agent_name]\n```\n\n**Arguments:**\n- `agent_name` - The name or ID of the agent (optional)\n\n**Flags:**\n- `-d, --dir string` - The project directory\n\nThis command will:\n1. If an agent name is provided, retrieve the API key for that agent\n2. If no agent name is provided and there's only one agent in the project, retrieve the API key for that agent\n3. If no agent name is provided and there are multiple agents, display a list of agents to select from\n\n### Example\n\n```bash\n# Get API key for a specific agent\n$ agentuity agent apikey MyFirstAgent\nAgent MyFirstAgent API key: [API KEY WILL BE DISPLAYED HERE]\n\n# Get API key interactively\n$ agentuity agent apikey\nSelect an Agent:\n> MyFirstAgent 3c4c0b692533d7807cf0f649ef425dfa29b58bcc99be03e208e52749107fca2e\n  MyNewAgent 7a8b9c0d1e2f3g4h5i6j7k8l9m0n1o2p3q4r5s6t7u8v9w0x1y2z3a4b5c6d7e8f\n\nAgent MyFirstAgent API key: [API KEY WILL BE DISPLAYED HERE]\n```\n\n## Global Flags\n\nThese flags apply to all agent commands:\n\n- `--config string` - Config file (default is $HOME/.config/agentuity/config.yaml)\n- `--log-level string` - The log level to use (default \"info\")\n"
    },
    {
      "file": "CLI/apikey.mdx",
      "meta": {
        "title": "API Key Commands",
        "description": "Managing API keys with the Agentuity CLI"
      },
      "content": "\n## Overview\n\nThe Agentuity CLI provides commands to manage API keys for authentication with the Agentuity Cloud Platform.\n\n## Commands\n\n### apikey\n\nBase command for API key management.\n\n```bash\nagentuity apikey\n```\n\n**Aliases:** `apikeys`\n\n**Examples:**\n```bash\nagentuity apikey list\nagentuity apikey create\n```\n\n### apikey create\n\nCreates a new API key for use with the Agentuity Cloud Platform.\n\n```bash\nagentuity apikey create\n```\n\n**Aliases:** None\n\n**Examples:**\n```bash\nagentuity apikey create\n```\n\n### apikey delete\n\nDeletes an existing API key.\n\n```bash\nagentuity apikey delete\n```\n\n**Aliases:** None\n\n**Examples:**\n```bash\nagentuity apikey delete\n```\n\n### apikey get\n\nRetrieves information about a specific API key.\n\n```bash\nagentuity apikey get\n```\n\n**Aliases:** None\n\n**Examples:**\n```bash\nagentuity apikey get\n```\n\n### apikey list\n\nLists all available API keys for your account.\n\n```bash\nagentuity apikey list\n```\n\n**Aliases:** None\n\n**Examples:**\n```bash\nagentuity apikey list\n```\n"
    },
    {
      "file": "CLI/auth.mdx",
      "meta": {
        "title": "Authentication Commands",
        "description": "Commands for authenticating with the Agentuity Cloud Platform"
      },
      "content": "\nThe `auth` commands allow you to authenticate with the Agentuity Cloud Platform, manage your login session, and check your authentication status.\n\n## auth login\n\nLogs you into the Agentuity Cloud Platform.\n\n### Aliases\n\n`agentuity login` (shortcut for `agentuity auth login`)\n\n### Usage\n\n```bash\nagentuity auth login\n```\n\nThis command will print out a one-time code and open a browser window where you can log in to your Agentuity account and provide the one-time code. After successful authentication, your credentials will be stored locally for future use.  By default, the credentials and other configuration are stored in the following file: `$HOME/.config/agentuity/config.json`.\n\n### Example\n\n```bash\n$ agentuity auth login\n✓ You are now logged in\n```\n\n## auth logout\n\nLogs you out of the Agentuity Cloud Platform.\n\n### Aliases\n\n`agentuity logout` (shortcut for `agentuity auth logout`)\n\n### Usage\n\n```bash\nagentuity auth logout\n```\n\nThis command will remove your stored credentials.\n\n### Example\n\n```bash\n$ agentuity auth logout\n✓ You have been logged out\n```\n\n## auth whoami\n\nDisplays information about the currently logged-in user.\n\n### Aliases\n\n`agentuity whoami` (shortcut for `agentuity auth whoami`)\n\n### Usage\n\n```bash\nagentuity auth whoami\n```\n\n### Example\n\n```bash\n$ agentuity auth whoami\n╭──────────────────────────────────────────────────────────────────────────────────╮\n│                                                                                  │\n│ Currently logged in as                                                           │\n│                                                                                  │\n│ Name:           Jeff Haynie                    user_xsjDaYg0UsTcARJWa1BI5irsoB7  │\n│                                                                                  │\n│ Organization:   Jeff Team                       org_xsjDbpem0VT7QA9DupHGdE72HLQ  │\n│                                                                                  │\n╰──────────────────────────────────────────────────────────────────────────────────╯\n```\n"
    },
    {
      "file": "CLI/bundle.mdx",
      "meta": {
        "title": "Bundle Command",
        "description": "Command for bundling Agentuity projects for deployment"
      },
      "content": "\nThe `bundle` command allows you to create a bundled version of your Agentuity project for deployment.\n\n## bundle\n\nRuns the build bundle process for an Agentuity project.\n\n### Aliases\n\n`agentuity build` (shortcut for `agentuity bundle`)\n\n### Usage\n\n```bash\nagentuity bundle [flags]\n```\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--dir`, `-d` | The directory of the project to bundle |\n| `--production`, `-p` | Bundle the project for production deployment |\n\n\n> You generally don't need to use this command as it is automatically called when you run `agentuity dev` or `agentuity start`."
    },
    {
      "file": "CLI/cloud.mdx",
      "meta": {
        "title": "Cloud Commands",
        "description": "Commands for deploying and managing projects in the Agentuity Cloud Platform"
      },
      "content": "\nThe `cloud` commands allow you to deploy and manage your projects in the Agentuity Cloud Platform.\n\n## cloud deploy\n\nDeploys a project to the Agentuity Cloud Platform.\n\n### Aliases\n\n`agentuity deploy` (shortcut for `agentuity cloud deploy`)\n\n### Usage\n\n```bash\nagentuity cloud deploy [flags]\n```\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--dir`, `-d` | The directory of the project to deploy |\n\n### Examples\n\nDeploy a project from the current directory:\n```bash\n$ agentuity cloud deploy\n✓ Project deployed successfully\n🚀 Your project is now live at: https://app.agentuity.com/projects/proj_123456\n```\n\nDeploy a project from a specific directory:\n```bash\n$ agentuity cloud deploy --dir ~/projects/my-project\n✓ Project deployed successfully\n🚀 Your project is now live at: https://app.agentuity.com/projects/proj_123456\n```\n\n## cloud status\n\nChecks the deployment status of a project.\n\n### Aliases\n\n`agentuity status` (shortcut for `agentuity cloud status`)\n\n### Usage\n\n```bash\nagentuity cloud status [flags]\n```\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--dir`, `-d` | The directory of the project to check |\n\n### Examples\n\nCheck the status of a project in the current directory:\n```bash\n$ agentuity cloud status\nProject: my-project\nStatus: deployed\nLast deployment: 2025-02-27T04:00:00Z\nURL: https://app.agentuity.com/projects/proj_123456\n```\n"
    },
    {
      "file": "CLI/dev.mdx",
      "meta": {
        "title": "Development Commands",
        "description": "Commands for local development of Agentuity projects"
      },
      "content": "\nThe `dev` commands allow you to run and test your Agentuity projects locally during development.\n\n## dev\n\nRuns a development server for local testing and development.\n\n### Aliases\n\n`agentuity run` (shortcut for `agentuity dev`)\n\n### Usage\n\n```bash\nagentuity dev [flags]\n```\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--dir`, `-d` | The directory of the project to run |\n| `--websocket-id` | Specify a WebSocket room ID for real-time communication |\n\n### Examples\n\nRun a development server for a project in the current directory:\n```bash\n$ agentuity dev\n✓ Development server started\n🔗 Local URL: http://localhost:3000\n```\n\nRun a development server for a project in a specific directory:\n```bash\n$ agentuity dev --dir ~/projects/my-project\n✓ Development server started\n🔗 Local URL: http://localhost:3000\n```\n\nRun a development server with a specific WebSocket room ID:\n```bash\n$ agentuity dev --websocket-id room_123456\n✓ Development server started\n🔗 Local URL: http://localhost:3000\n🔌 WebSocket connected: room_123456\n```\n"
    },
    {
      "file": "CLI/env.mdx",
      "meta": {
        "title": "Environment Commands",
        "description": "Commands for managing environment variables and secrets in Agentuity projects"
      },
      "content": "\nThe `env` commands allow you to manage environment variables and secrets for your Agentuity projects.\n\n## env set\n\nSets environment variables or secrets for a project.\n\n### Usage\n\n```bash\nagentuity env set [key] [value] [flags]\n```\n\n### Aliases\n\n`agentuity set` (shortcut for `agentuity env set`)\n`agentuity env add`, `agentuity env put`\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--dir`, `-d` | The directory to the project |\n| `--file`, `-f` | The path to a file containing environment variables to set |\n| `--secret`, `-s` | Force the value(s) to be treated as a secret |\n| `--force` | Don't prompt for confirmation |\n\n### Examples\n\nSet a single environment variable:\n```bash\n$ agentuity env set API_KEY your-api-key\n✓ Environment variable saved\n```\n\nSet a secret:\n```bash\n$ agentuity env set --secret DB_PASSWORD your-password\n✓ Secret saved\n```\n\nSet environment variables from a file:\n```bash\n$ agentuity env set --file .env\n✓ Environment variables and secrets saved\n```\n\n<Callout type=\"info\">\nAll environment and secret values are encrypted at rest and in transit.\n</Callout>\n\n## env list\n\nLists all environment variables and secrets for a project.\n\n### Usage\n\n```bash\nagentuity env list [flags]\n```\n\n### Aliases\n\n`agentuity list` (shortcut for `agentuity env list`)\n`agentuity env ls`, `agentuity env show`, `agentuity env print`\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--dir`, `-d` | The directory to the project |\n\n### Examples\n\n```bash\n$ agentuity env list\nAPI_KEY=your-api-key\nDB_PASSWORD=********\n```\n\n## env get\n\nGets the value of an environment variable or secret.\n\n### Aliases\n\n`agentuity get` (shortcut for `agentuity env get`)\n\n### Usage\n\n```bash\nagentuity env get [key] [flags]\n```\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--dir`, `-d` | The directory to the project |\n\n### Examples\n\n```bash\n$ agentuity env get API_KEY\nyour-api-key\n```\n\n## env delete\n\nDeletes environment variables or secrets.\n\n### Usage\n\n```bash\nagentuity env delete [key...] [flags]\n```\n\n### Aliases\n\n`agentuity delete` (shortcut for `agentuity env delete`)\n`agentuity env rm`, `agentuity env del`\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--dir`, `-d` | The directory to the project |\n| `--force` | Don't prompt for confirmation |\n\n### Examples\n\nDelete a single environment variable:\n```bash\n$ agentuity env delete API_KEY\n✓ Environment variable deleted\n```\n\nDelete multiple environment variables:\n```bash\n$ agentuity env delete API_KEY DB_PASSWORD\n✓ Environment variables and secrets deleted\n```\n"
    },
    {
      "file": "CLI/installation.mdx",
      "meta": {
        "title": "Installation",
        "description": "Installation of Agentuity CLI"
      },
      "content": "\nimport { Tab, Tabs } from 'fumadocs-ui/components/tabs';\n\n## Installation\n\n```bash\ncurl -fsS https://agentuity.sh | sh\n```\n\n<Callout type=\"warn\">\n  The install script for Windows only works in the <strong>WSL (Windows Subsystem for Linux)</strong> environment\n</Callout>\n\n<Callout type=\"info\">\n  On MacOS, if you have Homebrew installed, the install script will automatically use brew for installation.\n</Callout>\n\n    ### Upgrading\n\nTo upgrade to the latest version of the Agentuity CLI:\n\n```bash\nagentuity upgrade\n```\n\n## Manual Installation\n\nYou can also manually download and install the Agentuity CLI from the [GitHub releases page](https://github.com/agentuity/cli/releases) for any platform:\n\n1. Visit the [Agentuity CLI releases page](https://github.com/agentuity/cli/releases)\n2. Download the appropriate version for your operating system\n3. Extract the downloaded file\n4. Add the executable to your system PATH\n\n## Source Code\n\nThe source code for the Agentuity CLI is available on [GitHub](https://github.com/agentuity/cli).\n\n## Shell Completions\n\nThe Agentuity CLI provides shell completions for bash, zsh, fish, and PowerShell. These can help make your command line experience more efficient by providing tab-completion for commands and options.\n\n### Automatic Setup\n\nWhen you install the CLI using the installer scripts, completions are automatically set up for:\n- **Bash and Zsh** on macOS and Linux (when you have write permissions to the completion directories)\n\n### Manual Setup\n\nYou can manually set up completions for any supported shell using the `agentuity completion` command.\n\n<Tabs items={['Bash', 'Zsh', 'Fish']}>\n  <Tab>\n    To load completions in your current bash session:\n\n    ```bash\n    source <(agentuity completion bash)\n    ```\n\n    To load completions for every new session:\n\n    For Linux:\n    ```bash\n    agentuity completion bash > /etc/bash_completion.d/agentuity\n    ```\n\n    For macOS:\n    ```bash\n    agentuity completion bash > $(brew --prefix)/etc/bash_completion.d/agentuity\n    ```\n\n    Note: This depends on the `bash-completion` package. If not already installed, you can install it via your OS's package manager.\n  </Tab>\n  <Tab>\n    To load completions in your current zsh session:\n\n    ```bash\n    source <(agentuity completion zsh)\n    ```\n\n    To load completions for every new session:\n\n    For Linux:\n    ```bash\n    agentuity completion zsh > \"${fpath[1]}/_agentuity\"\n    ```\n\n    For macOS:\n    ```bash\n    agentuity completion zsh > $(brew --prefix)/share/zsh/site-functions/_agentuity\n    ```\n\n    If shell completion is not already enabled in your environment, you need to enable it:\n\n    ```bash\n    echo \"autoload -U compinit; compinit\" >> ~/.zshrc\n    ```\n  </Tab>\n  <Tab>\n    To load completions in your current fish session:\n\n    ```bash\n    agentuity completion fish | source\n    ```\n\n    To load completions for every new session:\n\n    ```bash\n    agentuity completion fish > ~/.config/fish/completions/agentuity.fish\n    ```\n  </Tab>\n</Tabs>\n"
    },
    {
      "file": "CLI/mcp.mdx",
      "meta": {
        "title": "MCP Commands",
        "description": "Documentation for the Model Context Protocol (MCP) integration in Agentuity CLI"
      },
      "content": "\n## Overview\n\nThe Agentuity CLI implements the Model Context Protocol (MCP), which allows integration with AI-powered code editors and tools. This integration enhances the capabilities of AI agents inside supported clients.\n\nFor more information on the MCP protocol, see [https://modelcontextprotocol.io/](https://modelcontextprotocol.io/)\n\n## Commands\n\n### mcp\n\nThe base command for all MCP-related operations.\n\n```bash\nagentuity mcp\n```\n\n**Aliases:** None\n\n**Examples:**\n```bash\nagentuity mcp install\nagentuity mcp uninstall\nagentuity mcp list\n```\n\n### mcp install\n\nInstalls the Agentuity CLI as an MCP server, enabling integration with supported MCP clients.\n\n```bash\nagentuity mcp install\n```\n\n**Aliases:** `i`, `add`\n\n**Examples:**\n```bash\nagentuity mcp install\n```\n\n### mcp uninstall\n\nUninstalls the Agentuity CLI as an MCP server, removing integration with MCP clients.\n\n```bash\nagentuity mcp uninstall\n```\n\n**Aliases:** `rm`, `delete`, `del`, `remove`\n\n**Examples:**\n```bash\nagentuity mcp uninstall\n```\n\n### mcp list\n\nLists all MCP server configurations detected on the machine, showing which clients are configured.\n\n```bash\nagentuity mcp list\n```\n\n**Aliases:** `ls`\n\n**Examples:**\n```bash\nagentuity mcp list\n```\n\n## Manual Installation\n\nIf you need to manually configure an MCP client, you can use the following command:\n\n```bash\nagentuity mcp run --stdio\n```\n\nThis command is typically used for advanced configuration scenarios.\n"
    },
    {
      "file": "CLI/project.mdx",
      "meta": {
        "title": "Project Commands",
        "description": "Commands for creating and managing Agentuity projects"
      },
      "content": "\nThe `project` commands allow you to create and manage Agentuity projects.\n\n## project create\n\nCreates a new Agentuity project.\n\n### Aliases\n\n`agentuity create` (shortcut for `agentuity project create`)\n`agentuity project new`\n\n### Usage\n\n```bash\nagentuity project create [name] [description] [agent-name] [agent-description] [auth-type] [flags]\n```\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--dir`, `-d` | The directory to create the project in |\n| `--provider`, `-p` | The provider to use for the project |\n| `--template`, `-t` | The template to use for the project |\n\n### Examples\n\nCreate a new project with interactive prompts:\n```bash\n$ agentuity project create my-project\n✓ Project created successfully\n\nNext steps:\n\n1. Switch into the project directory at ~/my-project\n2. Run agentuity run to run the project locally in development mode\n3. Run agentuity deploy to deploy the project to the Agentuity Agent Cloud\n\n🏠 Access your project at https://app.agentuity.com/projects/proj_123456\n```\n\nCreate a new project with a specific provider:\n```bash\n$ agentuity project create my-project --provider javascript\n✓ Project created successfully\n```\n\n## project list\n\nLists all projects in your Agentuity account.\n\n### Aliases\n\n`agentuity project ls` (shortcut for `agentuity project list`)\n\n### Usage\n\n```bash\nagentuity project list\n```\n\n### Examples\n\n```bash\n$ agentuity project list\nProjects:\n  my-project (proj_123456)\n  test-project (proj_789012)\n  demo-app (proj_345678)\n```\n\n## project delete\n\nDeletes one or more projects from your Agentuity account.\n\n### Aliases\n\n`agentuity project rm` or `agentuity project del` (shortcuts for `agentuity project delete`)\n\n### Usage\n\n```bash\nagentuity project delete\n```\n\nThis command will:\n1. Display a list of all projects in your account\n2. Allow you to select one or more projects to delete\n3. Ask for confirmation before deleting the selected projects\n\n### Examples\n\n```bash\n$ agentuity project delete\nSelect one or more projects to delete:\n[ ] my-project (proj_123456)\n[x] test-project (proj_789012)\n[ ] demo-app (proj_345678)\n\nAre you sure you want to delete the selected projects? This action cannot be undone. [y/N] y\n✓ Project deleted successfully\n```\n\n## project import\n\nImports an existing project into your Agentuity account.\n\n### Usage\n\n```bash\nagentuity project import [flags]\n```\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--dir`, `-d` | The directory for the project |\n\n### Examples\n\n```bash\n$ agentuity project import --dir ./my-existing-project\n✓ Project imported successfully\n```\n"
    },
    {
      "file": "CLI/version.mdx",
      "meta": {
        "title": "Version Command",
        "description": "Command for checking the version of the Agentuity CLI"
      },
      "content": "\nThe `version` command allows you to check, display, and upgrade the Agentuity CLI version.\n\n## version\n\nDisplays the version of the Agentuity CLI.\n\n### Aliases\n\n`agentuity -v`, `agentuity --version` (shortcuts for `agentuity version`)\n\n### Usage\n\n```bash\nagentuity version [flags]\n```\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--long` | Display detailed version information including commit hash and build date |\n\n### Examples\n\nBasic version information:\n```bash\n$ agentuity version\n1.0.0\n```\n\nDetailed version information:\n```bash\n$ agentuity version --long\nVersion: 1.0.0\nCommit: abc123\nDate: 2025-02-27\n```\n\n## check\n\nChecks if you're using the latest version of the Agentuity CLI.\n\n### Usage\n\n```bash\nagentuity version check [flags]\n```\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--upgrade` | Upgrade to the latest version if a newer version is available |\n\n### Examples\n\nCheck if you're using the latest version:\n```bash\n$ agentuity version check\nYou are using the latest version (1.0.0) of the Agentuity CLI.\n```\n\nCheck and upgrade to the latest version:\n```bash\n$ agentuity version check --upgrade\nA new version (1.1.0) of the Agentuity CLI is available. Upgrading...\nSuccessfully upgraded to version 1.1.0.\n```\n\n## upgrade\n\nUpgrades the Agentuity CLI to the latest version. This command is also available as `agentuity upgrade`.\n\n### Usage\n\n```bash\nagentuity version upgrade [flags]\n```\n\n### Flags\n\n| Flag | Description |\n| ---- | ----------- |\n| `--force` | Force upgrade even if already on the latest version |\n\n### Examples\n\nUpgrade to the latest version:\n```bash\n$ agentuity version upgrade\nChecking for updates...\nA new version (1.1.0) is available. Upgrading...\nCreating backup of current binary...\nSuccessfully upgraded to version 1.1.0.\n```\n\nForce upgrade:\n```bash\n$ agentuity version upgrade --force\nCreating backup of current binary...\nSuccessfully upgraded to version 1.1.0.\n```\n\nOn macOS, if the CLI was installed using Homebrew, it will use Homebrew to perform the upgrade.\n"
    },
    {
      "file": "Changelog/cli.mdx",
      "meta": {
        "title": "CLI Changelog",
        "description": "Release notes and version history for the Agentuity CLI"
      },
      "content": "\nimport { Callout } from 'fumadocs-ui/components/callout';\n\nThis page documents the release history of the [Agentuity CLI](https://github.com/agentuity/cli).\n\n## v0.0.139\n\n<Callout type=\"info\">\n  Released: May 24, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Fixed Bun sourcemap shim issue to improve source map support for projects using the \"bunjs\" runtime ([#346](https://github.com/agentuity/cli/pull/346))\n\n## v0.0.138\n\n<Callout type=\"info\">\n  Released: May 23, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: DevMode: Removed TUI (Terminal User Interface) in favor of a simpler logging approach ([#344](https://github.com/agentuity/cli/pull/344))\n- **Fixed**: Fixed prepareStackTrace error handling and improved DevMode logging ([#343](https://github.com/agentuity/cli/pull/343))\n- **Fixed**: Added better handling for Ctrl+C in DevMode ([#343](https://github.com/agentuity/cli/pull/343))\n\n## v0.0.137\n\n<Callout type=\"info\">\n  Released: May 23, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: Updated Discord community invite links across the CLI, TUI, README, and error system ([#339](https://github.com/agentuity/cli/pull/339))\n- **Changed**: Modified prompt in environment handling to separate informational messages from interactive questions ([#339](https://github.com/agentuity/cli/pull/339))\n- **Changed**: Updated dependency `github.com/agentuity/go-common` from v1.0.60 to v1.0.64 ([#339](https://github.com/agentuity/cli/pull/339))\n- **Fixed**: Fixed DevMode: Removed \"server\" and \"force\" flags and all related logic, including environment file processing ([#339](https://github.com/agentuity/cli/pull/339))\n\n## v0.0.136\n\n<Callout type=\"info\">\n  Released: May 22, 2025\n</Callout>\n\n**Changes:**\n- **Added**: Add copy attributes to project when importing ([#332](https://github.com/agentuity/cli/pull/332))\n- **Added**: Quality of life improvement: if disk requested is smaller than needed, will tell you and potentially adjust ([#330](https://github.com/agentuity/cli/pull/330))\n- **Added**: [AGENT-130] Delete and Roll Back deployments ([#313](https://github.com/agentuity/cli/pull/313))\n\nThis page documents the release history of the [Agentuity CLI](https://github.com/agentuity/cli).\n## v0.0.135\n\n<Callout type=\"info\">\n  Released: May 22, 2025\n</Callout>\n\n**Changes:**\n- **Added**: [AGENT-130] Added deployment management features with rollback and delete commands ([#313](https://github.com/agentuity/cli/pull/313))\n- **Added**: Added disk size validation during bundling for JavaScript and Python projects with auto-adjustment option ([#330](https://github.com/agentuity/cli/pull/330))\n\n## v0.0.134\n\n<Callout type=\"info\">\n  Released: May 22, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Python: improve devmode logging with support for additional log prefixes ([#328](https://github.com/agentuity/cli/pull/328))\n- **Fixed**: Fixed handling of Python package versions containing \"+\" in pre-release builds ([#328](https://github.com/agentuity/cli/pull/328))\n- **Fixed**: Fixed headless import by correcting flag name from \"apikey\" to \"api-key\" ([#327](https://github.com/agentuity/cli/pull/327))\n\n## v0.0.133\n\n<Callout type=\"info\">\n  Released: May 21, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: Removed Windows from the build matrix in CI workflow ([73fe98b](https://github.com/agentuity/cli/commit/73fe98bca31f3864a1028c379b29aac6cf36350f))\n- **Added**: DevMode: Allow the API to return a preferred server ([#325](https://github.com/agentuity/cli/pull/325))\n- **Fixed**: DevMode: Improved logging output and sourcemap support ([#321](https://github.com/agentuity/cli/pull/321))\n- **Fixed**: [AGENT-209] Refactor adding env vars from file ([#324](https://github.com/agentuity/cli/pull/324))\n\n## v0.0.132\n\n<Callout type=\"info\">\n  Released: May 21, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: [AGENT-166] Add dev mode flag and improved error handling during server streaming operations ([#322](https://github.com/agentuity/cli/pull/322))\n\n## v0.0.129\n\n<Callout type=\"info\">\n  Released: May 20, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: [AGENT-169] Expose framework to the UI ([#295](https://github.com/agentuity/cli/pull/295))\n\n## v0.0.128\n\n<Callout type=\"info\">\n  Released: May 18, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: DevMode: automatic reconnect if losing connection to echo server ([#308](https://github.com/agentuity/cli/pull/308))\n\n## v0.0.127\n\n<Callout type=\"info\">\n  Released: May 18, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Added better logging on startup, make sure we kill server if healthcheck fails, wait longer ([#306](https://github.com/agentuity/cli/pull/306))\n\n## v0.0.126\n\n<Callout type=\"info\">\n  Released: May 18, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: DevMode: Fixed issue when using short agent ID wasn't going upstream ([#304](https://github.com/agentuity/cli/pull/304))\n\n## v0.0.125\n\n<Callout type=\"info\">\n  Released: May 18, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Fixed regression with transport having no IO (public) ([#302](https://github.com/agentuity/cli/pull/302))\n\n## v0.0.124\n\n<Callout type=\"info\">\n  Released: May 17, 2025\n</Callout>\n\n**Changes:**\n- **Added**: Mouse support for developer UI (scrolling and log selection) ([#300](https://github.com/agentuity/cli/pull/300))\n- **Added**: Agent welcome messages and optional prompts for richer metadata ([#300](https://github.com/agentuity/cli/pull/300))\n- **Added**: Support for non-TUI mode in VS Code terminals and pipe environments ([#300](https://github.com/agentuity/cli/pull/300))\n- **Changed**: Renamed interface label from \"Dashboard\" to \"DevMode\" for clarity ([#300](https://github.com/agentuity/cli/pull/300))\n- **Changed**: Enhanced log display with timestamps and improved formatting ([#300](https://github.com/agentuity/cli/pull/300))\n- **Changed**: Don't use alt screen so content is preserved on exit ([#300](https://github.com/agentuity/cli/pull/300))\n\n## v0.0.131\n\n<Callout type=\"info\">\n  Released: May 20, 2025\n</Callout>\n\n**Changes:**\n- **Added**: Added headless import functionality for non-interactive project imports ([#318](https://github.com/agentuity/cli/pull/318))\n- **Fixed**: Fixed release workflow by removing invalid subject-checksums-type parameter ([#319](https://github.com/agentuity/cli/pull/319))\n\n## v0.0.130\n\n<Callout type=\"info\">\n  Released: May 20, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: DevMode: remove mouse tracking as it caused the inability to copy/paste in the terminal ([#316](https://github.com/agentuity/cli/pull/316))\n## v0.0.129\n\n<Callout type=\"info\">\n  Released: May 20, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: [AGENT-169] Expose framework to the UI ([#295](https://github.com/agentuity/cli/pull/295))\n\n## v0.0.128\n\n<Callout type=\"info\">\n  Released: May 18, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: DevMode: automatic reconnect if losing connection to echo server ([#308](https://github.com/agentuity/cli/pull/308))\n\n## v0.0.127\n\n<Callout type=\"info\">\n  Released: May 18, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Added better logging on startup, make sure we kill server if healthcheck fails, wait longer ([#306](https://github.com/agentuity/cli/pull/306))\n\n## v0.0.126\n\n<Callout type=\"info\">\n  Released: May 18, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: DevMode: Fixed issue when using short agent ID wasn't going upstream ([#304](https://github.com/agentuity/cli/pull/304))\n\n## v0.0.125\n\n<Callout type=\"info\">\n  Released: May 18, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Fixed regression with transport having no IO (public) ([#302](https://github.com/agentuity/cli/pull/302))\n\n## v0.0.124\n\n<Callout type=\"info\">\n  Released: May 17, 2025\n</Callout>\n\n**Changes:**\n- **Added**: Mouse support for developer UI (scrolling and log selection) ([#300](https://github.com/agentuity/cli/pull/300))\n- **Added**: Agent welcome messages and optional prompts for richer metadata ([#300](https://github.com/agentuity/cli/pull/300))\n- **Added**: Support for non-TUI mode in VS Code terminals and pipe environments ([#300](https://github.com/agentuity/cli/pull/300))\n- **Changed**: Renamed interface label from \"Dashboard\" to \"DevMode\" for clarity ([#300](https://github.com/agentuity/cli/pull/300))\n- **Changed**: Enhanced log display with timestamps and improved formatting ([#300](https://github.com/agentuity/cli/pull/300))\n- **Changed**: Don't use alt screen so content is preserved on exit ([#300](https://github.com/agentuity/cli/pull/300))\n- **Changed**: Modified CI workflows to ignore documentation-only PRs ([#300](https://github.com/agentuity/cli/pull/300))\n- **Changed**: Updated port selection logic for dev server and agent testing ([#300](https://github.com/agentuity/cli/pull/300))\n- **Fixed**: Fixed port binding conflicts when running multiple agents ([#300](https://github.com/agentuity/cli/pull/300))\n- **Fixed**: Fixed escape key behavior in main screen ([#300](https://github.com/agentuity/cli/pull/300))\n- **Fixed**: Fixed log filtering issue ([#300](https://github.com/agentuity/cli/pull/300))\n- **Fixed**: Fixed regression in welcome prompt not showing up ([#300](https://github.com/agentuity/cli/pull/300))\n\n## v0.0.123\n\n<Callout type=\"info\">\n  Released: May 17, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Auto switch to local echo if using localhost, fix terminal reset issues ([#298](https://github.com/agentuity/cli/pull/298))\n\n## v0.0.122\n\n<Callout type=\"info\">\n  Released: May 16, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: Initial Refactor for DevMode to use new Bridge API and new TUI ([#270](https://github.com/agentuity/cli/pull/270))\n\n## v0.0.121\n\n<Callout type=\"info\">\n  Released: May 16, 2025\n</Callout>\n\n**Changes:**\n- **Added**: [AGENT-133] Added \"test\" command ([#290](https://github.com/agentuity/cli/pull/290))\n- **Added**: [AGENT-129] Multiple tags for a deployment ([#291](https://github.com/agentuity/cli/pull/291))\n- **Changed**: Add tag and message to deployments in CI ([#293](https://github.com/agentuity/cli/pull/293))\n- **Fixed**: [AGENT-179] Call the agent from the correct endpoint ([#294](https://github.com/agentuity/cli/pull/294))\n\n## v0.0.120\n\n<Callout type=\"info\">\n  Released: May 14, 2025\n</Callout>\n\n**Changes:**\n- **Added**: Add project key for agent comms ([#285](https://github.com/agentuity/cli/pull/285))\n- **Changed**: Shorten install script, skip prebuilds on breaking change check ([#287](https://github.com/agentuity/cli/pull/287))\n- **Changed**: Cleanup: remove old vscode settings, move release to use blacksmith now that we dont need MSI build ([#289](https://github.com/agentuity/cli/pull/289))\n- **Changed**: Update copy in upgrade.go for upgrade\n- **Fixed**: [AGENT-163] Update command for Windows ([#284](https://github.com/agentuity/cli/pull/284))\n- **Documentation**: Update changelog for v0.0.119 ([#283](https://github.com/agentuity/cli/pull/283))\n\n**⚠️ Breaking Changes**\n\nThis version includes breaking changes that require updates to your JavaScript and Python SDKs:\n\n- **JavaScript SDK**: Update to v0.0.115 or later for compatibility with the new agent communications protocol. See the [JavaScript SDK Changelog](https://agentuity.dev/Changelog/sdk-js#v00115) for upgrade instructions.\n- **Python SDK**: Update to v0.0.84 or later to support the new project key feature. See the [Python SDK Changelog](https://agentuity.dev/Changelog/sdk-py#v0084) for upgrade instructions.\n\nIf you're using an Agentic code editor (such as Cursor, Windsurf, etc.), you can use this prompt to update your code with these changes:\n\n```\nThe Agentuity SDK v0.0.115 has renamed AGENTUITY_API_KEY to AGENTUITY_SDK_KEY.\nPlease find all instances of AGENTUITY_API_KEY in my code and replace them with AGENTUITY_SDK_KEY.\n```\n\n## v0.0.119\n\n<Callout type=\"info\">\n  Released: May 8, 2025\n</Callout>\n\n**Changes:**\n- **Added**: Added path completion to the CLI ([#282](https://github.com/agentuity/cli/pull/282))\n- **Changed**: Cleanup install script ([#281](https://github.com/agentuity/cli/pull/281))\n  - Removed Windows native support (WSL is now recommended)\n  - Improved installation testing with Docker\n  - Restructured installation script for better maintainability\n\n## v0.0.118\n\n<Callout type=\"info\">\n  Released: May 6, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Fixed check on dev for Linux by using `sys.IsRunningInsideDocker()` instead of checking for specific Docker files ([#279](https://github.com/agentuity/cli/pull/279))\n\n## v0.0.117\n\n<Callout type=\"info\">\n  Released: May 5, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Fixed typo in CI flag name (changed \"ci-messsage\" to \"ci-message\") ([#277](https://github.com/agentuity/cli/pull/277))\n\n## v0.0.116\n\n<Callout type=\"info\">\n  Released: May 5, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Missed annotation on GitInfo ([#275](https://github.com/agentuity/cli/pull/275))\n- **Fixed**: AGENT-29 Check mask value for secrets ([#274](https://github.com/agentuity/cli/pull/274))\n- **Fixed**: Passing CI logs URL to display GitHub action logs in the UI ([#273](https://github.com/agentuity/cli/pull/273))\n- **Changed**: Taking a walk to get the git data 🚶‍♂️‍➡️ ([#272](https://github.com/agentuity/cli/pull/272))\n- **Changed**: Pass on the git info from deploy to bundle when for --deploy ([#271](https://github.com/agentuity/cli/pull/271))\n\n## v0.0.115\n\n<Callout type=\"info\">\n  Released: May 2, 2025\n</Callout>\n\n**Changes:**\n- **Added**: Added mono repofix ([#267](https://github.com/agentuity/cli/pull/267))\n- **Changed**: Add flags for deployment data overwrite from github action ([#266](https://github.com/agentuity/cli/pull/266))\n- **Fixed**: Allow non-admin users to uninstall CLI without admin privileges ([#264](https://github.com/agentuity/cli/pull/264))\n\n## v0.0.114\n\n<Callout type=\"info\">\n  Released: May 1, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Don't call close handler if conn is nil ([#255](https://github.com/agentuity/cli/pull/255))\n- **Fixed**: Fix 'text file busy' error during CLI updates ([#254](https://github.com/agentuity/cli/pull/254))\n- **Fixed**: Windows: improve the output for windows upgrade ([#253](https://github.com/agentuity/cli/pull/253))\n- **Fixed**: Fix PowerShell installation issues in install.ps1 ([#257](https://github.com/agentuity/cli/pull/257))\n- **Fixed**: DevMode: Make sure to terminate child processes ([#259](https://github.com/agentuity/cli/pull/259))\n- **Fixed**: Don't error if deliberate restart ([#260](https://github.com/agentuity/cli/pull/260))\n- **Fixed**: Set ALLUSERS=0 for non-admin installations to ensure proper installation to AppData/Local/Agentuity ([#261](https://github.com/agentuity/cli/pull/261))\n- **Added**: Update install.sh to support /home/ubuntu/.bin and prompt for shell reload ([#258](https://github.com/agentuity/cli/pull/258))\n- **Added**: Add breaking change for new Python SDK ([#256](https://github.com/agentuity/cli/pull/256))\n\n## v0.0.113\n\n<Callout type=\"info\">\n  Released: April 29, 2025\n</Callout>\n\n**Changes:**\n- **Added**: Make sure agent create has a reference to the template so we can reference it in interpolation ([#251](https://github.com/agentuity/cli/pull/251))\n- **Changed**: DevMode: debounce hot reloads ([#250](https://github.com/agentuity/cli/pull/250))\n\n## v0.0.111\n\n<Callout type=\"info\">\n  Released: April 29, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Fix PowerShell installation error with global drive ([#246](https://github.com/agentuity/cli/pull/246))\n- **Fixed**: Improve hot reload stability ([#245](https://github.com/agentuity/cli/pull/245))\n- **Fixed**: Fix Windows upgrade process to uninstall existing CLI before installation ([#244](https://github.com/agentuity/cli/pull/244))\n## v0.0.110\n\n<Callout type=\"info\">\n  Released: April 29, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: More logging and cleanup for dev server startup, more safe filename fixes for python which is stricter ([#242](https://github.com/agentuity/cli/pull/242))\n\n## v0.0.109\n\n<Callout type=\"info\">\n  Released: April 29, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Fix issue with windows startup for devmode ([#240](https://github.com/agentuity/cli/pull/240))\n  - Increased wait time for devmode on Windows\n  - Added more logging\n  - Fixed Windows path escape issue in agents JSON\n  - Decreased attempt duration\n\n## v0.0.108\n\n<Callout type=\"info\">\n  Released: April 29, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Only use SIGINT which is compatible with all platforms vs SIGKILL which doesn't work on Windows ([#239](https://github.com/agentuity/cli/pull/239))\n\n## v0.0.107\n\n<Callout type=\"info\">\n  Released: April 29, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: DevMode: connect to ipv4 loopback explicitly ([#237](https://github.com/agentuity/cli/pull/237))\n\n## v0.0.106\n\n<Callout type=\"info\">\n  Released: April 26, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: Use update not upgrade ([#235](https://github.com/agentuity/cli/pull/235))\n- **Changed**: Some Node libraries which have already been bundled conflict with our bundle require shim ([#233](https://github.com/agentuity/cli/pull/233))\n- **Documentation**: Update changelog for v0.0.105 ([#232](https://github.com/agentuity/cli/pull/232))\n- **Documentation**: Fix doc link\n\n## v0.0.105\n\n<Callout type=\"info\">\n  Released: April 25, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: Temporarily revert the agent rename detection ([#231](https://github.com/agentuity/cli/pull/231))\n- **Changed**: Revert \"temporarily comment out the new sdk upgrade requirement until ready\" ([#229](https://github.com/agentuity/cli/pull/229))\n- **Changed**: Update the dev help output to use the direct agent route instead of legacy route ([#224](https://github.com/agentuity/cli/pull/224))\n\n## v0.0.104\n\n<Callout type=\"info\">\n  Released: April 24, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: Small tweaks around help and error dialog ([#227](https://github.com/agentuity/cli/pull/227))\n- **Fixed**: Fix regression in devmode input json using new binary protocol ([#228](https://github.com/agentuity/cli/pull/228))\n- **Fixed**: Add error message for JS SDK breaking change ([#225](https://github.com/agentuity/cli/pull/225))\n- **Fixed**: Project Name uniqueness check should be within project not any project in the users org ([#223](https://github.com/agentuity/cli/pull/223))\n- **Fixed**: Add a more helpful error message when dev command cannot validate the project ([#222](https://github.com/agentuity/cli/pull/222))\n- **Fixed**: Better handling when you rename an agent and attempt to deploy ([#221](https://github.com/agentuity/cli/pull/221))\n- **Documentation**: Update changelog for v0.0.103 ([#220](https://github.com/agentuity/cli/pull/220))\n\n## v0.0.103\n\n<Callout type=\"info\">\n  Released: April 23, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Fix dev mode for new sdk ([#219](https://github.com/agentuity/cli/pull/219))\n- **Fixed**: A better error messages when trying to load a project ([#218](https://github.com/agentuity/cli/pull/218))\n\n## v0.0.102\n\n<Callout type=\"info\">\n  Released: April 21, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Don't fail if MCP detection fails for any reason on create project ([#216](https://github.com/agentuity/cli/pull/216))\n\n## v0.0.101\n\n<Callout type=\"info\">\n  Released: April 19, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Fix unzip function to properly close file handles ([#215](https://github.com/agentuity/cli/pull/215))\n\n## v0.0.100\n\n<Callout type=\"info\">\n  Released: April 19, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: Be smart about remembering the last project ([#212](https://github.com/agentuity/cli/pull/212))\n- **Changed**: Hide websocket-id flag from CLI help text ([#211](https://github.com/agentuity/cli/pull/211))\n- **Documentation**: Update changelog for v0.0.99 ([#210](https://github.com/agentuity/cli/pull/210))\n\n## v0.0.99\n\n<Callout type=\"info\">\n  Released: April 18, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: Add a better error message on new project by using a dialog component ([#209](https://github.com/agentuity/cli/pull/209))\n\n## v0.0.98\n\n<Callout type=\"info\">\n  Released: April 18, 2025\n</Callout>\n\n**Changes:**\n- **Changed**: Add exponential backoff for agent welcome connection with 30s max time ([#207](https://github.com/agentuity/cli/pull/207))\n\n## v0.0.97\n\n<Callout type=\"info\">\n  Released: April 17, 2025\n</Callout>\n\n**Changes:**\n- **Fixed**: Fix issue with too many files error ([#205](https://github.com/agentuity/cli/pull/205))\n- **Fixed**: Fixed small error (55996e3)\n- **Changed**: Bump golang.org/x/net from 0.36.0 to 0.38.0 ([#204](https://github.com/agentuity/cli/pull/204))\n- **Documentation**: Update changelog for v0.0.96 ([#203](https://github.com/agentuity/cli/pull/203))\n\n## v0.0.96\n\n<Callout type=\"info\">\n  Released: April 16, 2025\n</Callout>\n\n**Changes:**\n- Guard against conn being nil ([e095c09](https://github.com/agentuity/cli/commit/e095c09))\n- Only set step cursor on page 1 ([#202](https://github.com/agentuity/cli/pull/202))\n\n## v0.0.95\n\n<Callout type=\"info\">\n  Released: April 16, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Add retries to HTTP client ([#200](https://github.com/agentuity/cli/pull/200))\n- **Changed**: Attempt to have better UX handling of upgrade checks ([#199](https://github.com/agentuity/cli/pull/199))\n- **Changed**: Template Improvements ([#198](https://github.com/agentuity/cli/pull/198))\n- **Documentation**: Update changelog for v0.0.94 ([#197](https://github.com/agentuity/cli/pull/197))\n\n## v0.0.93\n\n<Callout type=\"info\">\n  Released: April 16, 2025\n</Callout>\n\n### Changes\n\n- **Changed**: Improve TUI semantics ([#193](https://github.com/agentuity/cli/pull/193))\n- **Fixed**: Add more debug logging around CI bundling for github app ([#194](https://github.com/agentuity/cli/pull/194))\n- **Documentation**: Update changelog for v0.0.92 ([#192](https://github.com/agentuity/cli/pull/192))\n\n## v0.0.92\n\n<Callout type=\"info\">\n  Released: April 15, 2025\n</Callout>\n\n### Changes\n\n- **Fixed**: Fix the Git URL to rewrite to https ([#190](https://github.com/agentuity/cli/pull/190))\n- **Changed**: Add hyperlinks to older release versions in CHANGELOG.md ([#191](https://github.com/agentuity/cli/pull/191))\n- **Changed**: Update changelog for v0.0.91 ([#189](https://github.com/agentuity/cli/pull/189))\n\n## v0.0.91\n\n<Callout type=\"info\">\n  Released: April 14, 2025\n</Callout>\n\n### Changes\n\n- **Fixed**: Fix go-common flag issue with overriding log level from env and add more debug to bundle ([#188](https://github.com/agentuity/cli/pull/188))\n\n## v0.0.90\n\n<Callout type=\"info\">\n  Released: April 14, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Add support for managing API Keys from CLI ([#186](https://github.com/agentuity/cli/pull/186))\n- **Fixed**: Make sure we set the working directory when running the project dev command since we could be using --dir\n\n## v0.0.89\n\n<Callout type=\"info\">\n  Released: April 10, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Add CLI Signup Flow ([#182](https://github.com/agentuity/cli/pull/182))\n- **Fixed**: Fix macOS segfault during reinstallation ([#183](https://github.com/agentuity/cli/pull/183))\n- **Fixed**: Smart login or setup ([#184](https://github.com/agentuity/cli/pull/184))\n\n## v0.0.88\n\n<Callout type=\"info\">\n  Released: April 8, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Webhook instructions ([#179](https://github.com/agentuity/cli/pull/179))\n- **Changed**: Proxy GitHub public APIs ([#180](https://github.com/agentuity/cli/pull/180))\n- **Changed**: Small improvements on devmode\n- **Fixed**: Make it clear that the webhook is a POST ([#178](https://github.com/agentuity/cli/pull/178))\n- **Fixed**: If node_modules or .venv/lib directory are missing when bundling, force install ([#177](https://github.com/agentuity/cli/pull/177))\n\n## v0.0.87\n\n<Callout type=\"info\">\n  Released: April 8, 2025\n</Callout>\n\n### Changes\n\n- **Fixed**: Fix regression in step 2 (new project) related to cursor selection ([234b330](https://github.com/agentuity/cli/commit/234b3307d1fd96005d4f656ab319d438e7b60626))\n\n## v0.0.86\n\n<Callout type=\"info\">\n  Released: April 7, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Add Clone Repo step ([#171](https://github.com/agentuity/cli/pull/171))\n- **Added**: Add Agent Welcome on DevMode ([#172](https://github.com/agentuity/cli/pull/172))\n- **Changed**: Totally re-write the TUI for the new project ([#170](https://github.com/agentuity/cli/pull/170))\n- **Changed**: Better upgrade handling ([#174](https://github.com/agentuity/cli/pull/174))\n- **Fixed**: Fix crewai installation issue (exit status 130) ([#169](https://github.com/agentuity/cli/pull/169))\n- **Fixed**: Make sure command is executed with a context ([#173](https://github.com/agentuity/cli/pull/173))\n\n## v0.0.74\n\n<Callout type=\"info\">\n  Released: March 25, 2025\n</Callout>\n\n### Changes\n\n- **Added**: JSON Schema for agentuity.yaml file ([#126](https://github.com/agentuity/cli/pull/126), [#127](https://github.com/agentuity/cli/pull/127))\n- **Added**: MCP Support ([#121](https://github.com/agentuity/cli/pull/121))\n- **Fixed**: Windows installer and MCP fixes ([#129](https://github.com/agentuity/cli/pull/129))\n- **Fixed**: Improved dev command shutdown to ensure all child processes are terminated ([#128](https://github.com/agentuity/cli/pull/128))\n- **Fixed**: Issue when dev port is taken by automatically choosing another port ([#125](https://github.com/agentuity/cli/pull/125))\n- **Fixed**: Git deployment metadata fix ([#120](https://github.com/agentuity/cli/pull/120))\n- **Changed**: GitHub improvements ([#123](https://github.com/agentuity/cli/pull/123))\n\n## v0.0.73\n\n<Callout type=\"info\">\n  Released: March 21, 2025\n</Callout>\n\n### Changes\n\n- **Fixed**: Python: force --env-file when running in devmode ([#118](https://github.com/agentuity/cli/pull/118))\n- **Changed**: place .env on another line to be safe\n\n## v0.0.71\n\n<Callout type=\"info\">\n  Released: March 20, 2025\n</Callout>\n\n### Changes\n\n- **Changed**: Pass on dir flag when doing bundle --deploy ([#115](https://github.com/agentuity/cli/pull/115))\n\n## v0.0.70\n\n<Callout type=\"info\">\n  Released: March 19, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Initial Implementation of Automatic Version checking ([#113](https://github.com/agentuity/cli/pull/113))\n\n## v0.0.69\n\n<Callout type=\"info\">\n  Released: March 19, 2025\n</Callout>\n\n### Changes\n\n- **Fixed**: Handle auth failure better ([#112](https://github.com/agentuity/cli/pull/112))\n- **Changed**: Move internal/tui package to use go-common/tui package so we can reuse ([#111](https://github.com/agentuity/cli/pull/111))\n- **Changed**: Improve Project List View and Auth Whoami ([#110](https://github.com/agentuity/cli/pull/110))\n\n## v0.0.68\n\n<Callout type=\"info\">\n  Released: March 19, 2025\n</Callout>\n\n### Changes\n\n- **Fixed**: Better handle user interruption errors ([#109](https://github.com/agentuity/cli/pull/109))\n\n## v0.0.67\n\n<Callout type=\"info\">\n  Released: March 19, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Force new project to always use the latest sdk ([#108](https://github.com/agentuity/cli/pull/108))\n- **Fixed**: DevMode: cleanup payload to make sure we keep it as []byte vs using string so we always transmit in base64 w/o recoding by accident ([#107](https://github.com/agentuity/cli/pull/107))\n\n## v0.0.66\n\n<Callout type=\"info\">\n  Released: March 17, 2025\n</Callout>\n\n### Changes\n\n- **Changed**: Rename devmode ([#106](https://github.com/agentuity/cli/pull/106))\n- **Changed**: Dev Mode: deterministic room id ([#63](https://github.com/agentuity/cli/pull/63))\n\n## v0.0.65\n\n<Callout type=\"info\">\n  Released: March 17, 2025\n</Callout>\n\n### Changes\n\n- **Fixed**: Be smarter on error message of JS when running node directly ([#105](https://github.com/agentuity/cli/pull/105))\n- **Added**: Added project id on for matt ([#104](https://github.com/agentuity/cli/pull/104))\n- **Fixed**: Add environment variable checks to Python boot.py ([#103](https://github.com/agentuity/cli/pull/103))\n\n## v0.0.64\n\n<Callout type=\"info\">\n  Released: March 16, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Add README template for JavaScript projects ([#102](https://github.com/agentuity/cli/pull/102))\n\n## v0.0.63\n\n<Callout type=\"info\">\n  Released: March 16, 2025\n</Callout>\n\n### Changes\n\n- **Changed**: Improve CTRL-C cancel, always send user-agent with version for API requests ([#101](https://github.com/agentuity/cli/pull/101))\n\n## v0.0.62\n\n<Callout type=\"info\">\n  Released: March 16, 2025\n</Callout>\n\n### Changes\n\n- **Fixed**: Fix change in signature with request.text -> request.data.text ([#100](https://github.com/agentuity/cli/pull/100))\n- **Added**: Add Long property documentation to all CLI commands ([#99](https://github.com/agentuity/cli/pull/99))\n- **Added**: Add traceparent in the error handling logic to aid in debugging issues ([#98](https://github.com/agentuity/cli/pull/98))\n\n## v0.0.61\n\n<Callout type=\"info\">\n  Released: March 15, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Add Org Level data encryption for agent source ([#97](https://github.com/agentuity/cli/pull/97))\n- **Added**: Improve missing LLM environment variables ([#95](https://github.com/agentuity/cli/pull/95))\n- **Fixed**: Don't set AGENTUITY_ENVIRONMENT on the production bundle, let it get set by the infra ([#96](https://github.com/agentuity/cli/pull/96))\n- **Fixed**: Fix issue with --env-file not getting picked up in node when running dev ([#94](https://github.com/agentuity/cli/pull/94))\n- **Documentation**: Update changelog for v0.0.60 ([#93](https://github.com/agentuity/cli/pull/93))\n\n## v0.0.72\n\n<Callout type=\"info\">\n  Released: March 20, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Deployment metadata and CI flag for GitHub actions ([#116](https://github.com/agentuity/cli/pull/116))\n- **Fixed**: Bug in file watcher ([#114](https://github.com/agentuity/cli/pull/114))\n- **Fixed**: Don't send error reports when using the dev version\n\n## v0.0.60\n\n<Callout type=\"info\">\n  Released: March 13, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Support for new transport domain (agentuity.ai) ([#89](https://github.com/agentuity/cli/pull/89))\n- **Added**: Profile switching for local development ([#89](https://github.com/agentuity/cli/pull/89))\n- **Fixed**: Improved agent deletion logic with backup functionality ([#90](https://github.com/agentuity/cli/pull/90))\n- **Fixed**: Corrected .dev domain references ([#91](https://github.com/agentuity/cli/pull/91), [#92](https://github.com/agentuity/cli/pull/92))\n\n## v0.0.59\n\n<Callout type=\"info\">\n  Released: March 13, 2025\n</Callout>\n\n### Changes\n\n- Move deployment manifest from `agentuity-deployment.yaml` to `.agentuity/.manifest.yaml` ([#86](https://github.com/agentuity/cli/pull/86))\n- Improve UI by showing information banner instead of error when a requirement cannot be met ([#85](https://github.com/agentuity/cli/pull/85))\n- Fix development mode issues and environment variable handling for JavaScript environments ([#87](https://github.com/agentuity/cli/pull/87))\n\n## v0.0.58\n\n<Callout type=\"info\">\n  Released: March 12, 2025\n</Callout>\n\n### Changes\n\n- Fix filepath issues by converting to localized path separators for Windows compatibility ([#80](https://github.com/agentuity/cli/pull/80))\n\n## v0.0.57\n\n<Callout type=\"info\">\n  Released: March 12, 2025\n</Callout>\n\n### Changes\n\n- Add Python cursor rules files ([#75](https://github.com/agentuity/cli/pull/75))\n- Add support for remembering new project preferences ([#74](https://github.com/agentuity/cli/pull/74))\n- Fix issue when importing with an existing env ([#78](https://github.com/agentuity/cli/pull/78))\n\n## v0.0.56\n\n<Callout type=\"info\">\n  Released: March 12, 2025\n</Callout>\n\n### Changes\n\n- **Project Import on Cloud Deploy**: Added functionality to automatically import projects when deploying to the cloud if the project ID is not found or when using a new template ([#73](https://github.com/agentuity/cli/pull/73))\n- Added project import command (`agentuity project import`)\n- Added project import checks during cloud deployment\n- Added project import checks during development mode\n- Added project import checks for new agent creation\n\n## v0.0.55\n\n<Callout type=\"info\">\n  Released: March 11, 2025\n</Callout>\n\n### Changes\n\n- Add debugging for random panic ([#72](https://github.com/agentuity/cli/pull/72))\n- Small TypeScript complainer fix\n\n## v0.0.54\n\n<Callout type=\"info\">\n  Released: March 11, 2025\n</Callout>\n\n### Changes\n\n- Better error handling when using an invalid project_id and better handle dev mode shutdown ([#71](https://github.com/agentuity/cli/pull/71))\n- Self update should be tried before brew. Fix issue on project name exists check\n\n## v0.0.53\n\n<Callout type=\"info\">\n  Released: March 11, 2025\n</Callout>\n\n### Changes\n\n- Make sure we set the AGENTUITY_URL when running in dev mode ([#70](https://github.com/agentuity/cli/pull/70))\n\n## v0.0.52\n\n<Callout type=\"info\">\n  Released: March 11, 2025\n</Callout>\n\n### Changes\n\n- Improve Error Handling from 400 Bad Request routes ([#69](https://github.com/agentuity/cli/pull/69))\n\n## v0.0.51\n\n<Callout type=\"info\">\n  Released: March 11, 2025\n</Callout>\n\n### Changes\n\n- Add cursor rules file for JavaScript SDK API reference ([#67](https://github.com/agentuity/cli/pull/67))\n- Fix YAML schema for templates validation ([#65](https://github.com/agentuity/cli/pull/65))\n- Fix cursor rules placement to use .cursor/rules instead of .cursorrules ([#66](https://github.com/agentuity/cli/pull/66))\n- Make sure all API calls use the APIClient and enhance the error system to send api error details to aide in debugging ([#68](https://github.com/agentuity/cli/pull/68))\n- Update Python logging format to use [LEVEL] message format ([#64](https://github.com/agentuity/cli/pull/64))\n\n## v0.0.50\n\n<Callout type=\"info\">\n  Released: March 10, 2025\n</Callout>\n\n### Changes\n\n- Updated templates to match new SDK types ([#59](https://github.com/agentuity/cli/pull/59))\n- Fixed issue with template dependencies check not running ([#62](https://github.com/agentuity/cli/pull/62))\n- Updated JavaScript templates to use `req.data.text` instead of `req.text()`\n- Updated Python template to import `autostart` from the main package\n"
    },
    {
      "file": "Changelog/index.mdx",
      "meta": {
        "title": "Changelog",
        "description": "Release notes and version history for Agentuity products"
      },
      "content": "\nThis section contains the release notes and version history for Agentuity products:\n\n- [CLI](/Changelog/cli) - Command Line Interface [GitHub](https://github.com/agentuity/cli)\n- [JavaScript SDK](/Changelog/sdk-js) - JavaScript/TypeScript SDK [GitHub](https://github.com/agentuity/sdk-js)\n- [Python SDK](/Changelog/sdk-py) - Python SDK [GitHub](https://github.com/agentuity/sdk-py)\n\nEach page documents the changes, improvements, and bug fixes in each release.\n"
    },
    {
      "file": "Changelog/sdk-js.mdx",
      "meta": {
        "title": "JavaScript SDK Changelog",
        "description": "Release notes and version history for the Agentuity JavaScript SDK"
      },
      "content": "\nimport { Callout } from 'fumadocs-ui/components/callout';\n\nThis page documents the release history of the [Agentuity JavaScript SDK](https://github.com/agentuity/sdk-js).\n\n## v0.0.120\n\n<Callout type=\"info\">\n  Released: May 24, 2025\n</Callout>\n\n### Changes\n\n- **Added**: Support for handling inbound email trigger type ([PR #117](https://github.com/agentuity/sdk-js/pull/117))\n\n## v0.0.119\n\n<Callout type=\"info\">\n  Released: May 21, 2025\n</Callout>\n\n### Changes\n\n- Logger message arg accepts number type ([PR #113](https://github.com/agentuity/sdk-js/pull/113))\n- Prevent multiple logs for the same exception ([PR #115](https://github.com/agentuity/sdk-js/pull/115))\n\n## v0.0.118\n\n<Callout type=\"info\">\n  Released: May 19, 2025\n</Callout>\n\n### Changes\n\n- Improve error handling ([PR #111](https://github.com/agentuity/sdk-js/pull/111))\n\n## v0.0.117\n\n<Callout type=\"info\">\n  Released: May 19, 2025\n</Callout>\n\n### Changes\n\n- **Improvement**: Better type handling for metadata where it can be any valid JSON object ([PR #110](https://github.com/agentuity/sdk-js/pull/110))\n\n## v0.0.116\n\n<Callout type=\"info\">\n  Released: May 18, 2025\n</Callout>\n\n### Changes\n\n- Fixed issue where empty POST body would cause a hang ([PR #109](https://github.com/agentuity/sdk-js/pull/109))\n\n## v0.0.115\n\n<Callout type=\"info\">\n  Released: May 14, 2025\n</Callout>\n\n### Changes\n\n- Added AGENTUITY_SDK_KEY ([PR #107](https://github.com/agentuity/sdk-js/pull/107))\n\n### ⚠️ Breaking Changes\n\nThe environment variable `AGENTUITY_API_KEY` has been renamed to `AGENTUITY_SDK_KEY` for better clarity and consistency. You will need to update your environment variables and code references accordingly.\n\nIf you're using the Agentuity CLI, it will detect this change and offer to automatically migrate your code references for you.\n\nFor example, you'll need to make the following changes in your code and environment variables:\n\n```diff\n- process.env.AGENTUITY_API_KEY\n+ process.env.AGENTUITY_SDK_KEY\n```\n\nIf you're using an Agentic code editor (such as Cursor, Windsurf, etc.), you can use this prompt to update your code with these changes:\n\n```\nThe Agentuity SDK v0.0.115 has renamed AGENTUITY_API_KEY to AGENTUITY_SDK_KEY.\nPlease find all instances of AGENTUITY_API_KEY in my code and replace them with AGENTUITY_SDK_KEY.\n```\n\n## v0.0.114\n\n<Callout type=\"info\">\n  Released: May 10, 2025\n</Callout>\n\n### Changes\n\n- Fixed issue with Vector get type being wrong ([PR #106](https://github.com/agentuity/sdk-js/pull/106))\n\n\n## v0.0.113\n\n<Callout type=\"info\">\n  Released: May 8, 2025\n</Callout>\n\n### Changes\n\n- Cross platform support for headers.toJSON ([PR #105](https://github.com/agentuity/sdk-js/pull/105), resolves [#103](https://github.com/agentuity/sdk-js/issues/103))\n\n## v0.0.112\n\n<Callout type=\"info\">\n  Released: May 2, 2025\n</Callout>\n\n### Changes\n\n- Add a bun server handler to handle unhandled errors ([PR #100](https://github.com/agentuity/sdk-js/pull/100))\n- Add missing console methods ([PR #101](https://github.com/agentuity/sdk-js/pull/101))\n\n## v0.0.111\n\n<Callout type=\"info\">\n  Released: May 1, 2025\n</Callout>\n\n### Changes\n\n- More fixes related to gzip compression when using keyvalue\n- Change the name of the span when doing a remote solution vs remote execution\n- Update to use versioned routes for API services ([PR #97](https://github.com/agentuity/sdk-js/pull/97))\n\n## v0.0.110\n\n<Callout type=\"info\">\n  Released: April 29, 2025\n</Callout>\n\n### Changes\n\n- In cloud we must bind to all addresses ([PR #96](https://github.com/agentuity/sdk-js/pull/96))\n\n## v0.0.109\n\n<Callout type=\"info\">\n  Released: April 29, 2025\n</Callout>\n\n### Changes\n\n- Add the ability for an agent to return a Response object directly to provide more flexibility to integrate with existing APIs and protocols ([PR #93](https://github.com/agentuity/sdk-js/pull/93))\n- Bind explicitly to ipv4 when creating server ([PR #94](https://github.com/agentuity/sdk-js/pull/94))\n\n## v0.0.108\n\n<Callout type=\"info\">\n  Released: April 25, 2025\n</Callout>\n\n### Changes\n\n- Fixed issue when the keyvalue returns a gzip encoded value ([PR #92](https://github.com/agentuity/sdk-js/pull/92))\n\n## v0.0.107\n\n<Callout type=\"info\">\n  Released: April 25, 2025\n</Callout>\n\n### Changes\n\n- Fix issue with chunking and streaming text not matching in some cases ([PR #91](https://github.com/agentuity/sdk-js/pull/91))\n## v0.0.106\n\n<Callout type=\"info\">\n  Released: April 25, 2025\n</Callout>\n\n### Changes\n\n- Add support for streaming data to and from agents.  This includes streaming data to the agent via the `data` object and streaming data from the agent via the `stream` property of the `AgentResponse` object.\n- The `trigger` property of the `AgentRequest` object will have the value `agent` when the request is invoked by another agent.\n- The `AgentContext` object now has a `scope` property that will have the value of `local` when the context is local or `remote` when agent is being invoked by another agent remotely. In the case of agent-to-agent invocation or handoff within the same project, the scope will be `local`.\n- Deprecated the local `/run/:agentId` route since the updated `/:agentId` route now supports streaming data to and from the agent directly. This route will be removed in a near future release.\n\n### ⚠️ Breaking Changes\n\nThe `data` object of `AgentRequest` has changed to support fully streaming data and this required a breaking change. Most of the property accessors are now async functions to support the streaming use case.  You can read more about this change in [Pull Request #87](https://github.com/agentuity/sdk-js/pull/87).\n\nFor example, the following code changes are required to get the request data as text:\n\n```diff\n- const text = req.data.text;\n+ const text = await req.data.text();\n```\n\nFor example, to get the request data as JSON, you need to make the following changes:\n\n```diff\n- const json = req.data.json;\n+ const json = await req.data.json();\n```\n\nSee the following documentation [Pull Request](https://github.com/agentuity/docs/pull/92) for specific SDK changes.\n\nIf you're using an Agentic code editor (such as Cursor, Windsurf, etc.), you can use this prompt to update your code with these changes:\n\n```\nThe agents in the agents folder use an older version of the Agentuity SDK which assume the req.data object has properties on it like req.data.json\n\nThe new way to do this is with a promise. eg. `await req.data.json()`\n\nThe breaking change is here:  https://github.com/agentuity/sdk-js/pull/87\n\nReview this PR, make a plan to change the agents to the latest agentuity SDK with async await support, and execute on it.\n```\n\n## v0.0.105\n\n<Callout type=\"info\">\n  Released: April 23, 2025\n</Callout>\n\n### Changes\n\n- Add support for remote agent handoff ([PR #85](https://github.com/agentuity/sdk-js/pull/85)). This means you can now handoff the request to another agent outside of your current project in the same organization or even outside of your organization if the Agent is public.  The agent-to-agent invocation is secured automatically and doesn't require any additional configuration or authentication.  Internally, the SDK will request a one-time authorization token to invoke the agent on your agent's behalf.\n\n## v0.0.104\n\n<Callout type=\"info\">\n  Released: April 23, 2025\n</Callout>\n\n### Changes\n\n- Add support for remote agent-to-agent invocation ([PR #83](https://github.com/agentuity/sdk-js/pull/83)). This means you can now invoke another agent outside of your current project in the same organization or even outside of your organization if the Agent is public.  The agent-to-agent invocation is secured automatically and doesn't require any additional configuration or authentication.  Internally, the SDK will request a one-time authorization token to invoke the agent on your agent's behalf.\n\n## v0.0.103\n\n<Callout type=\"info\">\n  Released: April 23, 2025\n</Callout>\n\n### Changes\n\n- Refactor to support binary streams instead of intermediate JSON protocol ([PR #81](https://github.com/agentuity/sdk-js/pull/81))\n- Improved handling of HTTP native protocol\n- Added support for passing in the runId\n- Better handling of stream data and binary content\n\n## v0.0.102\n\n<Callout type=\"info\">\n  Released: April 16, 2025\n</Callout>\n\n### Changes\n\n- Fix issue where the child span had the wrong parent on outbound requests for agent-to-agent ([PR #79](https://github.com/agentuity/sdk-js/pull/79))\n\n## v0.0.101\n\n<Callout type=\"info\">\n  Released: April 18, 2025\n</Callout>\n\n### Changes\n\n- Add agent context to console logger when running inside agent scope ([PR #77](https://github.com/agentuity/sdk-js/pull/77))\n\n## v0.0.100\n\n<Callout type=\"info\">\n  Released: April 15, 2025\n</Callout>\n\n### Changes\n\n- Add permissions\n- Add more otel trace context headers, remove old trace provider ([PR #72](https://github.com/agentuity/sdk-js/pull/72))\n- Automatically base64 encode welcome prompts ([PR #73](https://github.com/agentuity/sdk-js/pull/73))\n- Fix NodeJS issue where the buffer isn't correctly sending the blob but works fine in Bun version ([PR #74](https://github.com/agentuity/sdk-js/pull/74))\n- Debug github workflow git tag issue\n\n## v0.0.99\n\n<Callout type=\"info\">\n  Released: April 14, 2025\n</Callout>\n\n### Changes\n\n- More debug for github workflow\n\n## v0.0.98\n\n<Callout type=\"info\">\n  Released: April 13, 2025\n</Callout>\n\n### Changes\n\n- More debug for github release tags\n\n## v0.0.97\n\n<Callout type=\"info\">\n  Released: April 12, 2025\n</Callout>\n\n### Changes\n\n- Attempt to fix issue with github workflow not pushing tag after release\n\n## v0.0.96\n\n<Callout type=\"info\">\n  Released: April 11, 2025\n</Callout>\n\n### Changes\n\n- Fix issue with node keyvalue not correctly handling the buffer upload\n\n## v0.0.95\n\n<Callout type=\"info\">\n  Released: April 10, 2025\n</Callout>\n\n### Changes\n\n- Add more otel trace context headers, remove old trace provider\n- Base64 encode the welcome prompts\n\n## v0.0.94\n\n<Callout type=\"info\">\n  Released: April 8, 2025\n</Callout>\n\n### Changes\n\n- Fix regression in otel traces missing for AI SDK by change in opentelemetry-api version change\n\n## v0.0.93\n\n<Callout type=\"info\">\n  Released: April 7, 2025\n</Callout>\n\n### Changes\n\n- Add support for agent inspection discovery ([PR #70](https://github.com/agentuity/sdk-js/pull/70))\n\n## v0.0.92\n\n<Callout type=\"info\">\n  Released: April 5, 2025\n</Callout>\n\n### Changes\n\n- Add data and markdown methods to AgentResponse interface and implementation\n\n## v0.0.91\n\n<Callout type=\"info\">\n  Released: April 3, 2025\n</Callout>\n\n### Changes\n\n- Use new agentuity sdk api\n- Add GitHub workflow for npm package release triggered by version tags ([PR #53](https://github.com/agentuity/sdk-js/pull/53))\n\n## v0.0.90\n\n<Callout type=\"info\">\n  Released: April 1, 2025\n</Callout>\n\n### Changes\n\n- Fix Vector delete api\n\n## v0.0.89\n\n<Callout type=\"info\">\n  Released: March 25, 2025\n</Callout>\n\n### Changes\n\n- Add the agentName to the log attributes ([PR #33](https://github.com/agentuity/sdk-js/pull/33))\n- Console Logger: show max depth for any objects ([PR #32](https://github.com/agentuity/sdk-js/pull/32))\n- When stream is requested but the response isn't a stream, chunk up the response data into chunks and smooth out as if streamed ([PR #31](https://github.com/agentuity/sdk-js/pull/31))\n- Fixed issue with buffer underrun getting sent and issue with json encoding ([PR #34](https://github.com/agentuity/sdk-js/pull/34))\n\n## v0.0.88\n\n<Callout type=\"info\">\n  Released: March 21, 2025\n</Callout>\n\n### Changes\n\n- Improve loading project when using node or bun directly vs using start script or agentuity dev\n- Fix mismatch between local run vs remote run with HTTP headers as property of metadata vs the metadata object\n\n## v0.0.87\n\n<Callout type=\"info\">\n  Released: March 18, 2025\n</Callout>\n\n### Changes\n\n- Slight improvement in location of when context.logger for agent is created\n\n## v0.0.86\n\n<Callout type=\"info\">\n  Released: March 16, 2025\n</Callout>\n\n### Changes\n\n- Add support for agentId on context.logger\n- Fix issue with underrun on base64 stream\n\n## v0.0.85\n\n<Callout type=\"info\">\n  Released: March 15, 2025\n</Callout>\n\n### Changes\n\n- Streaming Support including SSE\n\n## v0.0.84\n\n<Callout type=\"info\">\n  Released: March 14, 2025\n</Callout>\n\n### Changes\n\n- Stream IO Input: add new facility to support stream io for input data ([PR #23](https://github.com/agentuity/sdk-js/pull/23))\n- Release with new transport model\n\n## v0.0.83\n\n<Callout type=\"info\">\n  Released: March 12, 2025\n</Callout>\n\n### Changes\n\n- Fix devmode logging when devmode environment is set by live ([PR #24](https://github.com/agentuity/sdk-js/pull/24))\n\n## v0.0.82\n\n<Callout type=\"info\">\n  Released: March 12, 2025\n</Callout>\n\n### Changes\n\n- KeyValue compression only on upload, not download ([PR #20](https://github.com/agentuity/sdk-js/pull/20))\n\n## v0.0.81\n\n<Callout type=\"info\">\n  Released: March 11, 2025\n</Callout>\n\n### Changes\n\n- Add support for compressing keyvalue entries ([PR #19](https://github.com/agentuity/sdk-js/pull/19))\n- Better format log message if the first parameter is an object ([PR #18](https://github.com/agentuity/sdk-js/pull/18))\n\n## v0.0.80\n\n<Callout type=\"info\">\n  Released: March 10, 2025\n</Callout>\n\n### Changes\n\n- Refactored the types to make it easier to use\n- Fixed various small issues\n\n## v0.0.79 and earlier\n\nFor earlier versions, see the [CHANGELOG.md](https://github.com/agentuity/sdk-js/blob/main/CHANGELOG.md) file in the repository.\n"
    },
    {
      "file": "Changelog/sdk-py.mdx",
      "meta": {
        "title": "Python SDK Changelog",
        "description": "Release notes and version history for the Agentuity Python SDK"
      },
      "content": "\nimport { Callout } from 'fumadocs-ui/components/callout';\n\nThis page documents the release history of the [Agentuity Python SDK](https://github.com/agentuity/sdk-py).\n\n## v0.0.86\n\n<Callout type=\"info\">\n  Released: May 24, 2025\n</Callout>\n\n**Changes:**\n- **Added:** Email class for parsing inbound email messages with support for extracting subject, sender, recipients, and attachments\n- **Added:** Async email() method to Data class for parsing RFC822 email content  \n- **Added:** mail-parser dependency for email parsing functionality\n- **Changed:** Updated AgentResponse.handoff() to accept DataLike types instead of only dict for improved flexibility\n- **Changed:** Enhanced JSON serialization in AgentResponse.json() with better error handling and fallback for objects with __dict__\n- **Fixed:** Fixed duplicate variable assignment in RemoteAgent.run() method\n\n## v0.0.85\n\n<Callout type=\"info\">\n  Released: May 22, 2025\n</Callout>\n\n### Added\n\n- Added support for constructing data objects from both synchronous and asynchronous byte iterators ([#45](https://github.com/agentuity/sdk-py/pull/45))\n- Added synchronous reading methods for data objects ([#45](https://github.com/agentuity/sdk-py/pull/45))\n\n### Changed\n\n- Improved local development instructions in README ([#44](https://github.com/agentuity/sdk-py/pull/44))\n- Enhanced agent input handling to accept a broader range of data types ([#45](https://github.com/agentuity/sdk-py/pull/45))\n- Configured explicit timeout settings for agent network operations ([#45](https://github.com/agentuity/sdk-py/pull/45))\n\n### Fixed\n\n- Improved data conversion logic to handle a wider range of input types ([#45](https://github.com/agentuity/sdk-py/pull/45))\n\n## v0.0.84\n\n<Callout type=\"info\">\n  Released: May 14, 2025\n</Callout>\n\n### Added\n\n- Added AGENTUITY_SDK_KEY ([#42](https://github.com/agentuity/sdk-py/pull/42))\n\n### ⚠️ Breaking Changes\n\nThe environment variable for API authentication has changed from `AGENTUITY_API_KEY` to `AGENTUITY_SDK_KEY`. You will need to update any references to this environment variable in your code and deployment configurations.\n\nFor example, the following changes are required:\n\n```diff\n- os.environ[\"AGENTUITY_API_KEY\"] = \"your-api-key\"\n+ os.environ[\"AGENTUITY_SDK_KEY\"] = \"your-api-key\"\n```\n\nWhen using the Agentuity CLI, it will detect this change and ask if you would like assistance migrating your code automatically.\n\nIf you're using an Agentic code editor (such as Cursor, Windsurf, etc.), you can use this prompt to update your code with these changes:\n\n```\nThe Agentuity SDK v0.0.115 has renamed AGENTUITY_API_KEY to AGENTUITY_SDK_KEY.\nPlease find all instances of AGENTUITY_API_KEY in my code and replace them with AGENTUITY_SDK_KEY.\n```\n\n## v0.0.83\n\n<Callout type=\"info\">\n  Released: May 9, 2025\n</Callout>\n\n### Fixed\n\n- Fix issue vectors, better typing for Vector and KeyValue in context ([#40](https://github.com/agentuity/sdk-py/pull/40))\n\n## v0.0.82\n\n<Callout type=\"info\">\n  Released: April 30, 2025\n</Callout>\n\n### Changes\n\n- Add support for streaming data to and from agents.  This includes streaming data to the agent via the `data` object and streaming data from the agent via the `stream` property of the `AgentResponse` object.\n- The `trigger` property of the `AgentRequest` object will have the value `agent` when the request is invoked by another agent.\n- The `AgentContext` object now has a `scope` property that will have the value of `local` when the context is local or `remote` when agent is being invoked by another agent remotely. In the case of agent-to-agent invocation or handoff within the same project, the scope will be `local`.\n- Deprecated the local `/run/:agentId` route since the updated `/:agentId` route now supports streaming data to and from the agent directly. This route will be removed in a near future release.\n\n### ⚠️ Breaking Changes\n\nThe `data` object of `AgentRequest` has changed to support fully streaming data and this required a breaking change. Most of the property accessors are now async functions to support the streaming use case.  You can read more about this change in [Pull Request #38](https://github.com/agentuity/sdk-py/pull/38).\n\nFor example, the following code changes are required to get the request data as text:\n\n```diff\n- text = req.data.text;\n+ text = await req.data.text();\n```\n\nFor example, to get the request data as JSON, you need to make the following changes:\n\n```diff\n- json = req.data.json;\n+ json = await req.data.json();\n```\n\nSee the following documentation [Pull Request](https://github.com/agentuity/docs/pull/114) for specific SDK changes.\n\nIf you're using an Agentic code editor (such as Cursor, Windsurf, etc.), you can use this prompt to update your code with these changes:\n\n```\nThe agents in the agents folder use an older version of the Agentuity SDK which assume the req.data object has properties on it like req.data.json\n\nThe new way to do this is with a promise. eg. `await req.data.json()`\n\nThe breaking change is here:  https://github.com/agentuity/sdk-py/pull/38\n\nReview this PR, make a plan to change the agents to the latest agentuity SDK with async await support, and execute on it.\n```\n\n\n## v0.0.77\n\n<Callout type=\"info\">\n  Released: April 7, 2025\n</Callout>\n\n### Added\n\n- Add comprehensive test suite with pytest ([#27](https://github.com/agentuity/sdk-py/pull/27))\n- Expand test coverage for logger, context, and langchain instrumentation ([#28](https://github.com/agentuity/sdk-py/pull/28))\n- Add agent inspect endpoint support ([#29](https://github.com/agentuity/sdk-py/pull/29))\n\n## v0.0.76\n\n<Callout type=\"info\">\n  Released: April 3, 2025\n</Callout>\n\n### Fixed\n\n- Fix Langchain instrumentation and add openai-agents dependency ([#24](https://github.com/agentuity/sdk-py/pull/24))\n\n## v0.0.75\n\n<Callout type=\"info\">\n  Released: April 1, 2025\n</Callout>\n\n### Added\n\n- Add data and markdown methods to AgentResponse class ([#26](https://github.com/agentuity/sdk-py/pull/26))\n- Add PyPI release workflow ([#22](https://github.com/agentuity/sdk-py/pull/22))\n\n### Changed\n\n- Update logo URL from relative to absolute path ([#19](https://github.com/agentuity/sdk-py/pull/19))\n- Remove 'work in progress' warning from README ([#20](https://github.com/agentuity/sdk-py/pull/20))\n- Update Agentuity gateway URL from /llm/ to /gateway/ ([#21](https://github.com/agentuity/sdk-py/pull/21))\n- Update to use AGENTUITY_CLOUD_PORT with fallback to PORT ([#23](https://github.com/agentuity/sdk-py/pull/23))\n- Use transport instead of API for hosted SDK api ([#25](https://github.com/agentuity/sdk-py/pull/25))\n- Update CHANGELOG.md for v0.0.74 ([#18](https://github.com/agentuity/sdk-py/pull/18))\n\n## v0.0.74\n\n<Callout type=\"info\">\n  Released: March 25, 2025\n</Callout>\n\n### Added\n\n- Better support for OpenAI and Agents framework ([#16](https://github.com/agentuity/sdk-py/pull/16))\n- Add agentName to logger ([#17](https://github.com/agentuity/sdk-py/pull/17))\n\n## v0.0.73\n\n<Callout type=\"info\">\n  Released: March 19, 2025\n</Callout>\n\n### Fixed\n\n- Fix issue with non-stream functionality ([#15](https://github.com/agentuity/sdk-py/pull/15))\n\n## v0.0.72\n\n<Callout type=\"info\">\n  Released: March 16, 2025\n</Callout>\n\n### Added\n\n- Add the @agentuity/agentId to the context.logger for an agent ([#13](https://github.com/agentuity/sdk-py/pull/13))\n\n### Fixed\n\n- Fix import issue and add ruff for formatting and linting ([#14](https://github.com/agentuity/sdk-py/pull/14))\n\n## v0.0.71\n\n<Callout type=\"info\">\n  Released: March 16, 2025\n</Callout>\n\n### Added\n\n- SSE and Stream support with new stream() method and improved documentation ([#12](https://github.com/agentuity/sdk-py/pull/12))\n\n## v0.0.70\n\n<Callout type=\"info\">\n  Released: March 13, 2025\n</Callout>\n\n### Added\n\n- Stream IO Input: add new facility to support stream io for input data ([#10](https://github.com/agentuity/sdk-py/pull/10))\n\n## v0.0.69\n\n<Callout type=\"info\">\n  Released: March 10, 2025\n</Callout>\n\n### Changes\n\n- Implemented Vector and KeyValue services\n- Reorganized types into logical files\n- Added support for local handoff\n- Improved error handling\n- Added support for dynamic return types\n- Added `get_agents` method on context\n- Moved `autostart` into main package\n- Added tracing for remote agent calls\n- Added httpx dependency for improved HTTP client support\n"
    },
    {
      "file": "Cloud/agents.mdx",
      "meta": {
        "title": "Agents",
        "description": "The agents page is for managing your agents"
      },
      "content": "\n## Agent Dashboard Overview\n\nThe agent dashboard provides a list of your agents. This page helps you monitor your agent's status, usage metrics, and recent activity.\n\n<ThemeImage baseName=\"agents\" alt=\"Agent Dashboard\"  />\n\n### Managing an Agent\n\nYou can select a specific agent to view and manage its details.  The agent detail page provides a list of the agent's inputs and outputs, recent sessions and overview of costs.\n\n<ThemeImage baseName=\"agent-detail\" alt=\"Agent Detail\"  />\n\n### Agent Input & Output\n\nAgents receive data from various sources and send data to various destinations (input and output, or we call it IO).\n\nYou can add a new input or output by clicking the plus button in the agent IO visualization.\n\n<ThemeImage baseName=\"agent-io-new\" alt=\"Agent New IO\"  />\n\nWhen you agent is invoked, it will process the data and send the output to the output destination.\n\nThe agent request object will contain a property called `trigger` that will contain the source that triggered the agent. You can use this to determine the source of the data and process it accordingly. This is particularly useful when you are using multiple sources to trigger the same agent.\n\n<Tabs items={['TypeScript', 'Python']}>\n  <Tab value=\"TypeScript\">\n```typescript\nimport type { AgentContext, AgentRequest, AgentResponse } from '@agentuity/sdk';\n\nexport default async function Agent(\n  req: AgentRequest,\n  resp: AgentResponse,\n  ctx: AgentContext\n) {\n\tctx.logger.info('trigger was %s', req.trigger);\n\treturn resp.text(\"ok\");\n}\n```\n  </Tab>\n  <Tab value=\"Python\">\n```python\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\n\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n\tcontext.logger.info('trigger was %s', request.trigger)\n\treturn response.text(\"ok\")\n```\n  </Tab>\n</Tabs>\n\n\n#### Agent Webhook Source\n\nTo configure your agent to receive data from a webhook, you need to add a new webhook source.  When receiving data from a webhook, the agent will send the data to the agent's inputs asynchronously without waiting for the agent to finish processing the data.\n\n<ThemeImage baseName=\"agent-io-webhook-source\" alt=\"Agent New Webhook Source\"  />\n\nFor Webhook sources, you can require authorization to access the webhook.  This is useful if you want to protect your webhook from unauthorized access.\n\nThe following authentication methods are supported:\n\n| Type    | Description |\n|---------|-------------|\n| Project | Authenticated using the project API Key |\n| Public  | No authentication required - webhook is publicly accessible |\n| Bearer  | Authenticated using Bearer Token via `Authorization: Bearer <token>` header |\n| Basic   | Authenticated using Basic Auth via `Authorization: Basic <username>:<password>` header |\n| Header  | Authenticated using custom header via `<key>: <value>` header |\n\n\nWhen using the Bearer, Basic or Header authentication methods, you can specify the authentication values for each agent.\n\nTo trigger a webhook using curl with a required Bearer token authentication, you can use the following command:\n\n```bash\ncurl -X POST https://agentuity.ai/webhook/agent_1234567890abcdef \\\n  -H \"Authorization: Bearer <token>\" \\\n  --json '{\"some\":\"data\"}'\n```\n\n<Callout type=\"info\">\n  Make sure to use the correct agent ID in the webhook URL.\n</Callout>\n\nThe response from the webhook will contain an informational message if successful.  Additionally, the `Location` header will contain the URL that can be used to read the agent output.  This URL will block until the agent has started streaming the output response.\n\n#### Agent API Source\n\nTo configure your agent to receive data as an API endpoint, you need to add a new API source.  When receiving data from an API endpoint, the agent will send the data to the agent's inputs synchronously and wait for the agent to respond.\n\n<ThemeImage baseName=\"agent-io-api-source\" alt=\"Agent New API Source\"  />\n\nFor API sources, you can require authorization to access the API.  This is useful if you want to protect your API from unauthorized access.\n\nThe following authentication methods are supported:\n\n| Type    | Description |\n|---------|-------------|\n| Project | Authenticated using the project API Key |\n| Public  | No authentication required - webhook is publicly accessible |\n| Bearer  | Authenticated using Bearer Token via `Authorization: Bearer <token>` header |\n| Basic   | Authenticated using Basic Auth via `Authorization: Basic <username>:<password>` header |\n| Header  | Authenticated using custom header via `<key>: <value>` header |\n\nWhen using the Bearer, Basic or Header authentication methods, you can specify the authentication values for each agent.\n\nWhen you plan on using the API source, it is recommended that you stream data to and from the agent.\n\nTo invoke an API using curl with a required Bearer token authentication, you can use the following command:\n\n```bash\ncurl -X POST https://agentuity.ai/api/agent_1234567890abcdef \\\n  -H \"Authorization: Bearer <token>\" \\\n  --json '{\"some\":\"data\"}'\n```\n\n<Callout type=\"info\">\n  Make sure to use the correct agent ID in the webhook URL.\n</Callout>\n\n\n#### Agent Email Source\n\nFor Email sources, you can configure your agent at a unique agent email address.  When receiving an email, the agent will send the email content to the agent's inputs asynchronously without waiting for the agent to finish processing the email.\n\n<ThemeImage baseName=\"agent-io-email-source\" alt=\"Agent New Email Source\"  />\n\n<Callout type=\"info\">\n  An email source can only be triggered by an email sent to the agent's email address and not via the API.\n</Callout>\n\nThe response from the API will contain an informational message if successful.  Additionally, the `Location` header will contain the URL that can be used to read the agent output.  This URL will block until the agent has started streaming the output response.\n\n#### Agent Schedule Source\n\nFor running an agent on a schedule, you can configure your agent to use a cron source.  When the agent is scheduled to run, the agent will send the data to the agent's inputs asynchronously without waiting for the agent to finish processing the data.\n\n<ThemeImage baseName=\"agent-io-cron-source\" alt=\"Agent New Schedule Source\"  />\n\nWhen creating a new schedule, you can specify the cron expression to run the agent.  The cron expression is a string that represents the schedule to run the agent.\n\n<div className=\"flex items-center justify-start gap-2\">Click the sparkle icon <Sparkle /> to help you create a new cron expression using AI.</div>\n\nYou can optionally specify a content type and payload to send to the agent when the agent is scheduled to run.\n\nA cron source can only be triggered internally by the Agentuity Platform and not via the API. However, you can trigger a scheduled agent to run by selecting the schedule and selecting \"Manual Run\" in the context menu.\n\n<ThemeImage baseName=\"agent-io-cron-trigger\" alt=\"Trigger Cron Manually\"  />\n\n### Agent Deployments\n\nAgentuity supports continous deployment using a native GitHub App integration and a GitHub Actions workflow.\n\n#### GitHub App Integration\n\nThe GitHub App integration is a native integration that allows you to deploy your agents to the Agentuity Platform from your GitHub repository.\n\nTo enable the GitHub App integration, you need to provide permission for Agentuity to access your GitHub account. On your Project Settings page, you can find the GitHub App integration.\n\n<ThemeImage baseName=\"project-integration\" alt=\"Project Integrations\"  />\n\nOnce connected, each Project can be configured to deploy from a specific GitHub repository automatically.\n\n<ThemeImage baseName=\"project-integration-github\" alt=\"Project GitHub Integration\"  />\n\nWhen a new commit is pushed to the repository, the GitHub Actions workflow will be triggered and the agent will be deployed to the Agentuity Platform.\n\n<ThemeImage baseName=\"agent-deployment\" alt=\"Agent Deployment\"  />\n\nYou can select a specific deployment to view the deployment details including logs.\n\n<ThemeImage baseName=\"agent-deployment-detail\" alt=\"Agent Deployment Detail\"  />\n\nWhen using GitHub to deploy (either the GitHub App or the GitHub Actions workflow), your GitHub commit information will be displayed in the deployment details.\n\nYou can see all the projects that are connected to your GitHub account in the Settings > Integrations section.\n\n<ThemeImage baseName=\"settings-integration-github\" alt=\"GitHub Settings\"  />\n\nFrom here you can disconnect a specific project from your GitHub account or disconnect Agentuity from your GitHub account.\n\n\n#### GitHub Actions Workflow\n\nThe GitHub Actions workflow is a native integration that allows you to deploy your agents to the Agentuity Platform from your GitHub repository using GitHub Actions.\n\nYou can install the GitHub Actions workflow by visiting the [Agentuity GitHub Actions Marketplace](https://github.com/marketplace/actions/agentuity-deploy-action) and clicking the \"Install\" button.\n\n<ThemeImage baseName=\"github-action\" alt=\"GitHub Actions Workflow\"  />\n\nYou can also directly use the [Agentuity GitHub Actions](https://github.com/agentuity/deploy-action) repository to deploy your agents to the Agentuity Platform.\n\n#### Manual Deployment\n\nYou can also manually deploy your agents to the Agentuity Platform with the CLI using the following command:\n\n\n```bash\nagentuity deploy\n```\n\nBy default, the CLI will use the `latest` tag to deploy your agents. You can specify one or more tags to deploy by using the `--tag` flag.  The active deployment will only be used for agent requests based on the `latest` tag.\n\nYou can test new versions of your agents by using the `--tag` flag to specify a specific tag and then using the tag in either the `webhook` or `api` source.\n\nFor example, if you have a tag called `v1.0.0`, you can use the following command to deploy it:\n\n```bash\nagentuity deploy --tag v1.0.0\n```\n\nThis will tag the deployment with the `v1.0.0` tag but not make it the active deployment.\n\nYou can the invoke the agent with the `v1.0.0` tag by using curl with the following command:\n\n```bash\ncurl -X POST https://agentuity.ai/api/agent_1234567890abcdef/v1.0.0 \\\n  -H \"Authorization: Bearer <token>\" \\\n  --json '{\"some\":\"data\"}'\n```\n\n<Callout type=\"info\">\n  Make sure to use the correct agent ID and tag in the API URL. Also, make sure to use the correct authentication token and that you have configured the API source.\n</Callout>\n\n#### Rollback & Delete\n\nYou can rollback to a previous deployment by using the CLI with the following command:\n\n```bash\nagentuity rollback\n```\n\nIf you would like to delete the deployment in addition to rolling back, you can use the `--delete` flag.\n\n<ThemeImage baseName=\"cli-rollback\" alt=\"CI Rollback\"  />\n\nYou can select a specific deployment:\n\n<ThemeImage baseName=\"cli-rollback-detail\" alt=\"CI Rollback\"  />\n\n### Agent Logs\n\nYou can view the logs for a specific agent by selecting the agent and then clicking the \"Logs\" tab.\n\n<ThemeImage baseName=\"agent-logs\" alt=\"Agent Logs\"  />\n\nIf you select a specific log, you can view the log detail for the specific log entry.\n\n<ThemeImage baseName=\"agent-logs-detail\" alt=\"Agent Logs Detail\"  />\n\n### Agent Sessions\n\nThe sessions dashboard provides a list of your agent sessions. This page helps you monitor your agent's status, usage metrics, and recent activity.\n\n<ThemeImage baseName=\"sessions\" alt=\"Agent Sessions\"  />\n\nIf you select a specific session, you can view the session detail for the specific session.\n\n<ThemeImage baseName=\"agent-session-detail\" alt=\"Agent Session Detail\"  />\n\nIf you select a specific span, a session span trace detail will be displayed with specific detail about the execution of the span.\n\n<ThemeImage baseName=\"agent-session-detail-sidebar\" alt=\"Agent Session Detail Sidebar\"  />\n"
    },
    {
      "file": "Cloud/aigateway.mdx",
      "meta": {
        "title": "AI Gateway",
        "description": "The AI Gateway page is for understanding your AI Gateway usage"
      },
      "content": "\n## Understanding the AI Gateway\n\n\n<ThemeImage baseName=\"aigateway\" alt=\"AI Gateway\" width={3680} height={ 2382} />\n\n## Viewing Your Session Usage\n\nWhen you navigate to the AI Gateway > Sessions page in the Cloud Console, you'll see a table listing all your sessions with the following information:\n\n- **Agent**: The name of your agent\n- **Provider**: The AI provider used for the session\n- **Model**: The model used for the session\n- **LLM Cost**: The cost of the LLM used for the session\n- **Timestamp**: The session timestamp\n\nYou can filter the list of sessions using the search box at the top of the table to quickly find specific specific sessions or filter by properties such as provider.\n\n## Session Detail\n\nYou can select a key value instance to view and manage its data.\n\n<ThemeImage baseName=\"aigateway-detail\" alt=\"AI Gateway Session Detail\"/>\n\n\n## AI Gateway Usage\n\nBy default, when your agent is not configured to use a specific AI provider using the override, it will use the AI Gateway to route requests to the appropriate providera automatically.\n\nTo override using the AI Gateway, use the AI provider specific environment variables to configure them. \n\nFor example, to use the OpenAI API and use your own API key, you can set the provider API Gateway in the `.env` file of your agent project:\n\n\n```\nOPENAI_API_KEY=your-api-key\n```\n\nWhen you deploy your agent projet, your agent will use the OpenAI API directly instead of the AI Gateway.\n\n<Callout type=\"info\">\nEach AI Provider uses their own API Key and configuration. Please consult the documentation for your specific provider to learn how to set up the API Key.\n</Callout>\n"
    },
    {
      "file": "Cloud/api-keys.mdx",
      "meta": {
        "title": "API Keys",
        "description": "The API Keys page is for managing your API keys"
      },
      "content": "\n## Viewing Your API Keys\n\nWhen you navigate to the API Keys page in the Cloud Console (under Settings), you'll see a table listing all your API keys with the following information:\n\n- **Name**: The descriptive name you've given to the API key\n- **Key**: The actual API key value (hidden by default for security)\n- **Expires**: When the API key will expire\n- **Last Used**: When the API key was last used\n- **Owner**: The user who created the API key\n\n\n<ThemeImage baseName=\"apikey\" alt=\"API Keys\"  />\n\n## Creating a New API Key\n\nTo create a new API key:\n\n1. Navigate to the API Keys page in the Cloud Console (under Settings)\n2. Click the \"Create API Key\" button in the top-right corner\n3. In the dialog that appears:\n   - Enter a descriptive name for the key (e.g., \"Production API Key\")\n   - Set an expiration date for the key\n4. Click \"Create Key\" to generate the new API key\n5. **Important**: Copy the API key value immediately, as it will only be shown once\n\nNote: An API key is automatically created when you create a new project. You can view and manage this key in the API Keys page.\n\n<ThemeImage baseName=\"apikey-new\" alt=\"New API Key\"  />"
    },
    {
      "file": "Cloud/index.mdx",
      "meta": {
        "title": "Overview",
        "description": "Introduction to the Agentuity Cloud Console and its features"
      },
      "content": "\nThe Agentuity Cloud Console is a web-based interface for managing your Agentuity resources, projects, and settings. This guide provides an overview of the main features and functionality available in the Cloud Console.\n\n- Create and manage projects via the [Project Dashboard](/Cloud/project)\n- Configure settings and API keys [API Keys](/Cloud/api-keys)\n- Manage agentic services ([Vector](/Cloud/vector-memory), [Key-Value](/Cloud/key-value-memory), and [AI Gateway](/Cloud/aigateway))\n- Monitor agent deployments and runs via the [Agent Dashboard](/Cloud/agents)\n- View logs and telemetry data via the [Sessions](/Cloud/sessions)\n\n\n\n### Agentic Services\n\nThe Services section provides tools for managing different types of agentic services:\n\n- **[Vector Memory Storage](/Cloud/vector-memory)**: For semantic search and large context windows, ideal for knowledge bases and historical data\n- **[Key Value Storage](/Cloud/key-value-memory)**: For fast, simple, or temporary data storage or caching\n- **[AI Gateway](/Cloud/aigateway)**: For managing access to various AI models and their usage and billing\n\n\n### Settings and Configuration\n\nThe Settings section allows you to manage various configuration options:\n\n- **[API Keys](/Cloud/api-keys)**: Create and manage API keys for authenticating with Agentuity services\n- **Organization Settings**: Manage organization details and members\n- **User Profile**: Update your user profile and preferences\n"
    },
    {
      "file": "Cloud/key-value-memory.mdx",
      "meta": {
        "title": "Key Value Storage",
        "description": "The Key Value Storage page is for managing your key value memory storage"
      },
      "content": "\n## Understanding Key Value Storage\n\nKey value memory storage is designed for fast, simple, or temporary data storage, making it ideal for:\n\n- Session data\n- Configuration settings\n- Caching\n- Temporary state management\n- Simple data structures\n- Sharing state between agents\n\n\n<ThemeImage baseName=\"keyvalue\" alt=\"Key Value Memory Storage\"  />\n\n## Viewing Your Key Value Instances\n\nWhen you navigate to the Memory > Key Value page in the Cloud Console, you'll see a table listing all your key value instances with the following information:\n\n- **Name**: The name of your key value instance\n- **Size**: The storage size used by the key value instance\n\nYou can filter the list of key value instances using the search box at the top of the table to quickly find specific instances by name.\n\n## View Key Value Data\n\nYou can select a key value instance to view and manage its data.\n\n<ThemeImage baseName=\"keyvalue-detail\" alt=\"Key Value Memory Storage Detail\"  />\n\n\n## Creating a New Key Value Instance\n\nThere are two ways to create a new key value instance:\n\n1. From the Services > Key Value page in the Cloud Console\n2. In code, using the Agentuity SDK\n\n<ThemeImage baseName=\"keyvalue-new\" alt=\"New Key Value Memory Storage\"  />"
    },
    {
      "file": "Cloud/organization.mdx",
      "meta": {
        "title": "Organization Settings",
        "description": "The organization settings page allows you to manage members."
      },
      "content": "\n## Organization Settings\n\nThe Organization Settings page is used to manage your organization members, verified domain and your organization settings.\n\n\n<ThemeImage baseName=\"settings-org\" alt=\"Organization Settings\"  />\n"
    },
    {
      "file": "Cloud/project.mdx",
      "meta": {
        "title": "Projects",
        "description": "The projects page is for managing your agent projects"
      },
      "content": "\n## Projects Overview\n\nThe project dashboard provides a list of your agent projects. This page helps you monitor your projects's status, usage metrics, and recent activity.\n\n<ThemeImage baseName=\"projects\" alt=\"Project Dashboard\"  />\n\n\n### Project Settings\n\n#### Environment Variables & Secrets\n\nYou can manage environment variables and secrets for your project in the Project > Settings page.\n\n<ThemeImage baseName=\"project-env\" alt=\"Project Environment Variables\"  />\n\nIn addition to environment variables, you can also view your Project API Key and the SDK Key.\n\n\nYou can also manage your environment variables and secrets from the CLI using the following command:\n\n```bash\nagentuity env set <key> <value>\n```\n\nUse `--help` to see other options.\n\nYou can `get`, `delete`, `list` and `set` environment variables and secrets using the CLI.\n\nWhen setting an environment variable or secret, the CLI will attempt to determine the type of the value and set it accordingly. However, you can force the value to be a secret by using the `--secret` flag.\n\nThe `.env` file is a special file that is used to store environment variables and secrets for your project. It is a simple text file that contains key-value pairs.  The `.env` file is automatically loaded when you run the CLI but not used (or not uploaded) in production.\n\nIf you would like to have different environment variables and secrets for development and production, you can use the `.env.development` file which will override values in the `.env` file when running `agentuity dev`.\n\n<Callout type=\"warn\">\n  The `.env` file must not be committed to your source code repository as it contains sensitive information. By default, an agentuity project will exclude this file and others like it in the `.gitignore` file if you use the `agentuity new` command to create your project.\n</Callout>\n\n##### API Keys\n\nThere are two automatically generated API keys for your project:\n\n- **Project API Key** (the environment variable is `AGENTUITY_PROJECT_API_KEY`)\n- **SDK Key** (the environment variable is `AGENTUITY_SDK_KEY`)\n\nThe Project API Key is used to authenticate requests to the Agentuity API. You can view your Project API Key in the Project > Settings page.\n\nThe SDK Key is used to authenticate requests to the Agentuity SDK from your agents when running in development mode. You can view your SDK Key in the Project > Settings page.\n\nBoth keys are created automatically when you create a new project and stored in the project's `.env` file.\n\nYou can create additional API keys for your project in the [Settings > API Keys page](./api-keys)."
    },
    {
      "file": "Cloud/settings.mdx",
      "meta": {
        "title": "Settings",
        "description": "The settings page allows you to manage your overall organization settings"
      },
      "content": "\n## Settings\n\nThe Settings pages are used to manage your overall organization settings.\n\n### API Keys\n\nYou can manage your API keys in the [Settings > API Keys page](./api-keys).\n\n### Organization\n\nYou can manage your organization settings in the [Settings > Organization page](./organization).\n\n\n"
    },
    {
      "file": "Cloud/vector-memory.mdx",
      "meta": {
        "title": "Vector Storage",
        "description": "The Vector Storage page is for managing your vector storage"
      },
      "content": "\n## Understanding Vector Storage\n\nVector memory storage is designed for semantic search and large context windows, making it ideal for:\n\n- Knowledge bases\n- Historical data\n- Semantic search applications\n- Applications requiring understanding of content meaning\n- Long-term memory for agents\n\n## Viewing Your Vector Instances\n\nWhen you navigate to the Memory > Vector page in the Cloud Console, you'll see a table listing all your vector instances with the following information:\n\n- **Name**: The name of your vector instance\n- **Size**: The storage size used by the vector instance\n\nYou can filter the list of vector instances using the search box at the top of the table to quickly find specific instances by name.\n\n<ThemeImage baseName=\"vector\" alt=\"Vector Memory Storage\"  />\n\n## View Vector Data\n\nYou can select a vector instance to view and manage its data.\n\n<ThemeImage baseName=\"vector-detail\" alt=\"Vector Memory Storage Detail\"  />\n\n\n## Creating a New Vector Instance\n\nThere are two ways to create a new vector instance:\n\n1. From the Services > Vector page in the Cloud Console\n2. In code, using the Agentuity SDK\n\n\n<ThemeImage baseName=\"vector-new\" alt=\"New Vector Memory Storage\"  />"
    },
    {
      "file": "Examples/index.mdx",
      "meta": {
        "title": "Examples",
        "description": "Links to examples across our GitHub repositories"
      },
      "content": "\nWhile our comprehensive examples documentation is coming soon,\nyou can explore our GitHub repositories where we maintain a\ncollection of reference implementations.\n\n<div className=\"mt-8 mb-8\">\n  <a\n    href=\"https://github.com/agentuity/examples\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    className=\"inline-flex items-center justify-center px-4 py-0.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n  >\n    <svg className=\"h-4 w-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/></svg>\n    View Examples on GitHub\n  </a>\n</div>\n\n## Featured Examples\n\n### Miami Concierge Agent Template\n\nA React-based concierge service template for Miami visitors, showcasing how to build a user-friendly agent interface.\n\n<div className=\"my-6 aspect-w-16 aspect-h-9\">\n  <iframe\n    width=\"100%\"\n    height=\"400\"\n    src=\"https://www.youtube.com/embed/7rfVPT4-uTA\"\n    title=\"Miami Concierge Agent Template\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n\n<div className=\"mt-4 mb-8\">\n  <a\n    href=\"https://github.com/agentuity/agent-react-miami-concierge-template\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    className=\"inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n  >\n    <svg className=\"h-3.5 w-3.5 mr-1.5\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/></svg>\n    View on GitHub\n  </a>\n</div>\n\n### Content Marketing Agent System\n\nAgents for creating, managing, and scheduling social media content using a multi-agent architecture.\n\n<div className=\"mt-4 mb-8\">\n  <a\n    href=\"https://github.com/agentuity/agent-social-marketing\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    className=\"inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n  >\n    <svg className=\"h-3.5 w-3.5 mr-1.5\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/></svg>\n    View on GitHub\n  </a>\n</div>\n\n### Newsroom: AI-Powered Content Pipeline\n\nAn automated content generation system that collects, processes, and publishes AI-related news content using specialized AI agents.\n\n<div className=\"mt-4 mb-8\">\n  <a\n    href=\"https://github.com/agentuity/newsroom-agentuity\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    className=\"inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n  >\n    <svg className=\"h-3.5 w-3.5 mr-1.5\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/></svg>\n    View on GitHub\n  </a>\n</div>\n\n### Agent Changelog\n\nA tool for automatically generating and managing changelogs for your projects.\n\n<div className=\"mt-4 mb-8\">\n  <a\n    href=\"https://github.com/agentuity/agent-changelog\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    className=\"inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n  >\n    <svg className=\"h-3.5 w-3.5 mr-1.5\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/></svg>\n    View on GitHub\n  </a>\n</div>\n\n## SDK Examples\n\nWe provide comprehensive examples for our SDKs to help you get started with building agents using Agentuity.\n\n### JavaScript SDK Examples\n\nOur JavaScript SDK examples demonstrate how to build agents using JavaScript:\n\n<div className=\"mt-4 mb-4\">\n  <a\n    href=\"/SDKs/javascript/examples\"\n    className=\"inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n  >\n    View JavaScript SDK Examples\n  </a>\n</div>\n\n### Python SDK Examples\n\nOur Python SDK examples demonstrate how to build agents using Python:\n\n<div className=\"mt-4 mb-4\">\n  <a\n    href=\"/SDKs/python/examples\"\n    className=\"inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n  >\n    View Python SDK Examples\n  </a>\n</div>\n"
    },
    {
      "file": "Guides/index.mdx",
      "meta": {
        "title": "Guides"
      },
      "content": ""
    },
    {
      "file": "Introduction/architecture.mdx",
      "meta": {
        "title": "Architecture Overview",
        "description": "Understanding Agentuity's system architecture and components"
      },
      "content": "\n## System Architecture\n\nAgentuity is a cloud platform designed to run and scale AI agents with enterprise-grade reliability. \nOur architecture follows a container-based approach, where each agent operates in its own specialized \nenvironment.\n\nUnlike traditional serverless platforms, Agentuity ensures containers run for as long as agents need, \nmaintaining state and context throughout agent lifecycles. This long-running container approach is \noptimal for complex AI workloads that may require extended processing time.\n\nThe platform is fundamentally cross-platform, allowing you to run different agent frameworks \n(CrewAI, Langchain, custom agents) side by side in the same ecosystem, with built-in communication \nchannels between them.\n\n## Core Components\n\nAgentuity consists of five primary components:\n\n\n1. **Agent Platform** - The cloud platform for providing agent services, providing:\n   - Agent communication and routing\n   - Agent monitoring, logging, telemetry and troubleshooting\n   - Agent usage analytics and performance insights\n   - Automatic scaling on-demand based on workload\n   - Agent services such as KeyValue, Vector storage, AI Gateway and more\n\n2. **Agent Runtime** - The execution environment where your agents run, providing:\n   - Isolated, secure virtualized environment for each agent project\n   - Resource management and optimization\n   - Long-running support for persistent agents\n   - Dynamic Storage, Compute and Networking resources\n\n3. **Command Line Interface (CLI)** - A developer tool that enables:\n   - Quick agent creation and initialization\n   - Local development and testing\n   - Deployment management to the Agentuity cloud\n   - Integration with external Agentic code tools via MCP\n\n4. **Software Development Kits (SDKs)** - Libraries that provide:\n   - Agent-native tools and services integration with the Agent Platform\n   - Runtime-specific optimizations for Python and JavaScript (Node and Bun)\n   - Integration capabilities with external systems\n   - Enhanced agent capabilities and extensions which work cross-framework and cross-runtime\n\n4. **Web Console** - A management interface offering:\n   - Real-time agent monitoring and metrics\n   - Deployment and configuration management\n   - Usage analytics, logging, monitoring and performance insights\n   - Team collaboration features\n\n## Data Flow\n\nAgent communication and data flow in Agentuity follow secure, encrypted channels:\n\n1. **Agent-to-Agent Communication** - Agents can communicate with each other through authenticated,encrypted routing, \nregardless of the underlying frameworks or runtimes used.\n\n2. **External Integrations** - Agents can connect to external systems and data sources through managed \nintegration points.\n\n3. **Deployment Pipeline** - Your project code is packaged, containerized, and deployed to the Agentuity \ncloud infrastructure with appropriate networking and routing configured automatically. Built-in support for GitHub Actions.\n\n## Scalability\n\nAgentuity is designed for enterprise-scale agent deployments:\n\n- **Horizontal Scaling** - Automatically provision additional resources as demand increases\n- **Framework Agnostic** - Scale any type of agent regardless of the underlying framework\n- **Load Balancing** - Distribute agent workloads efficiently across available resources\n- **Resource Optimization** - Intelligently allocate compute resources based on agent requirements\n\n## Security Architecture\n\nSecurity is foundational to Agentuity's design:\n\n- **Agent Isolation** - Each agent project operates in its own isolated environment\n- **Encrypted Communications** - All agent-to-agent communication is encrypted\n- **Secure Deployment** - Protected deployment pipeline from development to production\n\n## Project Conventions\n\nAgentuity projects follow specific conventions in order to take advantage of the deployment and cloud platform Agentuity offers. While we don't dictate which framework to use, we do have a few things you have to follow in your file system. Understanding these conventions are important.\n\n### Project Structure\n\nEvery Agentuity project requires the following core components:\n\n1. **agentuity.yaml** - The central configuration file that defines:\n   - Project metadata (name, ID, description)\n   - Development settings (port, watch patterns)\n   - Deployment configuration (resources, scaling)\n   - Bundler settings (language, runtime)\n   - Agent definitions and routing\n\n2. **Environment Variables** - Stored in a `.env` file:\n   - `AGENTUITY_SDK_KEY` - Identifies the SDK level API Key (only used in development to access the Agentuity Cloud)\n   - `AGENTUITY_PROJECT_KEY` - Identifies the project level API Key\n   - Additional provider-specific keys (OpenAI, Anthropic, etc.)\n\n3. **Agent Directory** - Specified in `bundler.agents.dir` (determined by the runtime):\n   - Each agent has its own subdirectory\n   - Language-specific entry points (index.ts/js for JavaScript, agent.py for Python)\n   - Agent-specific configuration and dependencies\n\n### Language-Specific Conventions\n\n#### JavaScript/TypeScript Projects\n\n```\nmy-project/\n├── agentuity.yaml        # Project configuration\n├── .env                  # Environment variables\n├── package.json          # Dependencies and scripts\n└── src/\n    └── agents/           # Agent directory\n        └── my-agent/     # Individual agent\n            └── index.ts  # Agent entry point\n```\n\n- Each agent must export a handler function that processes requests\n- TypeScript is recommended but JavaScript is fully supported\n- Supported runtimes: Node.js and Bun\n\n#### Python Projects\n\n```\nmy-project/\n├── agentuity.yaml        # Project configuration\n├── .env                  # Environment variables\n├── pyproject.toml        # Dependencies and configuration\n└── agents/               # Agents directory\n    └── my-agent/         # Individual agent\n        └── agent.py      # Agent entry point\n```\n\n- Each agent must define a `run()` function that processes requests\n- Supported runtimes: Python and uv (for dependency management)\n\n### Configuration File (agentuity.yaml)\n\nThe `agentuity.yaml` file is the heart of your project, defining how it behaves in development and production:\n\n```yaml\nversion: \">=0.0.0\"         # Minimum CLI version required\nproject_id: \"proj_...\"     # Unique project identifier\nname: \"My Project\"         # Human-readable project name\ndescription: \"...\"         # Optional project description\n\n# Development configuration\ndevelopment:\n  port: 3000               # Local development server port\n  watch:\n    enabled: true          # Auto-reload on file changes\n    files: [\"src/**/*.ts\"] # Files to watch\n\n# Deployment configuration\ndeployment:\n  resources:\n    memory: \"1Gi\"          # Memory allocation\n    cpu: \"1000m\"           # CPU allocation\n\n# Bundler configuration\nbundler:\n  language: \"javascript\"   # Programming language (javascript or python)\n  runtime: \"nodejs\"        # Runtime environment (nodejs, bunjs, python, uv)\n  agents:\n    dir: \"src/agents\"      # Directory where agents are located\n\n# Agents configuration\nagents:\n  - id: \"agent_...\"        # Unique agent identifier\n    name: \"My Agent\"       # Human-readable agent name\n    description: \"...\"     # Optional agent description\n```\n\n### Why These Conventions Matter\n\nThese conventions enable several key capabilities:\n\n1. **Consistent Development Experience** - Standardized structure makes it easier to work across projects\n2. **Automated Deployment** - The CLI can package and deploy your project without additional configuration\n3. **Framework Flexibility** - Use any agent framework while maintaining compatibility with the platform\n"
    },
    {
      "file": "Introduction/index.mdx",
      "meta": {
        "title": "What is Agentuity?",
        "description": "Agentuity is rebuilding the cloud for AI Agents."
      },
      "content": "\n\n[Agentuity](https://agentuity.com) is a cloud platform designed specifically to make it easy to build, deploy, and operate AI Agents at scale.\n\n\nOur mission is to provide a fully agentic infrastructure and tools necessary to build Agents that are fully operated by AI.\n\nWith Agentuity, you or your agents can:\n\n- Deploy agents with a single command to a fully agentic infrastructure\n- Monitor real-time performance, analytics, metrics and logs\n- Auto scale agents effortlessly and on-demand\n- Connect agents to various input and output channels (API, chat, webhooks, email, SMS, voice, etc.)\n- Securely communicate between agents and build complex agentic workflows\n- Use any AI agent framework across Python, Node.js or Bun\n\n<h3 className=\"text-base text-cyan-700 dark:text-cyan-300\">\nWe see a near future where Agents are the primary way to build and operate software and where all the infrastructure is built uniquely for them.\n</h3>\n\n## Agentuity Platform Overview\n\n<iframe \n  width=\"100%\" \n  height=\"400\" \n  src=\"https://www.youtube.com/embed/AI1tfCIVOiU\" \n  title=\"Agentuity Platform Overview\" \n  frameBorder=\"0\" \n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n  allowFullScreen\n></iframe>\n\n## Getting Started\n\nSignup and have your first Agent running in minutes.\n\nimport { Step, Steps } from 'fumadocs-ui/components/steps';\n\n<Steps>\n<Step>\n### Create a Free Account\n[Create a free Agentuity account](https://app.agentuity.com/sign-up) or [Sign in](https://app.agentuity.com/sign-in) to the cloud portal.\n\nIf you already have the Agentuity CLI installed, you can skip this step and signup using the CLI.\n</Step>\n\n<Step>\n### Install the CLI\n\nThe Agentuity CLI is a cross-platform command-line tool for working with Agentuity Cloud. It supports Windows (using WSL), macOS, and Linux.\n\n```bash\ncurl -fsS https://agentuity.sh | sh\n```\n</Step>\n\n<Step>\n### Sign up for an Account with the CLI\n\nYou can sign up for a free account using the CLI or skip this step if you already have an account.\n\n```bash\nagentuity auth signup\n```\n</Step>\n\n<Step>\n### Login to Agentuity\n\nYou can skip this step if you used the CLI to sign up for an account, otherwise you must login to your account using the CLI.\n\n```bash\nagentuity login\n```\n</Step>\n\n<Step>\n### Create Your First Project\n```bash\nagentuity new\n```\n</Step>\n\n<Step>\n### Run You Agent Locally\n\nYou can run your agent locally to test it out before you deploy it to the cloud.\n\n```bash\nagentuity dev\n```\n</Step>\n\n<Step>\n### Deploy Your Project to the Cloud\n```bash\nagentuity deploy\n```\n\nIf you're using an Agentic Code Editor such as [Cursor](https://www.cursor.com), just tell your agent to deploy your project to the cloud such as \"Deploy my project to the cloud\" and it will do it for you.\n\n</Step>\n\n</Steps>\n\n## Documentation Sections\n\n<Cards>\n  <Card\n    title=\"Cloud & Account\"\n    href=\"/Cloud/\"\n    description=\"Learn about Agentuity Cloud features, account management, and general platform information.\"\n  />\n  <Card\n    title=\"Command Line Interface\"\n    href=\"/CLI/installation\"\n    description=\"Get started with the Agentuity CLI for managing your agents and deployments from the terminal.\"\n  />\n  <Card\n    title=\"Examples & Tutorials\"\n    href=\"/Examples/\"\n    description=\"Explore sample projects, step-by-step tutorials, and implementation guides.\"\n  />\n  <Card\n    title=\"SDKs & Integration\"\n    href=\"/SDKs\"\n    description=\"Integrate Agentuity Cloud into your applications using our SDKs and APIs.\"\n  />\n</Cards>\n\n"
    },
    {
      "file": "Introduction/templates.mdx",
      "meta": {
        "title": "Templates",
        "description": "Pre-configured agent configurations"
      },
      "content": "\n## Overview\n\nTemplates are pre-configured agent configurations that can be used to quickly deploy and configure Agentuity for popular agent frameworks, AI providers and runtimes.\n\nWhen you create a new Agent project, you can select a template to use as a starting point.\n\n### Python Frameworks\n\nThe following Python Agent frameworks are supported out-of-the-box:\n\n| Framework    | More Information                    |\n| ------------ | ----------------------------------- |\n| CrewAI       | https://www.crewai.com/             |\n| LlamaIndex   | https://www.llamaindex.ai/          |\n| LangChain    | https://www.langchain.com/          |\n| LangGraph    | https://www.langchain.com/langgraph |\n| Pydantic AI  | https://ai.pydantic.dev/            |\n\nThe following Python AI providers are supported out-of-the-box:\n\n| Provider      | More Information                |\n| ------------- | ------------------------------- |\n| Anthropic     | https://www.anthropic.com/      |\n| Google Gen AI | https://ai.google.com/          |\n| OpenAI        | https://openai.com/             |\n| LiteLLM       | https://www.litellm.ai/         |\n\n### JavaScript Frameworks\n\nThe following JavaScript Agent frameworks are supported out-of-the-box:\n\n| Framework     | More Information                |\n| ------------- | ------------------------------- |\n| Mastra        | https://mastra.ai/              |\n| Vercel AI SDK | https://ai.vercel.com/          |\n\nThe following JavaScript AI providers are supported out-of-the-box:\n\n| Provider      | More Information                |\n| ------------- | ------------------------------- |\n| Anthropic     | https://www.anthropic.com/      |\n| Google Gen AI | https://ai.google.com/          |\n| OpenAI        | https://openai.com/             |\n\n<Callout type=\"info\">\nFor JavaScript, both the Bun and NodeJS runtimes are supported.\n</Callout>\n\n## Creating Templates\n\nThe Agentuity Template system is fully open source and you can create your own templates by forking the [Agentuity Template repository](https://github.com/agentuity/templates) and making a pull request.\n\nRun the following command to test your template locally:\n\n```bash\nagentuity new --templates-dir <path-to-directory>\n```\n"
    },
    {
      "file": "SDKs/index.mdx",
      "meta": {
        "title": "SDKs",
        "description": "Agentuity SDKs"
      },
      "content": "\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem', padding: '1rem' }}>\n  <Card href=\"/SDKs/python\">\n    <h3>Python SDK</h3>\n    <p>Build AI Agents with our Python SDK</p>\n  </Card>\n  \n  <Card href=\"/SDKs/javascript\">\n    <h3>JavaScript SDK</h3>\n    <p>Build AI Agents using our JavaScript/TypeScript SDK</p>\n  </Card>\n</div>\n"
    },
    {
      "file": "SDKs/javascript/api-reference.mdx",
      "meta": {
        "title": "API Reference",
        "description": "Comprehensive reference for the Agentuity JavaScript SDK API"
      },
      "content": "\nThis section provides detailed documentation for the Agentuity JavaScript SDK API, including method signatures, parameters, return values, and example usage.\n\n## Table of Contents\n\n- [Agent Lifecycle](#agent-lifecycle)\n- [Storage APIs](#storage-apis)\n- [Agent Communication](#agent-communication)\n- [Response Types](#response-types)\n- [Request Handling](#request-handling)\n- [Logging](#logging)\n- [Telemetry](#telemetry)\n\n## Agent Lifecycle\n\nThe Agentuity SDK provides a structured way to define and handle agents. An agent consists of a handler function, with its configuration managed by the Agentuity CLI.\n\n### Agent Configuration\n\nAgent configuration is managed by the Agentuity CLI and stored in the project configuration file. The `AgentConfig` interface is used internally by the CLI and SDK:\n\n```typescript\ninterface AgentConfig {\n  /**\n   * the name of the agent\n   */\n  name: string;\n  /**\n   * the description of the agent\n   */\n  description?: string;\n}\n```\n\n### Agent Handler\n\nThe `AgentHandler` type defines the handler function for an agent:\n\n```typescript\ntype AgentHandler = (\n  request: AgentRequest,\n  response: AgentResponse,\n  context: AgentContext\n) => Promise<AgentResponseType>;\n```\n\n#### Parameters\n\n- `request`: An `AgentRequest` object containing the request data\n- `response`: An `AgentResponse` object for creating responses\n- `context`: An `AgentContext` object providing access to various capabilities\n\n#### Return Value\n\nThe handler function should return a Promise that resolves to an `AgentResponseType` object.\n\n#### Example\n\n```typescript\nimport { AgentHandler } from '@agentuity/sdk';\n\n// Agent handler function\nconst handler: AgentHandler = async (request, response, context) => {\n  try {\n    // Get the request data\n    const { name } = await request.data.json();\n    \n    // Log the request\n    context.logger.info(`Received greeting request for ${name}`);\n    \n    // Return a personalized greeting\n    return response.json({\n      message: `Hello, ${name}! Welcome to Agentuity.`\n    });\n  } catch (error) {\n    // Handle errors\n    context.logger.error('Error processing request', error);\n    return response.json({ error: 'Failed to process request' });\n  }\n};\n\nexport default handler;\n```\n\n## Storage APIs\n\nThe Agentuity SDK provides two storage APIs: Key-Value Storage and Vector Storage.\n\n\n### Key-Value Storage\n\nThe Key-Value Storage API provides a simple way to store and retrieve data. It is accessed through the `context.kv` object.\n\n#### `get(name: string, key: string): Promise<ArrayBuffer | null>`\n\nRetrieves a value from the key-value storage.\n\n##### Parameters\n\n- `name`: The name of the key-value storage\n- `key`: The key to retrieve the value for\n\n##### Return Value\n\nReturns a Promise that resolves to an ArrayBuffer containing the value, or null if the key does not exist.\n\n##### Example\n\n```typescript\n// Retrieve a value from key-value storage\nconst value = await context.kv.get('user-preferences', 'user-123');\nif (value) {\n  // Convert ArrayBuffer to string if needed\n  const valueString = new TextDecoder().decode(value);\n  console.log(`User preferences: ${valueString}`);\n} else {\n  console.log('User preferences not found');\n}\n```\n\n#### `set(name: string, key: string, value: ArrayBuffer | string | Json, ttl?: number): Promise<void>`\n\nStores a value in the key-value storage.\n\n##### Parameters\n\n- `name`: The name of the key-value storage\n- `key`: The key to store the value under\n- `value`: The value to store (can be an ArrayBuffer, string, or JSON object)\n- `ttl` (optional): Time-to-live in seconds (minimum 60 seconds)\n\n##### Return Value\n\nReturns a Promise that resolves when the value has been stored.\n\n##### Example\n\n```typescript\n// Store a string value\nawait context.kv.set('user-preferences', 'user-123', JSON.stringify({ theme: 'dark' }));\n\n// Store a JSON value\nawait context.kv.set('user-preferences', 'user-123', { theme: 'dark' });\n\n// Store a binary value\nconst binaryData = new Uint8Array([1, 2, 3, 4]).buffer;\nawait context.kv.set('user-data', 'user-123', binaryData);\n\n// Store a value with TTL (expires after 1 hour)\nawait context.kv.set('session', 'user-123', 'active', 3600);\n```\n\n#### `delete(name: string, key: string): Promise<void>`\n\nDeletes a value from the key-value storage.\n\n##### Parameters\n\n- `name`: The name of the key-value storage\n- `key`: The key to delete\n\n##### Return Value\n\nReturns a Promise that resolves when the value has been deleted.\n\n##### Example\n\n```typescript\n// Delete a value\nawait context.kv.delete('user-preferences', 'user-123');\n```\n\n### Vector Storage\n\nThe Vector Storage API provides a way to store and search for data using vector embeddings. It is accessed through the `context.vector` object.\n\n#### `upsert(name: string, ...documents: VectorUpsertParams[]): Promise<string[]>`\n\nInserts or updates vectors in the vector storage.\n\n##### Parameters\n\n- `name`: The name of the vector storage\n- `documents`: One or more documents to upsert, each with either embeddings or text\n\n##### Return Value\n\nReturns a Promise that resolves to an array of string IDs for the upserted vectors.\n\n##### Example\n\n```typescript\n// Upsert documents with text\nconst ids = await context.vector.upsert(\n  'product-descriptions',\n  { document: 'Ergonomic office chair with lumbar support', metadata: { category: 'furniture' } },\n  { document: 'Wireless noise-cancelling headphones', metadata: { category: 'electronics' } }\n);\n\n// Upsert documents with embeddings\nconst ids2 = await context.vector.upsert(\n  'product-embeddings',\n  { embeddings: [0.1, 0.2, 0.3, 0.4], metadata: { productId: '123' } },\n  { embeddings: [0.5, 0.6, 0.7, 0.8], metadata: { productId: '456' } }\n);\n```\n\n#### `search(name: string, params: VectorSearchParams): Promise<VectorSearchResult[]>`\n\nSearches for vectors in the vector storage.\n\n##### Parameters\n\n- `name`: The name of the vector storage\n- `params`: Search parameters including query, limit, similarity threshold, and metadata filters\n\n##### Return Value\n\nReturns a Promise that resolves to an array of search results, each containing an ID, metadata, and distance score.\n\n##### Example\n\n```typescript\n// Search for similar products\nconst results = await context.vector.search('product-descriptions', {\n  query: 'comfortable office chair',\n  limit: 5,\n  similarity: 0.7,\n  metadata: { category: 'furniture' }\n});\n\n// Process search results\nfor (const result of results) {\n  console.log(`Product ID: ${result.id}, Similarity: ${result.distance}`);\n  console.log(`Metadata: ${JSON.stringify(result.metadata)}`);\n}\n```\n\n#### `delete(name: string, ...ids: string[]): Promise<number>`\n\nDeletes vectors from the vector storage.\n\n##### Parameters\n\n- `name`: The name of the vector storage\n- `ids`: One or more IDs of vectors to delete\n\n##### Return Value\n\nReturns a Promise that resolves to the number of vectors that were deleted.\n\n##### Example\n\n```typescript\n// Delete vectors\nconst deletedCount = await context.vector.delete('product-descriptions', 'id1', 'id2', 'id3');\nconsole.log(`Deleted ${deletedCount} vectors`);\n```\n\n## Agent Communication\n\nThe Agentuity SDK allows agents to communicate with each other through the `context.getAgent()` method and agent redirection.\n\n### `getAgent(params: GetAgentRequestParams): Promise<RemoteAgent>`\n\nRetrieves a handle to a remote agent that can be invoked.\n\n#### Parameters\n\n- `params`: Parameters to identify the agent, either by ID or by name and project ID\n\n#### Return Value\n\nReturns a Promise that resolves to a `RemoteAgent` object that can be used to invoke the agent.\n\n#### Example\n\n```typescript\n// Get an agent by ID\nconst agent = await context.getAgent({ id: 'agent-123' });\n\n// Get an agent by name\nconst agent2 = await context.getAgent({ \n  name: 'data-processing-agent',\n  projectId: 'project-456'\n});\n\n// Invoke the agent\nconst result = await agent.run({ data: 'process this' }, 'application/json');\n```\n\n### Agent Handoff\n\nThe `response.handoff()` method allows an agent to handoff the request to another agent.\n\n#### `handoff(agent: GetAgentRequestParams, payload?: Json | ArrayBuffer | string, contentType?: string, metadata?: Record<string, Json>): AgentRedirectResponse`\n\nRedirects the current request to another agent.\n\n##### Parameters\n\n- `agent`: Parameters to identify the target agent\n- `payload` (optional): The payload to send to the target agent\n- `contentType` (optional): The content type of the payload\n- `metadata` (optional): Additional metadata to include with the request\n\n##### Return Value\n\nReturns an `AgentRedirectResponse` object.\n\n##### Examples\n\n```typescript\n// By ID\nreturn response.handoff({\n  id: 'agent_9e478ebc1b6b58f921725e2f6f0025ab',\n});\n\n// By Name\nreturn response.handoff({\n  name: 'my agent',\n});\n\n// By Name Scoped to a Project\nreturn response.handoff({\n  name: 'my agent',\n  projectId: 'proj_fc9a68c544c486cebf982c9843b9032b',\n});\n\n// With payload and metadata\nreturn response.handoff(\n  { name: 'data-processing-agent' },\n  { data: 'process this' },\n  'application/json',\n  { source: 'web-agent' }\n);\n```\n\n## Response Types\n\nThe Agentuity SDK provides various methods for creating different types of responses through the `response` object.\n\n### JSON Responses\n\n#### `json(data: Json, metadata?: Record<string, Json>): AgentResponseType`\n\nCreates a JSON response.\n\n##### Parameters\n\n- `data`: The JSON data to include in the response\n- `metadata` (optional): Additional metadata to include with the response\n\n##### Return Value\n\nReturns an `AgentResponseType` object with the JSON data.\n\n##### Example\n\n```typescript\nreturn response.json({ \n  message: 'Success',\n  data: { id: 123, name: 'Example' }\n});\n```\n\n### Text Responses\n\n#### `text(data: string, metadata?: Record<string, Json>): AgentResponseType`\n\nCreates a text response.\n\n##### Parameters\n\n- `data`: The text to include in the response\n- `metadata` (optional): Additional metadata to include with the response\n\n##### Return Value\n\nReturns an `AgentResponseType` object with the text data.\n\n##### Example\n\n```typescript\nreturn response.text('Hello, world!');\n```\n\n### Binary Responses\n\n#### `binary(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n\nCreates a binary response.\n\n##### Parameters\n\n- `data`: The binary data to include in the response\n- `metadata` (optional): Additional metadata to include with the response\n\n##### Return Value\n\nReturns an `AgentResponseType` object with the binary data.\n\n##### Example\n\n```typescript\nconst binaryData = new Uint8Array([1, 2, 3, 4]).buffer;\nreturn response.binary(binaryData, { filename: 'data.bin' });\n```\n\n### Media Type Responses\n\nThe SDK provides specialized methods for various media types:\n\n- `pdf(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `png(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `jpeg(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `gif(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `webp(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `mp3(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `mp4(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `m4a(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `m4p(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `webm(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `wav(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `ogg(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`\n- `data(data: Json | ArrayBuffer | string, contentType: string, metadata?: Record<string, Json>): AgentResponseType`\n- `markdown(content: string, metadata?: Record<string, Json>): AgentResponseType`\n\nEach method works similarly to the `binary()` method but sets the appropriate content type. The `data` method allows setting specific data with an exact content type, while the `markdown` method provides a convenient way to return markdown content.\n\n#### Example\n\n```typescript\n// Return a PNG image\nreturn response.png(imageData, { filename: 'chart.png' });\n\n// Return an MP3 audio file\nreturn response.mp3(audioData, { duration: 120 });\n```\n\n### HTML Responses\n\n#### `html(data: string, metadata?: Record<string, Json>): AgentResponseType`\n\nCreates an HTML response.\n\n##### Parameters\n\n- `data`: The HTML content to include in the response\n- `metadata` (optional): Additional metadata to include with the response\n\n##### Return Value\n\nReturns an `AgentResponseType` object with the HTML content.\n\n##### Example\n\n```typescript\nreturn response.html('<h1>Hello, world!</h1><p>This is an HTML response.</p>');\n```\n\n### Empty Responses\n\n#### `empty(metadata?: Record<string, Json>): AgentResponseType`\n\nCreates an empty response.\n\n##### Parameters\n\n- `metadata` (optional): Additional metadata to include with the response\n\n##### Return Value\n\nReturns an `AgentResponseType` object with no payload.\n\n##### Example\n\n```typescript\nreturn response.empty({ status: 204 });\n```\n\n## Request Handling\n\nThe Agentuity SDK provides various methods for accessing request data through the `request` object.\n\n### Accessing Request Data\n\n#### `get trigger(): string`\n\nGets the trigger type of the request.\n\n##### Return Value\n\nReturns a string representing the trigger type (webhook, cron, manual, agent, etc.).\n\n##### Example\n\n```typescript\nconst triggerType = request.trigger;\nconsole.log(`Request triggered by: ${triggerType}`);\n```\n\n#### `get(key: string, defaultValue?: Json): Json`\n\nGets a value from the request. The available properties depend on the trigger type.\n\n##### Parameters\n\n- `key`: The key to retrieve\n- `defaultValue` (optional): A default value to return if the key does not exist\n\n##### Return Value\n\nReturns the value for the specified key, or the default value if the key does not exist.\n\n##### Trigger-specific Properties\n\nDifferent trigger types provide different properties:\n\n- **Webhook**: Includes a `headers` property containing the HTTP headers from the webhook request.\n\n##### Example\n\n```typescript\n// For webhook triggers, access headers\nconst headers = request.get('headers');\n// Access a specific header\nconst githubSignature = headers['x-hub-signature'];\n\n// Get a user ID with a default value\nconst userId = request.get('userId', 'anonymous');\n```\n\n#### `metadata(key: string, defaultValue?: Json): Json`\n\n**Note:** This method is deprecated. Use `get(key, defaultValue)` instead.\n\nGets metadata associated with the request.\n\n##### Parameters\n\n- `key`: The metadata key to retrieve\n- `defaultValue` (optional): A default value to return if the key does not exist\n\n##### Return Value\n\nReturns the metadata value for the specified key, or the default value if the key does not exist.\n\n\n#### `json(): Promise<Json>`\n\nGets the payload of the request as a JSON object.\n\n##### Return Value\n\nReturns a Promise that resolves to the request payload as a JSON object.\n\n##### Example\n\n```typescript\nconst data = await request.data.json();\nconsole.log(`Request data: ${JSON.stringify(data)}`);\n```\n\n#### `text(): Promise<string>`\n\nGets the payload of the request as a string.\n\n##### Return Value\n\nReturns a Promise that resolves to the request payload as a string.\n\n##### Example\n\n```typescript\nconst text = await request.data.text();\nconsole.log(`Request text: ${text}`);\n```\n\n#### `binary(): Promise<ArrayBuffer>`\n\nGets the payload of the request as an ArrayBuffer.\n\n##### Return Value\n\nReturns a Promise that resolves to the request payload as an ArrayBuffer.\n\n##### Example\n\n```typescript\nconst binaryData = await request.data.binary();\nconsole.log(`Binary data size: ${binaryData.byteLength} bytes`);\n```\n\n### Media-Specific Methods\n\nThe SDK provides specialized methods for various media types, all of which now return Promises:\n\n- `pdf(): Promise<ArrayBuffer>`\n- `png(): Promise<ArrayBuffer>`\n- `jpeg(): Promise<ArrayBuffer>`\n- `gif(): Promise<ArrayBuffer>`\n- `webp(): Promise<ArrayBuffer>`\n- `mp3(): Promise<ArrayBuffer>`\n- `mp4(): Promise<ArrayBuffer>`\n- `m4a(): Promise<ArrayBuffer>`\n- `m4p(): Promise<ArrayBuffer>`\n- `webm(): Promise<ArrayBuffer>`\n- `wav(): Promise<ArrayBuffer>`\n- `ogg(): Promise<ArrayBuffer>`\n- `email(): Promise<Email>`\n\nEach method returns a Promise that resolves to the request payload as an ArrayBuffer with the appropriate content type validation, except for `email()` which returns an Email object.\n\n#### Example\n\n```typescript\n// Get an image from the request\nconst image = await request.png();\n// Process the image...\n\n// Get audio from the request\nconst audio = await request.mp3();\n// Process the audio...\n\n// Get email from the request (for message/rfc822 content type)\nconst email = await request.data.email();\n// Process the email...\n```\n\n## Email Processing\n\nThe Agentuity SDK provides an `Email` class for parsing and processing inbound email data when the content type is `message/rfc822`.\n\n### Email Class\n\nThe `Email` class represents a parsed email message with methods to access various email properties.\n\n#### `date(): Date | null`\n\nReturns the date of the email.\n\n##### Return Value\n\nReturns a `Date` object representing the email's date, or `null` if no date is available.\n\n##### Example\n\n```typescript\nconst email = await request.data.email();\nconst emailDate = email.date();\nconsole.log('Email received on:', emailDate);\n```\n\n#### `messageId(): string | null`\n\nReturns the message ID of the email.\n\n##### Return Value\n\nReturns a string containing the email's message ID, or `null` if no message ID is available.\n\n##### Example\n\n```typescript\nconst email = await request.data.email();\nconst msgId = email.messageId();\nconsole.log('Message ID:', msgId);\n```\n\n#### `headers(): Headers`\n\nReturns the headers of the email.\n\n##### Return Value\n\nReturns a `Headers` object containing all email headers.\n\n##### Example\n\n```typescript\nconst email = await request.data.email();\nconst headers = email.headers();\nconsole.log('Email headers:', headers);\n```\n\n#### `to(): string | null`\n\nReturns the email address of the recipient(s).\n\n##### Return Value\n\nReturns a string containing the recipient email address. If there are multiple recipients, they are comma-separated. Returns `null` if no recipient is available.\n\n##### Example\n\n```typescript\nconst email = await request.data.email();\nconst recipients = email.to();\nconsole.log('Recipients:', recipients);\n```\n\n#### `fromEmail(): string | null`\n\nReturns the email address of the sender.\n\n##### Return Value\n\nReturns a string containing the sender's email address, or `null` if no sender email is available.\n\n##### Example\n\n```typescript\nconst email = await request.data.email();\nconst senderEmail = email.fromEmail();\nconsole.log('From email:', senderEmail);\n```\n\n#### `fromName(): string | null`\n\nReturns the name of the sender.\n\n##### Return Value\n\nReturns a string containing the sender's name, or `null` if no sender name is available.\n\n##### Example\n\n```typescript\nconst email = await request.data.email();\nconst senderName = email.fromName();\nconsole.log('From name:', senderName);\n```\n\n#### `subject(): string | null`\n\nReturns the subject of the email.\n\n##### Return Value\n\nReturns a string containing the email subject, or `null` if no subject is available.\n\n##### Example\n\n```typescript\nconst email = await request.data.email();\nconst subject = email.subject();\nconsole.log('Subject:', subject);\n```\n\n#### `text(): string | null`\n\nReturns the plain text body of the email.\n\n##### Return Value\n\nReturns a string containing the plain text body, or `null` if no plain text body is available.\n\n##### Example\n\n```typescript\nconst email = await request.data.email();\nconst textBody = email.text();\nconsole.log('Text content:', textBody);\n```\n\n#### `html(): string | null`\n\nReturns the HTML body of the email.\n\n##### Return Value\n\nReturns a string containing the HTML body, or `null` if no HTML body is available.\n\n##### Example\n\n```typescript\nconst email = await request.data.email();\nconst htmlBody = email.html();\nconsole.log('HTML content:', htmlBody);\n```\n\n#### `attachments(): Attachment[]`\n\nReturns the attachments of the email.\n\n##### Return Value\n\nReturns an array of `Attachment` objects. Returns an empty array if there are no attachments.\n\n##### Example\n\n```typescript\nconst email = await request.data.email();\nconst attachments = email.attachments();\nconsole.log('Attachments:', attachments.length);\nattachments.forEach(attachment => {\n  console.log('Attachment:', attachment.filename, attachment.contentType);\n});\n```\n\n## Logging\n\nThe Agentuity SDK provides logging functionality through the `context.logger` object.\n\n### Logger Interface\n\nThe `Logger` interface defines the following methods:\n\n```typescript\ninterface Logger {\n  debug(message: string, ...args: unknown[]): void;\n  info(message: string, ...args: unknown[]): void;\n  warn(message: string, ...args: unknown[]): void;\n  error(message: string, ...args: unknown[]): void;\n  child(opts: Record<string, Json>): Logger;\n}\n```\n\n### Logging Methods\n\n#### `debug(message: string, ...args: unknown[]): void`\n\nLogs a debug message.\n\n##### Parameters\n\n- `message`: The message to log\n- `args`: Additional arguments to include in the log\n\n##### Example\n\n```typescript\ncontext.logger.debug('Processing request', { requestId: '123' });\n```\n\n#### `info(message: string, ...args: unknown[]): void`\n\nLogs an informational message.\n\n##### Parameters\n\n- `message`: The message to log\n- `args`: Additional arguments to include in the log\n\n##### Example\n\n```typescript\ncontext.logger.info('Request processed successfully', { requestId: '123' });\n```\n\n#### `warn(message: string, ...args: unknown[]): void`\n\nLogs a warning message.\n\n##### Parameters\n\n- `message`: The message to log\n- `args`: Additional arguments to include in the log\n\n##### Example\n\n```typescript\ncontext.logger.warn('Resource not found', { resourceId: '456' });\n```\n\n#### `error(message: string, ...args: unknown[]): void`\n\nLogs an error message.\n\n##### Parameters\n\n- `message`: The message to log\n- `args`: Additional arguments to include in the log\n\n##### Example\n\n```typescript\ncontext.logger.error('Failed to process request', error);\n```\n\n### Creating Child Loggers\n\n#### `child(opts: Record<string, unknown>): Logger`\n\nCreates a child logger with additional context.\n\n##### Parameters\n\n- `opts`: Additional context to include in all logs from the child logger\n\n##### Return Value\n\nReturns a new `Logger` instance with the additional context.\n\n##### Example\n\n```typescript\nconst requestLogger = context.logger.child({ requestId: '123', userId: '456' });\nrequestLogger.info('Processing request'); // Includes requestId and userId\n```\n\n## Welcome Function\n\nThe Agentuity SDK allows you to customize the initial appearance of DevMode when it starts interacting with your agents by exporting a `welcome()` function. This function returns an `AgentWelcomeResult` object that includes a welcome message and optional example prompts.\n\n### AgentWelcomeResult Interface\n\n```typescript\nexport interface AgentWelcomePrompt {\n  /**\n   * The data to display to the user\n   */\n  data: Buffer | Uint8Array | ArrayBuffer | string | Json | Blob | ReadableStream | Data;\n  /**\n   * The content type of the data\n   */\n  contentType: string;\n}\n\nexport interface AgentWelcomeResult {\n  /**\n   * The welcome prompt to display to the user\n   */\n  welcome: string;\n  /**\n   * The example prompts to display to the user\n   */\n  prompts?: AgentWelcomePrompt[];\n}\n```\n\n### welcome()\n\nDefines a welcome message and optional example prompts for DevMode.\n\n#### Return Value\n\nReturns an `AgentWelcomeResult` object with a welcome message and optional prompts.\n\n#### Example\n\n```typescript\nexport const welcome = (): AgentWelcomeResult => {\n  return {\n    welcome: \"Welcome to my Agent! How can I help you today?\",\n    prompts: [\n      {\n        data: \"What can you do?\",\n        contentType: \"text/plain\",\n      }\n    ],\n  };\n};\n```\n\n\n\n## Session\n\nThe Agentuity SDK provides a `Session` interface that represents the current agent execution context.\n\n```typescript\ninterface Session {\n  request: AgentRequestType;\n  context: AgentContext;\n}\n```\n\n## Telemetry\n\nThe Agentuity SDK integrates with OpenTelemetry for tracing and metrics.\n\n### Tracing\n\nThe SDK provides access to OpenTelemetry tracing through the `context.tracer` object.\n\n#### Example\n\n```typescript\n// Create a span\ncontext.tracer.startActiveSpan('process-data', async (span) => {\n  try {\n    // Add attributes to the span\n    span.setAttribute('userId', '123');\n    \n    // Perform some work\n    const result = await processData();\n    \n    // Add events to the span\n    span.addEvent('data-processed', { itemCount: result.length });\n    \n    // End the span\n    span.end();\n    \n    return result;\n  } catch (error) {\n    // Record the error\n    span.recordException(error);\n    span.setStatus({ code: SpanStatusCode.ERROR });\n    throw error;\n  }\n});\n```\n\n## Breaking Changes\n\n### Data API\n\nIn version X.X.X, the Data API was refactored to use async methods instead of static properties to better support streaming capabilities:\n\n#### Before:\n```typescript\n// Accessing data properties directly\nconst jsonData = request.data.json;\nconst textData = request.data.text;\nconst base64Data = request.data.base64;\n```\n\n#### After:\n```typescript\n// Using async methods to access data\nconst jsonData = await request.data.json();\nconst textData = await request.data.text();\nconst base64Data = await request.data.base64();\n```\n\nThis change affects all methods on the `Data` interface:\n- `data.base64` → `data.base64()`\n- `data.text` → `data.text()`\n- `data.json` → `data.json()`\n- `data.object<T>()` → `data.object<T>()`\n- `data.binary` → `data.binary()`\n- `data.buffer` → `data.buffer()`\n- `data.stream` → `data.stream()`\n\n\n## Deprecated Features\n\n### `/run/:id` Route\n\nThe `/run/:id` route is now deprecated as it provides the same functionality as `/:id`. Applications should update their code to use the `/:id` route instead.\n\n"
    },
    {
      "file": "SDKs/javascript/core-concepts.mdx",
      "meta": {
        "title": "Core Concepts",
        "description": "Learn about the fundamental concepts of the Agentuity JavaScript SDK"
      },
      "content": "\nThe Agentuity JavaScript SDK is built around several key concepts that form the foundation of agent development. Understanding these concepts is essential for effectively using the SDK.\n\n## Agent Architecture\n\nAgents in the Agentuity SDK are modular components that can process requests and generate responses. Each agent:\n\n- Has a unique identifier and name\n- Can be triggered by various events (webhooks, cron jobs, manual invocation, etc.)\n- Processes requests through a handler function\n- Has access to a context object with various capabilities\n\nThe basic structure of an agent looks like this:\n\n```typescript\nimport { AgentHandler } from '@agentuity/sdk';\n\n// Agent handler function\nconst handler: AgentHandler = async (request, response, context) => {\n  // Process the request\n  const data = await request.data.json();\n  \n  // Use the context (logging, storage, etc.)\n  context.logger.info('Processing request', data);\n  \n  // Return a response\n  return response.json({ message: 'Hello from my agent!' });\n};\n\nexport default handler;\n```\n\n<Callout type=\"warn\" title=\"Configuration\">\n  Agent configuration (name, description, etc.) is managed by the Agentuity CLI and stored in the project configuration file.\n  Use the `agentuity project` and `agentuity agent` commands to manage your configuration.\n</Callout>\n\n\n## Request and Response Handling\n\nThe Agentuity SDK provides a structured way to handle requests and generate responses:\n\n### Requests\n\nRequests contain information about the trigger event and payload data. The `AgentRequest` interface provides methods to access this data in various formats:\n\n- `request.metadata` - Access metadata associated with the request\n- `request.trigger` - Get the trigger type (webhook, manual,cron, etc.)\n- `request.get(key, defval)` - Get a value from the request metadata\n- `request.data` - Get a Data object from the request\n- `request.data.contentType` - The content type (or mime type) of the request\n- `request.data.json()` - Get the payload as a JSON object (async, requires await)\n- `request.data.object<T>()` - Get the payload as a JSON object and parse it as a specific type (async, requires await)\n- `request.data.text()` - Get the payload as a string (async, requires await)\n- `request.data.binary()` - Get the payload as an ArrayBuffer (async, requires await)\n\n\n### Responses\n\nResponses are created using the `AgentResponse` interface, which provides methods for different response types:\n\n- `response.json()` - Return a JSON response\n- `response.text()` - Return a text response\n- `response.binary()` - Return a binary response\n- `response.html()` - Return an HTML response\n- `response.empty()` - Return an empty response\n- Various media-specific methods (pdf(), png(), jpeg(), etc.)\n- `response.handoff()` - Redirect to another agent\n\n## Agent Context\n\nThe context object provides access to various capabilities and services:\n\n- `context.logger` - Logging functionality\n- `context.kv` - Key-value storage\n- `context.vector` - Vector storage\n- `context.getAgent()` - Access to other agents both locally and remotely\n- `context.tracer` - OpenTelemetry tracing\n- `context.scope` - The scope of the agent invocation ('local' or 'remote')\n- Metadata about the current execution (runId, projectId, etc.)\n\n## Triggers and Event Types\n\nAgents can be triggered by various event types:\n\n- `webhook` - HTTP webhook calls\n- `cron` - Scheduled cron jobs\n- `manual` - Manual invocation\n- `agent` - Calls from other agents\n- `sms` - SMS messages\n- `queue` - Queue processing\n- `voice` - Voice calls\n- `email` - Email messages\n\nEach trigger type may provide different metadata and payload formats, which can be accessed through the request object.\n"
    },
    {
      "file": "SDKs/javascript/error-handling.mdx",
      "meta": {
        "title": "Error Handling",
        "description": "Learn how to handle errors in the Agentuity JavaScript SDK"
      },
      "content": "\nThis section covers error handling strategies and common error types in the Agentuity JavaScript SDK.\n\n## Error Handling Patterns\n\n### Try-Catch Pattern\n\nThe most common error handling pattern is to use try-catch blocks in your agent handlers:\n\n```typescript\nconst handler: AgentHandler = async (request, response, context) => {\n  try {\n    // Process the request\n    const data = request.data.json;\n    \n    // Perform operations that might fail\n    const result = await processData(data);\n    \n    // Return successful response\n    return response.json({ result });\n  } catch (error) {\n    // Log the error\n    context.logger.error('Error processing request', error);\n    \n    // Return error response\n    return response.json({ \n      error: 'Failed to process request',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};\n```\n\n### Error Classification\n\nFor more sophisticated error handling, you can classify errors and handle them differently:\n\n```typescript\nconst handler: AgentHandler = async (request, response, context) => {\n  try {\n    // Process the request\n    const data = request.data.json;\n    \n    // Perform operations that might fail\n    const result = await processData(data);\n    \n    // Return successful response\n    return response.json({ result });\n  } catch (error) {\n    // Log the error\n    context.logger.error('Error processing request', error);\n    \n    // Classify and handle different error types\n    if (error instanceof ValidationError) {\n      return response.json({ \n        error: 'Validation error',\n        message: error.message\n      });\n    }\n    \n    if (error instanceof ResourceNotFoundError) {\n      return response.json({ \n        error: 'Resource not found',\n        message: error.message\n      });\n    }\n    \n    // Handle unexpected errors\n    return response.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    });\n  }\n};\n```\n\n### Custom Error Classes\n\nYou can define custom error classes to make error handling more structured:\n\n```typescript\n// Custom error classes\nclass ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nclass ResourceNotFoundError extends Error {\n  constructor(resourceId: string) {\n    super(`Resource not found: ${resourceId}`);\n    this.name = 'ResourceNotFoundError';\n  }\n}\n\nclass AuthorizationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AuthorizationError';\n  }\n}\n```\n\n### Error Handling with OpenTelemetry\n\nYou can use OpenTelemetry to record exceptions and set span status:\n\n```typescript\nconst handler: AgentHandler = async (request, response, context) => {\n  return context.tracer.startActiveSpan('process-request', async (span) => {\n    try {\n      // Process the request\n      const data = request.data.json;\n      \n      // Perform operations that might fail\n      const result = await processData(data);\n      \n      // Set span status to OK\n      span.setStatus({ code: SpanStatusCode.OK });\n      \n      // Return successful response\n      return response.json({ result });\n    } catch (error) {\n      // Record exception in the span\n      span.recordException(error as Error);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: (error as Error).message\n      });\n      \n      // Log the error\n      context.logger.error('Error processing request', error);\n      \n      // Return error response\n      return response.json({ \n        error: 'Failed to process request',\n        message: (error as Error).message\n      });\n    } finally {\n      // End the span\n      span.end();\n    }\n  });\n};\n```\n\n## Error Handling for Storage APIs\n\n### Key-Value Storage Errors\n\nWhen working with the key-value storage API, handle potential errors:\n\n```typescript\ntry {\n  // Attempt to get a value\n  const value = await context.kv.get('user-preferences', userId);\n  \n  // Process the value\n  if (value) {\n    const preferences = JSON.parse(new TextDecoder().decode(value));\n    // Use preferences...\n  }\n} catch (error) {\n  // Handle key-value storage errors\n  context.logger.error('Error accessing key-value storage', error);\n  // Implement fallback behavior or return error response\n}\n```\n\n### Vector Storage Errors\n\nWhen working with the vector storage API, handle potential errors:\n\n```typescript\ntry {\n  // Attempt to search for vectors\n  const results = await context.vector.search('products', {\n    query: 'ergonomic chair',\n    limit: 5\n  });\n  \n  // Process the results\n  // ...\n} catch (error) {\n  // Handle vector storage errors\n  context.logger.error('Error searching vector storage', error);\n  // Implement fallback behavior or return error response\n}\n```\n\n## Debugging Techniques\n\n### Logging\n\nUse the logger to help debug issues:\n\n```typescript\n// Set up detailed logging\ncontext.logger.debug('Request received', { \n  trigger: request.trigger,\n  payload: request.data.json\n});\n\ntry {\n  // Operation that might fail\n  const result = await someOperation();\n  context.logger.debug('Operation result', result);\n} catch (error) {\n  context.logger.error('Operation failed', { \n    error: error.message,\n    stack: error.stack\n  });\n}\n```\n\n### Tracing\n\nUse OpenTelemetry tracing to debug complex issues:\n\n```typescript\ncontext.tracer.startActiveSpan('operation-name', async (span) => {\n  // Add attributes to help with debugging\n  span.setAttribute('input.size', inputData.length);\n  span.setAttribute('operation.type', 'processing');\n  \n  // Add events to mark important points\n  span.addEvent('processing-started', { timestamp: Date.now() });\n  \n  try {\n    // Operation that might fail\n    const result = await someOperation();\n    \n    // Add event for successful completion\n    span.addEvent('processing-completed', { \n      timestamp: Date.now(),\n      resultSize: result.length\n    });\n    \n    return result;\n  } catch (error) {\n    // Record the exception\n    span.recordException(error);\n    throw error;\n  } finally {\n    // Always end the span\n    span.end();\n  }\n});\n```\n"
    },
    {
      "file": "SDKs/javascript/examples/index.mdx",
      "meta": {
        "title": "Examples",
        "description": "Practical examples of using the Agentuity JavaScript SDK"
      },
      "content": "\nThis section provides practical examples of using the Agentuity JavaScript SDK for common use cases.\n\n## Basic Agent Implementation\n\nHere's a complete example of a basic agent that processes JSON requests and returns JSON responses:\n\n```typescript\nimport { AgentHandler } from '@agentuity/sdk';\n\n// Agent handler function\nconst handler: AgentHandler = async (request, response, context) => {\n  try {\n    // Get the request data\n    const data = await request.data.json();\n    const name = data.name || 'Guest';\n    \n    // Log the request\n    context.logger.info(`Received greeting request for ${name}`);\n    \n    // Return a personalized greeting\n    return response.json({\n      message: `Hello, ${name}! Welcome to Agentuity.`,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    // Handle errors\n    context.logger.error('Error processing request', error);\n    return response.json({ \n      error: 'Failed to process request',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};\n\nexport default handler;\n```\n\n## Key-Value Storage Usage\n\nThis example demonstrates how to use the key-value storage API to store and retrieve user preferences:\n\n```typescript\nimport { AgentHandler } from '@agentuity/sdk';\n\nconst handler: AgentHandler = async (request, response, context) => {\n  const { action, userId, preferences } = await request.data.json();\n  \n  switch (action) {\n    case 'get': {\n      // Retrieve user preferences\n      const data = await context.kv.get('user-preferences', userId);\n      \n      if (!data) {\n        return response.json({ message: 'No preferences found' });\n      }\n      \n      // Convert ArrayBuffer to string and parse as JSON\n      const prefsString = new TextDecoder().decode(data);\n      const userPrefs = JSON.parse(prefsString);\n      \n      return response.json({ preferences: userPrefs });\n    }\n    \n    case 'set': {\n      // Store user preferences\n      await context.kv.set(\n        'user-preferences', \n        userId, \n        JSON.stringify(preferences),\n        // Optional TTL (30 days in seconds)\n        60 * 60 * 24 * 30\n      );\n      \n      return response.json({ message: 'Preferences saved successfully' });\n    }\n    \n    case 'delete': {\n      // Delete user preferences\n      await context.kv.delete('user-preferences', userId);\n      return response.json({ message: 'Preferences deleted successfully' });\n    }\n    \n    default:\n      return response.json({ error: 'Invalid action' });\n  }\n};\n\nexport default handler;\n```\n\n## Vector Storage Usage\n\nThis example demonstrates how to use the vector storage API for semantic search:\n\n```typescript\nimport { AgentHandler } from '@agentuity/sdk';\n\nconst handler: AgentHandler = async (request, response, context) => {\n  const { action, query, products } = await request.data.json();\n  \n  switch (action) {\n    case 'index': {\n      // Index products in vector storage\n      if (!Array.isArray(products) || products.length === 0) {\n        return response.json({ error: 'No products to index' });\n      }\n      \n      // Prepare documents for vector storage\n      const documents = products.map(product => ({\n        document: product.description,\n        metadata: {\n          id: product.id,\n          name: product.name,\n          price: product.price,\n          category: product.category\n        }\n      }));\n      \n      // Store in vector database\n      const ids = await context.vector.upsert('products', ...documents);\n      \n      return response.json({ \n        message: `Indexed ${ids.length} products successfully`,\n        ids\n      });\n    }\n    \n    case 'search': {\n      // Search for products\n      if (!query) {\n        return response.json({ error: 'Query is required' });\n      }\n      \n      // Search vector storage\n      const results = await context.vector.search('products', {\n        query,\n        limit: 5,\n        similarity: 0.7\n      });\n      \n      // Format results\n      const formattedResults = results.map(result => ({\n        ...result.metadata,\n        similarity: 1 - result.distance // Convert distance to similarity score\n      }));\n      \n      return response.json({ \n        results: formattedResults,\n        count: formattedResults.length\n      });\n    }\n    \n    case 'delete': {\n      // Delete products from vector storage\n      if (!Array.isArray(products) || products.length === 0) {\n        return response.json({ error: 'No product IDs to delete' });\n      }\n      \n      const count = await context.vector.delete('products', ...products);\n      \n      return response.json({ \n        message: `Deleted ${count} products successfully` \n      });\n    }\n    \n    default:\n      return response.json({ error: 'Invalid action' });\n  }\n};\n\nexport default handler;\n```\n\n## Agent Communication Example\n\nThis example demonstrates how agents can communicate with each other:\n\n```typescript\nimport { AgentHandler } from '@agentuity/sdk';\n\nconst handler: AgentHandler = async (request, response, context) => {\n  const { task, data } = await request.data.json();\n  \n  // Log the incoming request\n  context.logger.info(`Received task: ${task}`);\n  \n  switch (task) {\n    case 'process-data': {\n      // Get a reference to the data processing agent\n      const processingAgent = await context.getAgent({ \n        name: 'data-processor'\n      });\n      \n      // Invoke the data processing agent\n      const processingResult = await processingAgent.run(\n        { data },\n        'application/json'\n      );\n      \n      // Get a reference to the notification agent\n      const notificationAgent = await context.getAgent({\n        name: 'notification-sender'\n      });\n      \n      // Invoke the notification agent with the processing result\n      await notificationAgent.run(\n        { \n          message: 'Data processing completed',\n          result: processingResult\n        },\n        'application/json'\n      );\n      \n      return response.json({ \n        message: 'Task orchestrated successfully',\n        processingResult\n      });\n    }\n    \n    case 'handoff': {\n      // Handoff to another agent\n      return response.handoff(\n        { name: 'data-processor' },\n        { data },\n        'application/json',\n        { source: 'orchestrator' }\n      );\n    }\n    \n    default:\n      return response.json({ error: 'Unknown task' });\n  }\n};\n\nexport default handler;\n```\n\n## Error Handling Example\n\nThis example demonstrates comprehensive error handling in an agent:\n\n```typescript\nimport { AgentHandler } from '@agentuity/sdk';\n\n// Custom error classes\nclass ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nclass ResourceNotFoundError extends Error {\n  constructor(resourceId: string) {\n    super(`Resource not found: ${resourceId}`);\n    this.name = 'ResourceNotFoundError';\n  }\n}\n\nconst handler: AgentHandler = async (request, response, context) => {\n  try {\n    // Get the request data\n    const data = await request.data.json();\n    \n    // Validate the request\n    if (!data.resourceId) {\n      throw new ValidationError('resourceId is required');\n    }\n    \n    // Log the request\n    context.logger.info(`Processing resource: ${data.resourceId}`);\n    \n    // Simulate resource lookup\n    const resource = await lookupResource(data.resourceId, context);\n    \n    // Process the resource\n    const result = await processResource(resource, context);\n    \n    // Return the result\n    return response.json({ \n      message: 'Resource processed successfully',\n      result\n    });\n  } catch (error) {\n    // Handle different types of errors\n    if (error instanceof ValidationError) {\n      context.logger.warn(`Validation error: ${error.message}`);\n      return response.json({ \n        error: 'Validation error',\n        message: error.message\n      });\n    }\n    \n    if (error instanceof ResourceNotFoundError) {\n      context.logger.warn(`Resource not found: ${error.message}`);\n      return response.json({ \n        error: 'Resource not found',\n        message: error.message\n      });\n    }\n    \n    // Handle unexpected errors\n    context.logger.error('Unexpected error', error);\n    return response.json({ \n      error: 'Internal server error',\n      message: 'An unexpected error occurred'\n    });\n  }\n};\n\n// Helper functions\nasync function lookupResource(resourceId: string, context: any) {\n  // Simulate resource lookup\n  const resource = await context.kv.get('resources', resourceId);\n  \n  if (!resource) {\n    throw new ResourceNotFoundError(resourceId);\n  }\n  \n  return JSON.parse(new TextDecoder().decode(resource));\n}\n\nasync function processResource(resource: any, context: any) {\n  // Simulate resource processing\n  context.logger.debug('Processing resource', resource);\n  \n  // Add processing logic here\n  \n  return {\n    id: resource.id,\n    status: 'processed',\n    timestamp: new Date().toISOString()\n  };\n}\n\nexport default handler;\n```\n\n## Telemetry Example\n\nThis example demonstrates how to use OpenTelemetry for tracing and metrics:\n\n```typescript\nimport { AgentHandler } from '@agentuity/sdk';\nimport { SpanStatusCode } from '@opentelemetry/api';\n\nconst handler: AgentHandler = async (request, response, context) => {\n  return context.tracer.startActiveSpan('process-request', async (span) => {\n    try {\n      // Add attributes to the span\n      span.setAttribute('trigger', request.trigger());\n      \n      // Get the request data\n      const data = await request.data.json();\n      span.setAttribute('data.type', typeof data);\n      \n      // Create a child span for data processing\n      return await context.tracer.startActiveSpan('process-data', async (childSpan) => {\n        try {\n          // Add event to the span\n          childSpan.addEvent('processing-started', {\n            timestamp: Date.now()\n          });\n          \n          // Simulate data processing\n          const result = await processData(data, context);\n          \n          // Add event to the span\n          childSpan.addEvent('processing-completed', {\n            timestamp: Date.now(),\n            resultSize: JSON.stringify(result).length\n          });\n          \n          // Set span status\n          childSpan.setStatus({ code: SpanStatusCode.OK });\n          \n          return response.json(result);\n        } catch (error) {\n          // Record exception in the span\n          childSpan.recordException(error as Error);\n          childSpan.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: (error as Error).message\n          });\n          \n          throw error;\n        } finally {\n          // End the child span\n          childSpan.end();\n        }\n      });\n    } catch (error) {\n      // Record exception in the parent span\n      span.recordException(error as Error);\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: (error as Error).message\n      });\n      \n      // Log the error\n      context.logger.error('Error processing request', error);\n      \n      // Return error response\n      return response.json({\n        error: 'Failed to process request',\n        message: (error as Error).message\n      });\n    } finally {\n      // End the parent span\n      span.end();\n    }\n  });\n};\n\nasync function processData(data: any, context: any) {\n  // Simulate data processing\n  await new Promise(resolve => setTimeout(resolve, 100));\n  \n  return {\n    processed: true,\n    input: data,\n    timestamp: new Date().toISOString()\n  };\n}\n\nexport default handler;\n```\n\n## Welcome Function Example\n\nThis example demonstrates how to customize the initial appearance of DevMode when it starts interacting with your agents:\n\n```typescript\n// agent.ts\nimport type { AgentHandler, AgentWelcomeResult } from '@agentuity/sdk';\n\nexport const welcome = (): AgentWelcomeResult => {\n  return {\n    welcome: \"Welcome to my Agent! How can I help you today?\",\n    prompts: [\n      {\n        data: \"What can you do?\",\n        contentType: \"text/plain\",\n      },\n      {\n        data: \"Tell me about yourself\",\n        contentType: \"text/plain\",\n      }\n    ],\n  };\n};\n\nconst handler: AgentHandler = async (request, response, context) => {\n  // Agent logic\n  return response.text('Hello, World!');\n};\n\nexport default handler;\n```\n\n### Real-World Example\n\nHere's a more comprehensive example from the React Miami 2025 Concierge template:\n\n```typescript\n// ConciergeHost/index.ts\nimport type { AgentWelcomeResult } from \"@agentuity/sdk\";\n\nexport const welcome = (): AgentWelcomeResult => {\n  return {\n    welcome: \"Welcome to the React Miami 2025 Concierge! How can I help you today?\",\n    prompts: [\n      {\n        data: \"Where should I go for dinner in Miami, tonight?\",\n        contentType: \"text/plain\",\n      },\n      {\n        data: \"What sessions about React hooks are happening today?\",\n        contentType: \"text/plain\",\n      },\n      {\n        data: \"Tell me more about [Speaker Name]'s background\",\n        contentType: \"text/plain\",\n      },\n      {\n        data: \"I'm hungry and looking for Cuban food near the conference\",\n        contentType: \"text/plain\",\n      },\n      {\n        data: \"What is Agentuity all about?\",\n        contentType: \"text/plain\",\n      },\n      {\n        data: \"What can I do?\",\n        contentType: \"text/plain\",\n      },\n    ],\n  };\n};\n```\n\nNote that in this example, some prompts use plain text directly while others use base64 encoding. Both approaches work, but using base64 encoding is recommended for consistency.\n\n## OpenAI Streaming Example\n\nThis example demonstrates how to stream responses from OpenAI models in your Agentuity agent. Streaming allows for a more responsive user experience by displaying the AI's response as it's being generated, rather than waiting for the entire response to complete.\n\n```javascript\nimport type { AgentRequest, AgentResponse, AgentContext } from \"@agentuity/sdk\";\nimport { streamText } from \"ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\nexport default async function Agent(\n  req: AgentRequest,\n  resp: AgentResponse,\n  ctx: AgentContext,\n) {\n  const { textStream } = streamText({\n    model: openai(\"gpt-4o\"),\n    prompt: \"Invent a new holiday and describe its traditions.\",\n  });\n\n  return resp.stream(textStream);\n}\n```\n\n### How It Works\n\n1. We import the necessary types from `@agentuity/sdk` and utilities from the Vercel AI SDK (`ai` and `@ai-sdk/openai`).\n2. The `streamText` function from the Vercel AI SDK creates a streaming text response from OpenAI.\n3. We configure the stream with the `gpt-4o` model and a prompt.\n4. The `textStream` object contains the streaming response from OpenAI.\n5. We return the stream using `resp.stream()`, which handles the streaming response in the Agentuity platform.\n\n### Dependencies\n\nTo use this example, you'll need to install the following dependencies:\n\n```bash\nnpm install ai @ai-sdk/openai\n```\n\n## Agent-to-Agent Streaming Example\n\nThis example demonstrates how to call another agent and stream its response back to the client. This is useful for creating agent workflows where one agent processes a request and streams the response through another agent.\n\n```typescript\nimport type { AgentRequest, AgentResponse, AgentContext } from \"@agentuity/sdk\";\n\nexport default async function Agent(\n\treq: AgentRequest,\n\tresp: AgentResponse,\n\tctx: AgentContext,\n) {\n\t// Setup to talk to another agent\n\tconst agent = await ctx.getAgent({\n\t\tname: 'HistoryExpert',\n\t});\n\n\t// Invoke the agent\n\tconst agentResponse = await agent.run({\n\t\tdata: 'What engine did a P-51D Mustang use?',\n\t});\n\n\t// Get the stream from the agent\n\tconst stream = await agentResponse.data.stream();\n\n\t// Return the stream to the client\n\treturn resp.stream(stream);\n}\n```\n\n### How It Works\n\n1. We use `ctx.getAgent()` to get a reference to another agent named 'HistoryExpert'.\n2. We invoke the agent with `agent.run()`, passing the data we want to process.\n3. We retrieve the stream from the agent's response using `agentResponse.data.stream()`.\n4. Finally, we return the stream to the client using `resp.stream()`, which passes the streaming response through our agent.\n\nThis pattern allows you to:\n- Chain multiple agents together in a workflow\n- Maintain a streaming experience end-to-end\n- Process or transform streaming data between agents\n\n### Learn More About Streaming\n\nFor more information about agent streaming, check out these resources:\n\n- [Agents just want to have streams](https://agentuity.com/blog/agent-streaming) - Blog post explaining the importance and implementation of streaming in agents\n- [Streams for agents!](https://youtu.be/HN_ElBfsWtE) - YouTube video demonstration of agent streaming capabilities\n"
    },
    {
      "file": "SDKs/javascript/examples/langchain.mdx",
      "meta": {
        "title": "Langchain/LangGraph",
        "description": "Examples of using the Agentuity JavaScript SDK with Langchain (LangGraph)"
      },
      "content": "\n## Simple LangGraph Agent with structured output\n\nBelow is an example of how you can take a LangGraph example, empower it with Agentuity's SDK, \nand deploy it to Agentuity, all in one go.\n\n<div className=\"my-6 aspect-w-16 aspect-h-9\">\n  <iframe\n    width=\"100%\"\n    height=\"400\"\n    src=\"https://www.youtube.com/embed/lxoeD9VJJjs\"\n    title=\"LangGraph Agent with structured output\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  ></iframe>\n</div>\n\n```typescript\n// Example borrowed from https://langchain-ai.github.io/langgraphjs/how-tos/react-return-structured-output/\n\nimport type { AgentRequest, AgentResponse, AgentContext } from \"@agentuity/sdk\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { createReactAgent } from \"@langchain/langgraph/prebuilt\";\nimport { tool } from \"@langchain/core/tools\";\nimport { z } from \"zod\";\n\n// Tools for the agent\nconst weatherTool = tool(\n\tasync (input): Promise<string> => {\n\t\tif (input.city === \"nyc\") {\n\t\t\treturn \"It might be cloudy in nyc\";\n\t\t} else if (input.city === \"sf\") {\n\t\t\treturn \"It's always sunny in sf\";\n\t\t} else {\n\t\t\tthrow new Error(\"Unknown city\");\n\t\t}\n\t},\n\t{\n\t\tname: \"get_weather\",\n\t\tdescription: \"Use this to get weather information.\",\n\t\tschema: z.object({\n\t\t\tcity: z.enum([\"nyc\", \"sf\"]).describe(\"The city to get weather for\"),\n\t\t}),\n\t}\n);\n\nconst langGraphAgent = createReactAgent({\n\tllm: new ChatOpenAI({ model: \"gpt-4o\", temperature: 0 }),\n\ttools: [weatherTool],\n\tresponseFormat: z.object({\n\t\tconditions: z.string().describe(\"Weather conditions\"),\n\t}),\n});\n\nexport default async function AgentHandler(\n\treq: AgentRequest,\n\tresp: AgentResponse,\n\tctx: AgentContext,\n) {\n\tconst response = await langGraphAgent.invoke({\n\t\tmessages: [\n\t\t\t{\n\t\t\t\trole: \"user\",\n\t\t\t\tcontent: (await req.data.text()) ?? \"What's the weather in NYC?\",\n\t\t\t},\n\t\t],\n\t})\n\n\treturn resp.json(response.structuredResponse);\n}\t\n```\n"
    },
    {
      "file": "SDKs/javascript/frameworks.mdx",
      "meta": {
        "title": "Frameworks",
        "description": "Framework integration for the Agentuity JavaScript SDK"
      },
      "content": "\nThe Agentuity JavaScript SDK provides a flexible and powerful way to integrate other frameworks with your Agent.\n\nThe following frameworks are currently supported:\n\n- [Vercel AI SDK](https://www.vercel.com/ai)\n\n## Using Frameworks with Agentuity\n\nThe use a framework with Agentuity, choose the framework template when creating a new project.\n\n```bash\nagentuity new\n```\n\nWhen you select one of the framework templates, the Agentuity CLI will install the necessary dependencies and create a new project with the framework already configured.\n\n## Vercel AI SDK\n\nExample Agent using Vercel AI SDK:\n\n```typescript\nimport type { AgentRequest, AgentResponse, AgentContext } from \"@agentuity/sdk\";\nimport { generateText } from \"ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\nexport default async function Agent(\n\treq: AgentRequest,\n\tresp: AgentResponse,\n\tctx: AgentContext,\n) {\n\tconst res = await generateText({\n\t\tmodel: openai(\"gpt-4o\"),\n\t\tsystem: \"You are a friendly assistant!\",\n\t\tprompt: req.text() ?? \"Why is the sky blue?\",\n\t});\n\treturn resp.text(res.text);\n}\n```\n"
    },
    {
      "file": "SDKs/javascript/index.mdx",
      "meta": {
        "title": "JavaScript SDK",
        "description": "Documentation for the Agentuity JavaScript SDK"
      },
      "content": "\nThe [Agentuity JavaScript SDK](https://github.com/agentuity/sdk-js) provides a powerful framework for building AI agents in JavaScript and TypeScript. It offers a comprehensive set of tools for creating, deploying, and managing agents with features like key-value storage, vector storage, and OpenTelemetry integration.\n\n## Installation\n\nWhen you create a project with Agentuity, you will automatically have access to the Agentuity JavaScript SDK.\n\n```bash\nagentuity new\n```\n\nThe SDK currently works with Bun and Node.js and the project will automatically install the correct dependencies.\n\n## Prerequisites\n\nBefore using the Agentuity JavaScript SDK, ensure you have the following prerequisites installed:\n\n- **Node.js**: Version 22 or higher is required\n- **Bun** (optional): Version 1.2.4 or higher is required\n\n### Installing Node.js\n\nYou can download and install Node.js from the [official website](https://nodejs.org/). Make sure to install version 22 or higher.\n\n### Installing Bun\n\nBun is an optional but recommended runtime for the Agentuity SDK. You can install it using the following command:\n\n```bash\ncurl -fsSL https://bun.sh/install | bash\n```\n\nFor more information, visit the [Bun installation documentation](https://bun.sh/docs/installation).\n\n## Development\n\nYou can start your project by running the following command:\n\n```bash\nagentuity dev\n```\n\nThis will start your project in development mode and open a new browser window connecting your Agent to the Agentuity Console in Live Mode.\n\nYou can also start your project in development mode without connecting to the Agentuity Console by running the following command:\n\n```bash\nnpm start\n```\n\nOr for Bun:\n\n```bash\nbun start\n```\n\nIf you would like to manually test your Agents locally, you can do so by running the following command:\n\n```bash\ncurl -v http://localhost:3500/run/agent_ID --json '{\"input\": \"Hello, world!\"}'\n```\n\nMake sure you replace `agent_ID` with the ID of your Agent.\n\n\n## Next Steps\n\n- [Core Concepts](/SDKs/javascript/core-concepts) - Learn about the fundamental concepts of the Agentuity JavaScript SDK\n- [LLM](/SDKs/javascript/llm) - Learn about the LLM integrations available in the Agentuity JavaScript SDK\n- [Frameworks](/SDKs/javascript/frameworks) - Learn about using frameworks with the Agentuity JavaScript SDK\n- [API Reference](/SDKs/javascript/api-reference) - Explore the detailed API documentation\n- [Error Handling](/SDKs/javascript/error-handling) - Learn about the error handling in the Agentuity JavaScript SDK\n- [Examples](/SDKs/javascript/examples) - See practical examples of using the SDK\n"
    },
    {
      "file": "SDKs/javascript/llm.mdx",
      "meta": {
        "title": "LLM",
        "description": "LLM integration for the Agentuity JavaScript SDK"
      },
      "content": "\nThe Agentuity JavaScript SDK provides a flexible and powerful way to integrate with LLMs.\n\n## AI Gateway\n\nThe Agentuity Cloud includes an AI Gateway to make it easy to integrate LLMs with your Agent with zero configuration. The following LLM integrations are supported:\n\n- [OpenAI](https://openai.com/)\n- [Anthropic](https://www.anthropic.com/)\n- [Cohere](https://cohere.com/)\n- [DeepSeek](https://www.deepseek.com/)\n- [Google AI Studio](https://ai.google.dev/)\n- [Grok](https://grok.x.ai/)\n- [Groq](https://groq.com/)\n- [Mistral](https://mistral.ai/)\n- [Perplexity AI](https://www.perplexity.ai/)\n\n## SDK Integrations\n\nTo use the zero config LLM integrations, you can use the following SDK integrations:\n\n- [OpenAI JavaScript SDK](https://github.com/openai/openai-node)\n- [Anthropic JavaScript SDK](https://github.com/anthropics/anthropic-sdk-node)\n- [Vercel AI SDK](https://github.com/vercel/ai)\n\nWhen any of the above SDKs are installed, the Agentuity Project will automatically detect it and route your requests to the AI Gateway.  However, we will only route requests if you do not provide your own LLM API Key.  By providing your own LLM API Key, the AI Gateway detection will be disabled and you will need to manually configure the LLM integration in the Agentuity Console.\n\n"
    },
    {
      "file": "SDKs/javascript/troubleshooting.mdx",
      "meta": {
        "title": "Troubleshooting",
        "description": "Common issues and solutions when working with the Agentuity JavaScript SDK"
      },
      "content": "\nThis section covers common issues you might encounter when working with the Agentuity JavaScript SDK and provides solutions to help you resolve them.\n\n### Node.js Version Issues\n\n**Issue**: Errors related to unsupported JavaScript features or syntax.\n\n**Solution**:\n1. Verify your Node.js version meets the minimum requirement (v22+):\n   ```bash\n   node --version\n   ```\n2. If you're using an older version, upgrade Node.js:\n   ```bash\n   # Using nvm (recommended)\n   nvm install 22\n   nvm use 22\n   \n   # Or download from nodejs.org\n   ```\n3. If you can't upgrade Node.js, consider using a transpiler like Babel to support newer syntax in older environments.\n\n\n## Getting Additional Help\n\nIf you're still experiencing issues after trying the troubleshooting steps above:\n\n1. Check the [Agentuity documentation](https://agentuity.dev) for updates and additional information.\n2. Join the [Agentuity Discord](https://discord.com/invite/vtn3hgUfuc) to ask questions and get help from other developers.\n4. File an issue on the [GitHub repository](https://github.com/agentuity/sdk-js/issues) if you believe you've found a bug.\n"
    },
    {
      "file": "SDKs/python/agent-to-agent.mdx",
      "meta": {
        "title": "Agent-to-Agent Communication",
        "description": "Enable communication between agents in the Agentuity Python SDK"
      },
      "content": "\n# Agent-to-Agent Communication\n\nThe Agentuity Python SDK enables seamless communication between agents, whether they are running locally or in different environments.\n\n## Local Agent Communication\n\nYou can easily communicate between agents running in the same process:\n\n```python\nasync def run(request, response, context):\n    # Call another agent by ID\n    return await response.handoff({\"id\": \"other_agent_id\"})\n    \n    # Or call by name\n    # return response.handoff({\"name\": \"OtherAgentName\"})\n```\n\n## Remote Agent Communication\n\nThe SDK now supports communication with agents running in different environments:\n\n```python\nasync def run(request, response, context):\n    # Resolve an agent (local or remote)\n    agent = context.get_agent({\"id\": \"remote_agent_id\"})\n    \n    # Create data for the remote agent\n    from agentuity.server.data import Data, StringStreamReader\n    data = Data(\"text/plain\", StringStreamReader(\"Hello from another agent\"))\n    \n    # Call the remote agent\n    result = await agent.run(data, metadata={\"key\": \"value\"})\n    \n    # Process the response\n    text = await result.data.text()\n    return response.text(f\"Got response: {text}\")\n```\n\n## Agent Resolution\n\nThe `AgentContext` provides methods for resolving agents, whether they are local or remote:\n\n```python\nasync def run(request, response, context):\n    # Resolve by ID\n    agent = context.get_agent({\"id\": \"agent_id\"})\n    \n    # Resolve by name\n    agent = context.get_agent({\"name\": \"AgentName\"})\n    \n    # Resolve by name in a specific project\n    agent = context.get_agent({\"name\": \"AgentName\", \"projectId\": \"proj_123\"})\n    \n    # Call the resolved agent\n    result = await agent.run(request.data)\n    return result\n```\n\n## Agent Context\n\nThe `AgentContext` class provides methods for agent resolution and management:\n\n```python\nasync def run(request, response, context):\n    # Get agent information\n    current_agent = context.agent\n    all_agents = context.agents\n    \n    # Get the current scope (local or remote)\n    scope = context.scope\n    \n    # Get the current run ID\n    run_id = context.runId\n    \n    # Use key-value store\n    await context.kv.set(\"key\", \"value\")\n    value = await context.kv.get(\"key\")\n    \n    # Use vector store\n    await context.vector.add(\"collection\", \"id\", [0.1, 0.2, 0.3], {\"metadata\": \"value\"})\n    results = await context.vector.search(\"collection\", [0.1, 0.2, 0.3], 5)\n    \n    return response.text(\"Agent context example\")\n```\n"
    },
    {
      "file": "SDKs/python/api-reference.mdx",
      "meta": {
        "title": "API Reference",
        "description": "Complete reference documentation for the Agentuity Python SDK, including request handling, response types, data storage, and agent communication."
      },
      "content": "\nThis section provides detailed documentation for the Agentuity Python SDK API, including method signatures, parameters, return values, and example usage.\n\n## Table of Contents\n\n- [Agent Lifecycle](#agent-lifecycle)\n- [Storage APIs](#storage-apis)\n  - [Key-Value Storage](#key-value-storage)\n  - [Vector Storage](#vector-storage)\n- [Agent Communication](#agent-communication)\n- [Response Types](#response-types)\n  - [JSON Responses](#json-responses)\n  - [Text Responses](#text-responses)\n  - [Binary Responses](#binary-responses)\n  - [Media Type Responses](#media-type-responses)\n  - [HTML Responses](#html-responses)\n  - [Empty Responses](#empty-responses)\n- [Request Handling](#request-handling)\n- [Logging](#logging)\n- [Telemetry](#telemetry)\n\n> **Note:** This documentation applies to Agentuity Python SDK version 1.0 and above.\n\n## Welcome Function\n\nThe Agentuity SDK allows you to customize the initial appearance of DevMode when it starts interacting with your agents by defining a `welcome()` function in your agent module. This function should return a dictionary containing a welcome message and optional example prompts.\n\n### welcome()\n\nDefines a welcome message and optional example prompts for DevMode.\n\n#### Return Value\n\nReturns a dictionary with a welcome message and optional prompts.\n\n```python\ndef welcome():\n    return {\n        \"welcome\": \"Welcome message to display\",\n        \"prompts\": [\n            {\n                \"data\": \"Example prompt text\",\n                \"contentType\": \"text/plain\"\n            }\n        ]\n    }\n```\n\n#### Example\n\n```python\ndef welcome():\n    return {\n        \"welcome\": \"Welcome to my Python Agent! How can I help you today?\",\n        \"prompts\": [\n            {\n                \"data\": \"What can you do?\",\n                \"contentType\": \"text/plain\"\n            }\n        ]\n    }\n```\n\n## Agent Lifecycle\n\nThe Agentuity SDK provides a structured way to define and handle agents. An agent consists of a handler function, with its configuration managed by the Agentuity CLI.\n\n\n### Agent Handler\n\nThe agent handler is a function that processes requests and returns responses:\n\n```python\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\n\nasync def agent_handler(\n    request: AgentRequest,\n    response: AgentResponse,\n    context: AgentContext\n) -> AgentResponseType:\n    \"\"\"\n    Handler function for an agent.\n    \n    Args:\n        request: An AgentRequest object containing the request data\n        response: An AgentResponse object for creating responses\n        context: An AgentContext object providing access to various capabilities\n        \n    Returns:\n        An AgentResponseType object representing the response\n    \"\"\"\n    return response.json({\"message\": \"Hello, world!\"})\n```\n\n#### Parameters\n\n- `request`: An `AgentRequest` object containing the request data\n- `response`: An `AgentResponse` object for creating responses\n- `context`: An `AgentContext` object providing access to various capabilities\n\n#### Return Value\n\nThe handler function should return an `AgentResponseType` object.\n\n#### Example\n\n```python\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\n\n# Agent handler function\nasync def handler(request: AgentRequest, response: AgentResponse, context: AgentContext):\n    try:\n        # Get the request data\n        data = request.data.json\n        name = data.get(\"name\")\n        \n        # Log the request\n        context.logger.info(f\"Received greeting request for {name}\")\n        \n        # Return a personalized greeting\n        return response.json({\n            \"message\": f\"Hello, {name}! Welcome to Agentuity.\"\n        })\n    except Exception as error:\n        # Handle errors\n        context.logger.error(\"Error processing request\", error)\n        return response.json({\"error\": \"Failed to process request\"})\n```\n\n## Storage APIs\n\nThe Agentuity SDK provides two storage APIs: Key-Value Storage and Vector Storage.\n\n\n### Key-Value Storage\n\nThe Key-Value Storage API provides a simple way to store and retrieve data. It is accessed through the `context.kv` object.\n\n#### `async get(name: str, key: str) -> \"DataResult\"`\n\nRetrieves a value from the key-value storage.\n\n##### Parameters\n\n- `name`: The name of the key-value storage\n- `key`: The key to retrieve the value for\n\n##### Return Value\n\nReturns a DataResult object that has an `exists` property to check if the value exists and a `data` property with accessors like `data.json` and `data.text`.\n\n##### Example\n\n```python\nfrom agentuity.sdk import AgentContext\n\n# Retrieve a value from key-value storage with error handling\ntry:\n    value = await context.kv.get(\"user-preferences\", \"user-123\")\n    if value.exists:\n        # Access data using the appropriate accessor\n        user_prefs = value.data.json\n        context.logger.info(f\"User preferences: {user_prefs}\")\n        \n        # Or access as text if needed\n        # text_data = value.data.text\n        # context.logger.info(f\"User preferences (text): {text_data}\")\n    else:\n        context.logger.info(\"User preferences not found, using defaults\")\n        user_prefs = {\"theme\": \"light\"}\nexcept Exception as e:\n    context.logger.error(f\"Failed to retrieve user preferences: {str(e)}\")\n    # Use default value or re-raise exception\n    user_prefs = {\"theme\": \"light\"}\n```\n\n#### `async set(name: str, key: str, value: Union[str, int, float, bool, list, dict, bytes, \"Data\"], params: Optional[dict] = None) -> None`\n\nStores a value in the key-value storage.\n\n##### Parameters\n\n- `name`: The name of the key-value storage\n- `key`: The key to store the value under\n- `value`: The value to store (Union[str, int, float, bool, list, dict, bytes, \"Data\"])\n- `params` (optional): Can have `ttl` (time-to-live in seconds)\n\n##### Return Value\n\nNone\n\n##### Example\n\n```python\nimport json\n\n# Store a string value\nawait context.kv.set(\"user-preferences\", \"user-123\", json.dumps({\"theme\": \"dark\"}))\n\n# Store a dictionary value (automatically serialized to JSON)\nawait context.kv.set(\"user-preferences\", \"user-123\", {\"theme\": \"dark\"})\n\n# Store binary data\nbinary_data = bytes([1, 2, 3, 4])\nawait context.kv.set(\"user-data\", \"user-123\", binary_data)\n\n# Store a value with TTL (expires after 1 hour)\nawait context.kv.set(\"session\", \"user-123\", \"active\", {\"ttl\":3600})\n```\n\n#### `async delete(name: str, key: str) -> None`\n\nDeletes a value from the key-value storage.\n\n##### Parameters\n\n- `name`: The name of the key-value storage\n- `key`: The key to delete\n\n##### Return Value\n\nNone\n\n##### Example\n\n```python\n# Delete a value\nawait context.kv.delete(\"user-preferences\", \"user-123\")\n```\n\n### Vector Storage\n\nThe Vector Storage API provides a way to store and search for data using vector embeddings. It is accessed through the `context.vector` object.\n\n#### `async upsert(name: str, *documents: VectorUpsertParams) -> list[str]`\n\nInserts or updates vectors in the vector storage.\n\n##### Parameters\n\n- `name`: The name of the vector storage\n- `documents`: One or more documents to upsert, each with either embeddings or text\n\n##### Return Value\n\nReturns a list of string IDs for the upserted vectors.\n\n##### Example\n\n```python\nfrom agentuity.sdk import AgentContext\nfrom typing import List, Dict, Any\n\nasync def index_products(context: AgentContext, products: List[Dict[str, Any]]) -> List[str]:\n    \"\"\"\n    Index product descriptions in vector storage for semantic search.\n    \n    Args:\n        context: The agent context\n        products: List of product dictionaries with name, description, and category\n        \n    Returns:\n        List of vector IDs for the indexed products\n    \"\"\"\n    # Prepare documents for vector storage\n    documents = []\n    for product in products:\n        documents.append({\n            \"document\": product[\"description\"],\n            \"metadata\": {\n                \"product_id\": product[\"id\"],\n                \"name\": product[\"name\"],\n                \"category\": product[\"category\"],\n                \"price\": product[\"price\"]\n            }\n        })\n    \n    # Upsert documents to vector storage\n    try:\n        ids = await context.vector.upsert(\"product-descriptions\", *documents)\n        context.logger.info(f\"Indexed {len(ids)} products in vector storage\")\n        return ids\n    except Exception as e:\n        context.logger.error(f\"Failed to index products: {str(e)}\")\n        raise\n\n# Simple example\n# Upsert documents with text\nids = await context.vector.upsert(\n    \"product-descriptions\",\n    {\"document\": \"Ergonomic office chair with lumbar support\", \"metadata\": {\"category\": \"furniture\"}},\n    {\"document\": \"Wireless noise-cancelling headphones\", \"metadata\": {\"category\": \"electronics\"}}\n)\n\n# Upsert documents with embeddings\nids2 = await context.vector.upsert(\n    \"product-embeddings\",\n    {\"embeddings\": [0.1, 0.2, 0.3, 0.4], \"metadata\": {\"productId\": \"123\"}},\n    {\"embeddings\": [0.5, 0.6, 0.7, 0.8], \"metadata\": {\"productId\": \"456\"}}\n)\n```\n\n#### `async search(name: str, params: VectorSearchParams) -> list[VectorSearchResult]`\n\nSearches for vectors in the vector storage.\n\n##### Parameters\n\n- `name`: The name of the vector storage\n- `params`: Search parameters including query, limit, similarity threshold, and metadata filters\n\n##### Return Value\n\nReturns a list of search results, each containing an ID, metadata, and distance score.\n\n##### Example\n\n```python\nfrom agentuity.sdk import AgentContext\nfrom typing import List, Dict, Any\n\n# Search for similar products with error handling\ntry:\n    results = await context.vector.search(\"product-descriptions\", {\n        \"query\": \"comfortable office chair\",\n        \"limit\": 5,\n        \"similarity\": 0.7,\n        \"metadata\": {\"category\": \"furniture\"}\n    })\n    \n    # Process search results\n    if results:\n        context.logger.info(f\"Found {len(results)} matching products\")\n        for result in results:\n            print(f\"Product ID: {result.id}, Similarity: {result.distance}\")\n            print(f\"Metadata: {result.metadata}\")\n    else:\n        context.logger.info(\"No matching products found\")\nexcept Exception as e:\n    context.logger.error(f\"Vector search failed: {str(e)}\")\n    # Handle the error appropriately\n```\n\n#### `async delete(name: str, *ids: str) -> int`\n\nDeletes vectors from the vector storage.\n\n##### Parameters\n\n- `name`: The name of the vector storage\n- `ids`: One or more IDs of vectors to delete\n\n##### Return Value\n\nReturns the number of vectors that were deleted.\n\n##### Example\n\n```python\nfrom agentuity.sdk import AgentContext\n\n# Delete vectors with error handling\ntry:\n    deleted_count = await context.vector.delete(\"product-descriptions\", \"id1\", \"id2\", \"id3\")\n    context.logger.info(f\"Deleted {deleted_count} vectors\")\nexcept Exception as e:\n    context.logger.error(f\"Failed to delete vectors: {str(e)}\")\n    # Handle the error appropriately\n```\n\n## Agent Communication\n\nThe Agentuity SDK allows agents to communicate with each other through the `context.get_agent()` method and agent redirection.\n\n### `async get_agent(params: GetAgentRequestParams) -> RemoteAgent`\n\nRetrieves a handle to a remote agent that can be invoked.\n\n#### Parameters\n\n- `params`: Parameters to identify the agent, either by ID or by name and project ID\n\n#### Return Value\n\nReturns a `RemoteAgent` object that can be used to invoke the agent.\n\n#### Example\n\n```python\nfrom agentuity.sdk import AgentContext, RemoteAgent\n\n# Get an agent by ID\nagent = await context.get_agent({\"id\": \"agent-123\"})\n\n# Get an agent by name\nagent2 = await context.get_agent({\n    \"name\": \"data-processing-agent\",\n    \"project_id\": \"project-456\"\n})\n\n# Invoke the agent with error handling\ntry:\n    result = await agent.run({\"data\": \"process this\"}, \"application/json\")\n    # Process the result\n    print(f\"Agent response: {result}\")\nexcept Exception as e:\n    context.logger.error(f\"Failed to invoke agent: {str(e)}\")\n    # Handle the error appropriately\n```\n\n### Agent Handoff\n\nThe `response.handoff()` method allows an agent to handoff the request to another agent.\n\n#### `handoff(agent: GetAgentRequestParams, payload: dict | bytes | str = None, content_type: str = None, metadata: dict = None) -> AgentRedirectResponse`\n\nRedirects the current request to another agent.\n\n<Callout type=\"warn\" title=\"Handoff\">\n  Handoff is currently only supported for handoff to other agents in the same project. However, we are working on remote agent handoff and should have that working soon.\n</Callout>\n\n##### Parameters\n\n- `agent`: Parameters to identify the target agent\n- `payload` (optional): The payload to send to the target agent\n- `content_type` (optional): The content type of the payload\n- `metadata` (optional): Additional metadata to include with the request\n\n##### Return Value\n\nReturns an `AgentRedirectResponse` object.\n\n##### Example\n\n```python\n# Handoff to another agent\nreturn response.handoff(\n    {\"name\": \"data-processing-agent\"},\n    {\"data\": \"process this\"},\n    \"application/json\",\n    {\"source\": \"web-agent\"}\n)\n```\n\n## Response Types\n\nThe Agentuity SDK provides various methods for creating different types of responses through the `response` object.\n\n### JSON Responses\n\n#### `json(data: dict, metadata: dict = None) -> AgentResponseType`\n\nCreates a JSON response.\n\n##### Parameters\n\n- `data`: The JSON data to include in the response\n- `metadata` (optional): Additional metadata to include with the response\n\n##### Return Value\n\nReturns an `AgentResponseType` object with the JSON data.\n\n##### Example\n\n```python\nreturn response.json({\n    \"message\": \"Success\",\n    \"data\": {\"id\": 123, \"name\": \"Example\"}\n})\n```\n\n### Text Responses\n\n#### `text(data: str, metadata: dict = None) -> AgentResponseType`\n\nCreates a text response.\n\n##### Parameters\n\n- `data`: The text to include in the response\n- `metadata` (optional): Additional metadata to include with the response\n\n##### Return Value\n\nReturns an `AgentResponseType` object with the text data.\n\n##### Example\n\n```python\nreturn response.text(\"Hello, world!\")\n```\n\n### Binary Responses\n\n#### `binary(data: bytes, metadata: dict = None) -> AgentResponseType`\n\nCreates a binary response.\n\n##### Parameters\n\n- `data`: The binary data to include in the response\n- `metadata` (optional): Additional metadata to include with the response\n\n##### Return Value\n\nReturns an `AgentResponseType` object with the binary data.\n\n##### Example\n\n```python\nbinary_data = bytes([1, 2, 3, 4])\nreturn response.binary(binary_data, {\"filename\": \"data.bin\"})\n```\n\n### Media Type Responses\n\nThe SDK provides specialized methods for various media types:\n\n- `pdf(data: bytes, metadata: dict = None) -> AgentResponseType`\n- `png(data: bytes, metadata: dict = None) -> AgentResponseType`\n- `jpeg(data: bytes, metadata: dict = None) -> AgentResponseType`\n- `gif(data: bytes, metadata: dict = None) -> AgentResponseType`\n- `webp(data: bytes, metadata: dict = None) -> AgentResponseType`\n- `mp3(data: bytes, metadata: dict = None) -> AgentResponseType`\n- `mp4(data: bytes, metadata: dict = None) -> AgentResponseType`\n- `wav(data: bytes, metadata: dict = None) -> AgentResponseType`\n- `ogg(data: bytes, metadata: dict = None) -> AgentResponseType`\n- `data(data: Any, content_type: str, metadata: dict = None) -> AgentResponseType`\n- `markdown(content: str, metadata: dict = None) -> AgentResponseType`\n\nEach method works similarly to the `binary()` method but sets the appropriate content type. The `data` method allows setting specific data with an exact content type, while the `markdown` method provides a convenient way to return markdown content.\n\n#### Example\n\n```python\n# Return a PNG image\nreturn response.png(image_data, {\"filename\": \"chart.png\"})\n\n# Return an MP3 audio file\nreturn response.mp3(audio_data, {\"duration\": 120})\n```\n\n### HTML Responses\n\n#### `html(data: str, metadata: dict = None) -> AgentResponseType`\n\nCreates an HTML response.\n\n##### Parameters\n\n- `data`: The HTML content to include in the response\n- `metadata` (optional): Additional metadata to include with the response\n\n##### Return Value\n\nReturns an `AgentResponseType` object with the HTML content.\n\n##### Example\n\n```python\nreturn response.html(\"<h1>Hello, world!</h1><p>This is an HTML response.</p>\")\n```\n\n### Empty Responses\n\n#### `empty(metadata: dict = None) -> AgentResponseType`\n\nCreates an empty response.\n\n##### Parameters\n\n- `metadata` (optional): Additional metadata to include with the response\n\n##### Return Value\n\nReturns an `AgentResponseType` object with no payload.\n\n##### Example\n\n```python\nreturn response.empty({\"status\": 204})\n```\n\n## Request Handling\n\nThe Agentuity SDK provides various methods for accessing request data through the `request` object.\n\n### Accessing Request Data\n\n#### `trigger() -> str`\n\nGets the trigger type of the request.\n\n##### Return Value\n\nReturns a string representing the trigger type (webhook, cron, manual, agent, etc.).\n\n##### Example\n\n```python\ntrigger_type = request.trigger()\nprint(f\"Request triggered by: {trigger_type}\")\n```\n\n#### `metadata(key: str, default_value = None) -> Any`\n\nGets metadata associated with the request.\n\n##### Parameters\n\n- `key`: The metadata key to retrieve\n- `default_value` (optional): A default value to return if the key does not exist\n\n##### Return Value\n\nReturns the metadata value for the specified key, or the default value if the key does not exist.\n\n##### Example\n\n```python\nuser_id = request.metadata(\"userId\", \"anonymous\")\nprint(f\"User ID: {user_id}\")\n```\n\n#### `json() -> dict`\n\nGets the payload of the request as a JSON object.\n\n##### Return Value\n\nReturns the request payload as a dictionary.\n\n##### Example\n\n```python\ndata = request.data.json\nprint(f\"Request data: {data}\")\n```\n\n#### `text() -> str`\n\nGets the payload of the request as a string.\n\n##### Return Value\n\nReturns the request payload as a string.\n\n##### Example\n\n```python\ntext = request.data.text\nprint(f\"Request text: {text}\")\n```\n\n#### `binary() -> bytes`\n\nGets the payload of the request as bytes.\n\n##### Return Value\n\nReturns the request payload as bytes.\n\n##### Example\n\n```python\nbinary_data = request.binary()\nprint(f\"Binary data size: {len(binary_data)} bytes\")\n```\n\n### Media-Specific Methods\n\nThe SDK provides specialized methods for various media types:\n\n- `pdf() -> bytes`\n- `png() -> bytes`\n- `jpeg() -> bytes`\n- `gif() -> bytes`\n- `webp() -> bytes`\n- `mp3() -> bytes`\n- `wav() -> bytes`\n- `ogg() -> bytes`\n- `email() -> Email`\n\nEach method returns the request payload as bytes with the appropriate content type validation, except for `email()` which returns an `Email` object.\n\n#### Example\n\n```python\n# Get an image from the request\nimage = request.png()\n# Process the image...\n\n# Get audio from the request\naudio = request.mp3()\n# Process the audio...\n```\n\n#### `email() -> Email`\n\nGets the payload of the request as an Email object. This method validates that the content type is `message/rfc822` before parsing.\n\n##### Return Value\n\nReturns an `Email` object with parsed email data and accessor methods.\n\n##### Example\n\n```python\n# Get email from the request (content type must be message/rfc822)\nemail = await request.data.email()\n\n# Access email properties\nprint(f\"Subject: {email.subject}\")\nprint(f\"From: {email.from_name} <{email.from_email}>\")\nprint(f\"To: {email.to}\")\nprint(f\"Date: {email.date}\")\nprint(f\"Message ID: {email.messageId}\")\n\n# Access email content\nprint(f\"Text content: {email.text}\")\nprint(f\"HTML content: {email.html}\")\n\n# Access attachments\nfor attachment in email.attachments:\n    print(f\"Attachment: {attachment}\")\n\n# Convert to dictionary\nemail_dict = email.to_dict()\n```\n\n## Email Class\n\nThe `Email` class provides comprehensive email parsing capabilities and is returned by the `email()` method on request data.\n\n### Email Properties\n\nAll email properties are accessible as attributes on the Email object:\n\n#### `subject -> str`\n\nReturns the subject line of the email.\n\n#### `from_email -> str | None`\n\nReturns the sender's email address. Handles both simple email strings and tuple formats like `('Name', 'email@domain.com')`.\n\n#### `from_name -> str | None`\n\nReturns the sender's display name if available.\n\n#### `to -> str | None`\n\nReturns the recipient's email address. Handles both simple email strings and tuple formats.\n\n#### `date -> datetime | None`\n\nReturns the email date as a datetime object.\n\n#### `messageId -> str`\n\nReturns the unique message ID of the email.\n\n#### `headers -> dict`\n\nReturns all email headers as a dictionary.\n\n#### `text -> str`\n\nReturns the plain text content of the email.\n\n#### `html -> str`\n\nReturns the HTML content of the email.\n\n#### `attachments -> list`\n\nReturns a list of email attachments.\n\n### Email Methods\n\n#### `to_dict() -> dict`\n\nConverts the Email object to a dictionary containing all email data.\n\n##### Return Value\n\nReturns a dictionary with keys: subject, from_email, from_name, to, date, messageId, headers, text, html, attachments.\n\n##### Example\n\n```python\nemail_data = email.to_dict()\nprint(email_data)\n# {\n#   \"subject\": \"Welcome to Agentuity\",\n#   \"from_email\": \"support@agentuity.com\",\n#   \"from_name\": \"Agentuity Support\",\n#   \"to\": \"user@example.com\",\n#   \"date\": \"2025-05-24T10:30:00Z\",\n#   \"messageId\": \"<abc123@agentuity.com>\",\n#   \"headers\": {...},\n#   \"text\": \"Welcome to our platform...\",\n#   \"html\": \"<html>...</html>\",\n#   \"attachments\": []\n# }\n```\n\n### Dictionary-Style Access\n\nThe Email object also supports dictionary-style access to its properties:\n\n```python\n# Access via dictionary notation\nsubject = email[\"subject\"]\nfrom_email = email[\"from_email\"]\n\n# Iterate over email data\nfor key, value in email.items():\n    print(f\"{key}: {value}\")\n\n# Get available keys\nkeys = email.keys()\n```\n\n## Logging\n\nThe Agentuity SDK provides logging functionality through the `context.logger` object.\n\n### Logger Interface\n\nThe `Logger` class defines the following methods:\n\n```python\nclass Logger:\n    \"\"\"\n    Logger for agent execution.\n    \"\"\"\n    def debug(self, message: str, *args, **kwargs) -> None:\n        \"\"\"Log a debug message.\"\"\"\n        pass\n        \n    def info(self, message: str, *args, **kwargs) -> None:\n        \"\"\"Log an informational message.\"\"\"\n        pass\n        \n    def warn(self, message: str, *args, **kwargs) -> None:\n        \"\"\"Log a warning message.\"\"\"\n        pass\n        \n    def error(self, message: str, *args, **kwargs) -> None:\n        \"\"\"Log an error message.\"\"\"\n        pass\n        \n    def child(self, **kwargs) -> 'Logger':\n        \"\"\"Create a child logger with additional context.\"\"\"\n        pass\n```\n\n### Logging Methods\n\n#### `debug(message: str, *args, **kwargs) -> None`\n\nLogs a debug message.\n\n##### Parameters\n\n- `message`: The message to log\n- `args`, `kwargs`: Additional arguments to include in the log\n\n##### Example\n\n```python\ncontext.logger.debug(\"Processing request\", request_id=\"123\")\n```\n\n#### `info(message: str, *args, **kwargs) -> None`\n\nLogs an informational message.\n\n##### Parameters\n\n- `message`: The message to log\n- `args`, `kwargs`: Additional arguments to include in the log\n\n##### Example\n\n```python\ncontext.logger.info(\"Request processed successfully\", request_id=\"123\")\n```\n\n#### `warn(message: str, *args, **kwargs) -> None`\n\nLogs a warning message.\n\n##### Parameters\n\n- `message`: The message to log\n- `args`, `kwargs`: Additional arguments to include in the log\n\n##### Example\n\n```python\ncontext.logger.warn(\"Resource not found\", resource_id=\"456\")\n```\n\n#### `error(message: str, *args, **kwargs) -> None`\n\nLogs an error message.\n\n##### Parameters\n\n- `message`: The message to log\n- `args`, `kwargs`: Additional arguments to include in the log\n\n##### Example\n\n```python\ntry:\n    # Some code that might raise an exception\n    result = process_data()\nexcept Exception as e:\n    context.logger.error(\"Failed to process request\", error=str(e))\n```\n\n### Creating Child Loggers\n\n#### `child(**kwargs) -> Logger`\n\nCreates a child logger with additional context.\n\n##### Parameters\n\n- `kwargs`: Additional context to include in all logs from the child logger\n\n##### Return Value\n\nReturns a new `Logger` instance with the additional context.\n\n##### Example\n\n```python\nrequest_logger = context.logger.child(request_id=\"123\", user_id=\"456\")\nrequest_logger.info(\"Processing request\")  # Includes request_id and user_id\n```\n\n## Telemetry\n\nThe Agentuity SDK integrates with OpenTelemetry for tracing and metrics.\n\n### Tracing\n\nThe SDK provides access to OpenTelemetry tracing through the `context.tracer` object.\n\n#### Example\n\n```python\nfrom agentuity.sdk import AgentContext\nfrom opentelemetry.trace.status import Status, StatusCode\n\n# Create a span\nasync with context.tracer.start_as_current_span(\"process-data\") as span:\n    try:\n        # Add attributes to the span\n        span.set_attribute(\"userId\", \"123\")\n        \n        # Perform some work\n        result = await process_data()\n        \n        # Add events to the span\n        span.add_event(\"data-processed\", {\"itemCount\": len(result)})\n        \n        return result\n    except Exception as error:\n        # Record the error\n        span.record_exception(error)\n        span.set_status(Status(StatusCode.ERROR))\n        context.logger.error(f\"Error processing data: {str(error)}\")\n        raise error\n```\n"
    },
    {
      "file": "SDKs/python/async-api.mdx",
      "meta": {
        "title": "Async API",
        "description": "Working with Asynchronous Agents in the Agentuity Python SDK"
      },
      "content": "\n# Async API\n\nThe Agentuity Python SDK now supports fully asynchronous operations, enabling more efficient handling of concurrent requests and streaming responses.\n\n## Agent Request\n\nThe `AgentRequest` class now uses async patterns to handle incoming data:\n\n```python\nfrom agentuity.server import AgentRequest\n\nasync def run(request: AgentRequest, response, context):\n    # Access request data asynchronously\n    data = await request.data.text()\n    \n    # Access request metadata\n    metadata = request.metadata\n    \n    # Get the trigger type\n    trigger = request.trigger\n    \n    # Return a response\n    return response.text(f\"Received: {data}\")\n```\n\n## Agent Response\n\nThe `AgentResponse` class supports async streaming and iteration:\n\n```python\nfrom agentuity.server import AgentResponse\n\nasync def run(request, response: AgentResponse, context):\n    # Stream response data\n    async def data_generator():\n        for i in range(5):\n            yield f\"Data chunk {i}\\n\"\n    \n    # Return a streaming response\n    return response.stream(data_generator(), contentType=\"text/plain\")\n```\n\n### Async Iteration\n\nResponses can be iterated over asynchronously:\n\n```python\nasync def process_response(response):\n    async for chunk in response:\n        print(chunk)\n```\n\n## Data Streaming\n\nThe SDK provides several specialized stream readers for different data types:\n\n```python\nfrom agentuity.server.data import (\n    StringStreamReader,\n    BytesStreamReader,\n    EmptyDataReader\n)\n\n# Create a stream from a string\nstring_stream = StringStreamReader(\"Hello, world!\")\n\n# Create a stream from bytes\nbytes_stream = BytesStreamReader(b\"Binary data\")\n\n# Create an empty stream\nempty_stream = EmptyDataReader()\n```\n\n## Performance Benefits\n\nThe async implementation provides several advantages:\n\n- Efficient handling of concurrent requests\n- Streaming of large data payloads without blocking\n- Reduced memory usage for processing large files\n- Better integration with modern async Python applications\n"
    },
    {
      "file": "SDKs/python/core-concepts.mdx",
      "meta": {
        "title": "Core Concepts",
        "description": "Learn about the fundamental concepts of the Agentuity Python SDK"
      },
      "content": "\nThe Agentuity Python SDK is built around several key concepts that form the foundation of agent development. Understanding these concepts is essential for effectively using the SDK.\n\n## Agent Architecture\n\nAgents in the Agentuity SDK are modular components that can process requests and generate responses. Each agent:\n\n- Has a unique identifier and name\n- Can be triggered by various events (webhooks, cron jobs, manual invocation, etc.)\n- Processes requests through a handler function\n- Has access to a context object with various capabilities\n\nThe basic structure of an agent looks like this:\n\n```python\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\n\n# Agent handler function\nasync def handler(request: AgentRequest, response: AgentResponse, context: AgentContext):\n  # Process the request\n  data = request.data.json\n  \n  # Use the context (logging, storage, etc.)\n  context.logger.info('Processing request', data)\n  \n  # Return a response\n  return response.json({ message: 'Hello from my agent!' })\n```\n\n<Callout type=\"warn\" title=\"Configuration\">\n  Agent configuration (name, description, etc.) is managed by the Agentuity CLI and stored in the project configuration file.\n  Use the `agentuity project` and `agentuity agent` commands to manage your configuration.\n</Callout>\n\n## Request and Response Handling\n\nThe Agentuity SDK provides a structured way to handle requests and generate responses:\n\n### Requests\n\nRequests contain information about the trigger event and payload data. The `AgentRequest` interface provides methods to access this data in various formats:\n\n- `request.trigger` - Get the trigger type (webhook, manual,cron, etc.)\n- `request.metadata` - Access metadata associated with the request\n- `request.get(key, defval)` - Get a value from the request metadata\n- `request.data` - Get a Data object from the request\n- `request.data.contentType` - The content type (or mime type) of the request\n- `request.data.text` - Get the payload as a string\n- `request.data.json` - Get the payload as a JSON object\n- `request.data.binary` - Get the payload as a binary object\n- `request.data.base64` - Get the payload as a base64 encoded string\n\n### Responses\n\nResponses are created using the `AgentResponse` interface, which provides methods for different response types:\n\n- `response.json()` - Return a JSON response\n- `response.text()` - Return a text response\n- `response.binary()` - Return a binary response\n- `response.html()` - Return an HTML response\n- `response.empty()` - Return an empty response\n- Various media-specific methods (pdf(), png(), jpeg(), etc.)\n- `response.handoff()` - Redirect to another agent\n\n## Agent Context\n\nThe context object provides access to various capabilities and services:\n\n- `context.logger` - Logging functionality\n- `context.kv` - Key-value storage\n- `context.vector` - Vector storage\n- `context.get_agent()` - Access to other agents both locally and remotely\n- `context.tracer` - OpenTelemetry tracing\n- Metadata about the current execution (runId, projectId, etc.)\n\n## Triggers and Event Types\n\nAgents can be triggered by various event types:\n\n- `webhook` - HTTP webhook calls\n- `cron` - Scheduled cron jobs\n- `manual` - Manual invocation\n- `agent` - Calls from other agents\n- `sms` - SMS messages\n- `queue` - Queue processing\n- `voice` - Voice calls\n- `email` - Email messages\n\nEach trigger type may provide different metadata and payload formats, which can be accessed through the request object.\n"
    },
    {
      "file": "SDKs/python/data-handling.mdx",
      "meta": {
        "title": "Data Handling",
        "description": "Working with various data types in the Agentuity Python SDK"
      },
      "content": "\n# Data Handling\n\nThe Agentuity Python SDK provides a flexible system for working with different types of data, from text and JSON to binary formats like images and audio.\n\n## The Data Class\n\nThe `Data` class serves as a container for all types of content:\n\n```python\nfrom agentuity.server.data import Data, StringStreamReader, BytesStreamReader\n\n# Create a text Data object\ntext_data = Data(\"text/plain\", StringStreamReader(\"Hello, world!\"))\n\n# Create a binary Data object\nbinary_data = Data(\"application/octet-stream\", BytesStreamReader(b\"\\x00\\x01\\x02\\x03\"))\n```\n\n## Accessing Data Content\n\nData content can be accessed in various formats:\n\n```python\nasync def process_data(data: Data):\n    # Get as text\n    text = await data.text()\n    \n    # Get as JSON\n    json_data = await data.json()\n    \n    # Get as binary\n    binary = await data.binary()\n    \n    # Get as base64 encoded string\n    base64_str = await data.base64()\n    \n    # Access as a stream\n    stream = await data.stream()\n    async for chunk in stream:\n        process_chunk(chunk)\n```\n\n## Working with Responses\n\nThe `AgentResponse` class provides methods for various content types:\n\n```python\nasync def run(request, response, context):\n    # Text response\n    return response.text(\"Hello, world!\")\n    \n    # JSON response\n    return response.json({\"message\": \"Hello, world!\"})\n    \n    # Markdown response\n    return response.markdown(\"# Hello, world!\")\n    \n    # Binary response\n    return response.binary(b\"\\x00\\x01\\x02\\x03\", \"application/octet-stream\")\n```\n\n## Media Type Helpers\n\nThe SDK includes helpers for common media types:\n\n```python\nasync def run(request, response, context):\n    # Image responses\n    with open(\"image.png\", \"rb\") as f:\n        image_data = f.read()\n        return response.png(image_data)\n    \n    # Other image formats\n    return response.jpeg(jpeg_data)\n    return response.gif(gif_data)\n    return response.webp(webp_data)\n    \n    # Document formats\n    return response.pdf(pdf_data)\n    \n    # Audio/Video formats\n    return response.mp3(mp3_data)\n    return response.mp4(mp4_data)\n    return response.wav(wav_data)\n    return response.ogg(ogg_data)\n    return response.webm(webm_data)\n    return response.m4a(m4a_data)\n```\n\n## Streaming Data\n\nFor large responses or real-time data, use streaming:\n\n```python\nasync def run(request, response, context):\n    # Stream data from a generator\n    async def generator():\n        for i in range(10):\n            yield f\"Item {i}\\n\"\n    \n    # Return the stream\n    return response.stream(generator(), contentType=\"text/plain\")\n    \n    # Transform items during streaming\n    def transform(item):\n        return f\"Transformed: {item}\"\n    \n    return response.stream(generator(), transform=transform)\n    \n    # Stream responses from another agent\n    other_response = await context.get_agent(\"other_agent\").run(request.data)\n    return response.stream(other_response)\n```\n"
    },
    {
      "file": "SDKs/python/examples/index.mdx",
      "meta": {
        "title": "Examples",
        "description": "Examples of using the Agentuity Python SDK"
      },
      "content": "\n## Basic Agent\n\nA simple agent that returns a greeting.\n\n```python\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\nfrom datetime import datetime\n\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n    # Get the request data\n    data = request.data.json\n    name = data.get(\"name\", \"Guest\")\n    \n    # Log the request\n    context.logger.info(f\"Received greeting request for {name}\")\n    \n    # Return a personalized greeting\n    return response.json({\n        \"message\": f\"Hello, {name}! Welcome to Agentuity.\",\n        \"timestamp\": datetime.now().isoformat()\n    })\n```\n\n## Key-Value Storage\n\nAn agent that uses key-value storage to store and retrieve user preferences.\n\n```python\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\nimport json\n\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n    data = request.data.json\n    action = data.get(\"action\")\n    user_id = data.get(\"userId\")\n    preferences = data.get(\"preferences\")\n\n    if action == \"get\":\n        # Retrieve user preferences\n        result = await context.kv.get(\"user-preferences\", user_id)\n\n        if not result.exists:\n            return response.json({\"message\": \"No preferences found\"})\n\n        # Access the data\n        user_prefs = result.data.json\n\n        return response.json({\"preferences\": user_prefs})\n    \n    elif action == \"set\":\n        # Store user preferences\n        await context.kv.set(\n            \"user-preferences\",\n            user_id,\n            preferences,\n            {\"ttl\": 60 * 60 * 24 * 30}  # 30 days in seconds\n        )\n\n        return response.json({\"message\": \"Preferences saved successfully!\"})\n    \n    elif action == \"delete\":\n        # Delete user preferences\n        await context.kv.delete(\"user-preferences\", user_id)\n        \n        return response.json({\"message\": \"Preferences deleted successfully!\"})\n    \n    else:\n        return response.json({\"error\": 'Invalid action. Use \"get\", \"set\", or \"delete\".'})\n```\n\n## Welcome Function Example\n\nThis example demonstrates how to customize the initial appearance of DevMode when it starts interacting with your agents:\n\n```python\n# agent.py\n\ndef welcome():\n    return {\n        \"welcome\": \"Welcome to my Python Agent! How can I help you today?\",\n        \"prompts\": [\n            {\n                \"data\": \"What can you do?\",\n                \"contentType\": \"text/plain\"\n            },\n            {\n                \"data\": \"Tell me about yourself\",\n                \"contentType\": \"text/plain\"\n            }\n        ]\n    }\n\ndef run(request, response, context):\n    # Agent logic\n    return response.text(\"Hello, World!\")\n```\n\n### Real-World Example\n\nHere's a more comprehensive example inspired by the React Miami 2025 Concierge template:\n\n```python\n# concierge_agent.py\n\ndef welcome():\n    return {\n        \"welcome\": \"Welcome to the Python Concierge! How can I help you today?\",\n        \"prompts\": [\n            {\n                \"data\": \"Where should I go for dinner in Miami, tonight?\",\n                \"contentType\": \"text/plain\"\n            },\n            {\n                \"data\": \"What sessions about Python are happening today?\",\n                \"contentType\": \"text/plain\"\n            },\n            {\n                \"data\": \"Tell me more about the conference speakers\",\n                \"contentType\": \"text/plain\"\n            },\n            {\n                \"data\": \"I'm looking for good restaurants near the venue\",\n                \"contentType\": \"text/plain\"\n            },\n            {\n                \"data\": \"What is Agentuity all about?\",\n                \"contentType\": \"text/plain\"\n            }\n        ]\n    }\n\ndef run(request, response, context):\n    # Agent logic implementation\n    return response.text(\"Hello, I'm your Python Concierge!\")\n```\n\n## Vector Storage\n\nAn agent that uses vector storage for semantic search.\n\n```python\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\n\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n    data = request.data.json\n    action = data.get(\"action\")\n    query = data.get(\"query\")\n    products = data.get(\"products\")\n\n    if action == \"index\":\n        # Index products in vector storage\n        if not isinstance(products, list) or len(products) == 0:\n            return response.json({\"error\": \"No products to index\"})\n\n        # Prepare documents for vector storage\n        documents = [\n            {\n                \"key\": product[\"id\"],\n                \"document\": product[\"description\"],\n                \"metadata\": {\n                    \"id\": product[\"id\"],\n                    \"name\": product[\"name\"],\n                    \"price\": product[\"price\"],\n                    \"category\": product[\"category\"]\n                }\n            }\n            for product in products\n        ]\n\n        # Store in vector database\n        ids = await context.vector.upsert(\"products\", documents)\n\n        return response.json({\n            \"message\": f\"Indexed {len(ids)} products successfully\",\n            \"ids\": ids\n        })\n    \n    elif action == \"search\":\n        # Search for products by semantic similarity\n        if not query:\n            return response.json({\"error\": \"Query is required for search\"})\n\n        # Perform semantic search\n        results = await context.vector.search(\n            \"products\",\n            query,\n            limit=5,\n            similarity=0.5,\n            metadata={}\n        )\n\n        # Format results\n        formatted_results = [\n            {\n                \"id\": result.id,\n                \"key\": result.key,\n                \"similarity\": 1.0 - result.distance,\n                \"metadata\": result.metadata\n            }\n            for result in results\n        ]\n\n        return response.json({\n            \"message\": f\"Found {len(results)} matching products\",\n            \"results\": formatted_results\n        })\n    \n    elif action == \"delete\":\n        # Delete products from vector storage\n        if not isinstance(products, list) or len(products) == 0:\n            return response.json({\"error\": \"No product IDs to delete\"})\n\n        # Extract product IDs\n        product_ids = [p[\"id\"] for p in products]\n        \n        # Delete from vector database\n        count = await context.vector.delete(\"products\", product_ids[0])\n        \n        return response.json({\n            \"message\": f\"Deleted {count} products successfully\",\n            \"ids\": product_ids\n        })\n    \n    else:\n        return response.json({\"error\": 'Invalid action. Use \"index\", \"search\", or \"delete\".'})\n```\n\n## Agent Communication\n\nAn agent that demonstrates communication between agents.\n\n```python\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\nfrom datetime import datetime\n\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n    data = request.data.json\n    action = data.get(\"action\")\n    message = data.get(\"message\")\n    agent_id = data.get(\"agentId\")\n\n    if action == \"send\":\n        # Send a message to another agent\n        if not agent_id:\n            return response.json({\"error\": \"Agent ID is required\"})\n\n        if not message:\n            return response.json({\"error\": \"Message is required\"})\n\n        # Send message to the specified agent using handoff\n        result = await response.handoff(\n            {\"id\": agent_id},\n            {\n                \"message\": message,\n                \"sender\": context.agent.id,\n                \"timestamp\": datetime.now().isoformat()\n            }\n        )\n\n        return result\n    \n    elif action == \"receive\":\n        # This is a handler for receiving messages from other agents\n        data = request.data.json\n        \n        context.logger.info(f\"Received message from agent {data.get('sender')}: {data.get('message')}\")\n        \n        # Process the received message\n        return response.json({\n            \"message\": \"Message received and processed\",\n            \"echo\": data.get(\"message\"),\n            \"receivedAt\": datetime.now().isoformat()\n        })\n    \n    else:\n        return response.json({\"error\": 'Invalid action. Use \"send\" or \"receive\".'})\n```\n\n## Streaming Responses from OpenAI\n\nThis example demonstrates how to stream a response from OpenAI using the Agentuity Python SDK:\n\n```python\nfrom openai import OpenAI\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\n\nclient = OpenAI()\n\n\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n    chat_completion = client.chat.completions.create(\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a friendly assistant!\",\n            },\n            {\n                \"role\": \"user\",\n                \"content\": request.data.text or \"Why is the sky blue?\",\n            },\n        ],\n        model=\"gpt-4o\",\n        stream=True,\n    )\n    return response.stream(chat_completion, lambda x: x.choices[0].delta.content)\n```\n\nThis example:\n1. Imports the necessary libraries from OpenAI and Agentuity\n2. Creates an OpenAI client\n3. Defines an async `run` function that:\n   - Creates a chat completion with streaming enabled\n   - Uses the user's input text or defaults to \"Why is the sky blue?\"\n   - Returns a streamed response using Agentuity's `response.stream()` method\n   - Uses a lambda function to extract the content from each chunk of the stream\n\nThe `response.stream()` method handles the complexity of streaming the response back to the user, making it easy to implement streaming in your agents.\n"
    },
    {
      "file": "SDKs/python/examples/pydantic.mdx",
      "meta": {
        "title": "Pydantic AI Agent",
        "description": "Examples of using the Agentuity Python SDK with Pydantic"
      },
      "content": "\n## Basic Pydantic AI Agent\n\nExample taken from: https://ai.pydantic.dev/agents/#introduction\n\n\n```python\nimport random # Added for random number generation\nfrom pydantic_ai import Agent, RunContext\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\n\n# A pydantic agent\nroulette_agent = Agent(\n    'openai:gpt-4o',\n    deps_type=int,\n    output_type=bool,\n    system_prompt=(\n        'Use the `roulette_wheel` function to see if the '\n        'customer has won based on the number they provide.'\n    ),\n)\n\n# A tool for the pydantic agent\n@roulette_agent.tool\nasync def roulette_wheel(ctx: RunContext[int], square: int) -> str:\n    \"\"\"check if the square is a winner\"\"\"\n    return 'winner' if square == ctx.deps else 'loser'\n\n\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n\t\t# Spin that wheel!\n    success_number = random.randint(0, 20)  \n\n\t\t# Pull out the user query from the request\n    user_query = await request.data.text()\n    if not user_query:\n        user_query = random.randint(0, 20)\n\n    context.logger.info(\"User query: %s, Winning number: %s\", user_query, success_number)\n\n    try:\n        context.logger.info(\"Calling PydanticAI roulette agent with query: '%s' and deps: %s\", user_query, success_number)\n        \n        pydantic_ai_result = await roulette_agent.run(\n            user_query,\n            deps=success_number\n        )\n        context.logger.info(\"PydanticAI result output: %s\", pydantic_ai_result.output)\n\n        return response.json({\n            \"won\": pydantic_ai_result.output, \n            \"details\": \"Bet processed by PydanticAI roulette agent.\",\n            \"user_query\": user_query,\n            \"success_number\": success_number\n        })\n\n    except Exception as e:\n        context.logger.error(\"Error running PydanticAI agent: %s\", e)\n        return response.json({\"error\": str(e)}, status_code=500)\n\n```\n\n## More advanced Pydantic AI agent - Bank support agent\n\nTaken from: https://ai.pydantic.dev/examples/bank-support/#example-code\n\n\n```python\nfrom dataclasses import dataclass\nfrom pydantic import BaseModel, Field\nfrom pydantic_ai import Agent, RunContext\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\n\nclass DatabaseConn:\n    \"\"\"This is a fake database for example purposes.\n\n    In reality, you'd be connecting to an external database\n    (e.g. PostgreSQL) to get information about customers.\n    \"\"\"\n\n    @classmethod\n    async def customer_name(cls, *, id: int) -> str | None:\n        if id == 123:\n            return \"John\"\n        # Return None or raise an error for other IDs if needed\n        return None\n\n    @classmethod\n    async def customer_balance(cls, *, id: int, include_pending: bool) -> float:\n        if (\n            id == 123\n        ):  # and include_pending: # Example always shows balance if id is 123\n            return 123.45\n        else:\n            # PydanticAI example raises ValueError, which is fine for tools\n            # if the LLM is expected to handle/retry based on it.\n            raise ValueError(\"Customer not found or query parameters invalid\")\n\n\n@dataclass\nclass SupportDependencies:\n    customer_id: int\n    db: DatabaseConn\n\n\nclass SupportOutput(BaseModel):\n    support_advice: str = Field(description=\"Advice returned to the customer\")\n    block_card: bool = Field(description=\"Whether to block their card or not\")\n    risk: int = Field(description=\"Risk level of query\", ge=0, le=10)\n\n\n# --- PydanticAI Agent Definition (from Example) ---\n\nsupport_agent = Agent(\n    \"openai:gpt-4o\",  # Or your preferred LLM\n    deps_type=SupportDependencies,\n    output_type=SupportOutput,\n    system_prompt=(\n        \"You are a support agent in our bank, give the \"\n        \"customer support and judge the risk level of their query. \"\n        \"Reply using the customer's name.\"\n    ),\n)\n\n\n@support_agent.system_prompt\nasync def add_customer_name(ctx: RunContext[SupportDependencies]) -> str:\n    customer_name = await ctx.deps.db.customer_name(id=ctx.deps.customer_id)\n    if customer_name:\n        return f\"The customer's name is {customer_name!r}.\"\n    return \"The customer's name could not be determined.\"\n\n\n@support_agent.tool\nasync def customer_balance(\n    ctx: RunContext[SupportDependencies], include_pending: bool\n) -> str:\n    \"\"\"Returns the customer's current account balance.\"\"\"\n    try:\n        balance = await ctx.deps.db.customer_balance(\n            id=ctx.deps.customer_id,\n            include_pending=include_pending,\n        )\n        return f\"${balance:.2f}\"\n    except ValueError as e:\n        # Let the LLM know the tool failed and why\n        return f\"Could not retrieve balance: {e}\"\n\n\n# --- Agentuity Agent Entry Point ---\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n    context.logger.info(\"BankSupport agent initiated.\")\n\n    user_query = await request.data.text()\n    if not user_query:\n        user_query = \"What is my balance?\"  # Default query\n        context.logger.info(\"No user query provided, using default: '%s'\", user_query)\n\n    # For this example, we'll use a hardcoded customer ID and instantiate the DB.\n    # In a real scenario, customer_id might come from the request or session.\n    customer_id = 123\n    db_instance = DatabaseConn()\n\n    dependencies = SupportDependencies(customer_id=customer_id, db=db_instance)\n\n    context.logger.info(\n        \"Calling PydanticAI support_agent with query: '%s' for customer_id: %s\",\n        user_query,\n        customer_id,\n    )\n\n    try:\n        pydantic_ai_result = await support_agent.run(user_query, deps=dependencies)\n\n        output_data = pydantic_ai_result.output\n        context.logger.info(\"PydanticAI support_agent output: %s\", output_data)\n\n        return response.json(output_data.model_dump())\n\n    except Exception as e:\n        context.logger.error(\n            \"Error running PydanticAI support_agent: %s\", e, exc_info=True\n        )\n        return response.json(\n            {\n                \"error\": str(e),\n                \"details\": \"An unexpected error occurred in the BankSupport agent.\",\n            },\n            status_code=500,\n        )\n\n```\n\n\n"
    },
    {
      "file": "SDKs/python/frameworks.mdx",
      "meta": {
        "title": "Frameworks",
        "description": "Framework integration for the Agentuity Python SDK"
      },
      "content": "\nThe Agentuity Python SDK provides a flexible and powerful way to integrate other frameworks with your Agent.\n\nThe following frameworks are currently supported:\n\n- [LlamaIndex](https://www.llamaindex.ai/)\n- [LangChain](https://www.langchain.com/)\n- [CrewAI](https://www.crewai.com/)\n\n## Using Frameworks with Agentuity\n\nThe use a framework with Agentuity, choose the framework template when creating a new project.\n\n```bash\nagentuity new\n```\n\nWhen you select one of the framework templates, the Agentuity CLI will install the necessary dependencies and create a new project with the framework already configured.\n\n## LlamaIndex\n\nExample Agent using LlamaIndex:\n\n```python\nfrom llama_index.core.agent.workflow import AgentWorkflow\nfrom llama_index.llms.openai import OpenAI\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\n\n\n# Define a simple calculator tool\ndef multiply(a: float, b: float) -> float:\n    \"\"\"Useful for multiplying two numbers.\"\"\"\n    return a * b\n\n\n# Create an agent workflow with our calculator tool\nagent = AgentWorkflow.from_tools_or_functions(\n    [multiply],\n    llm=OpenAI(model=\"gpt-4o-mini\"),\n    system_prompt=\"You are a helpful assistant that can multiply two numbers.\",\n)\n\n\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n    result = await agent.run(request.text or \"What is 1234 * 4567?\")\n    return response.text(str(result))\n```\n\n## LangChain\n\nExample Agent using LangChain:\n\n```python\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\n\nllm = ChatOpenAI()\n\n\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n    prompt = ChatPromptTemplate.from_messages(\n        [\n            (\n                \"system\",\n                \"You are an expert in world knowledge and all things in general.\",\n            ),\n            (\"user\", \"{input}\"),\n        ]\n    )\n    output_parser = StrOutputParser()\n    chain = prompt | llm | output_parser\n    result = chain.invoke({\"input\": request.text})\n\n    return response.text(result)\n```\n\n### CrewAI\n\nExample Agent using CrewAI:\n\n```python\nfrom agentuity import AgentRequest, AgentResponse, AgentContext\nfrom agents.mycrew.crew import MyCrew\n\n\nasync def run(request: AgentRequest, response: AgentResponse, context: AgentContext):\n    inputs = {\"topic\": request.text or \"AI LLMs\"}\n    result = MyCrew().crew().kickoff(inputs=inputs)\n    return response.text(str(result))\n```\n\nThen for your Crew, you might hvave the following:\n\n```python\nfrom crewai import Agent, Crew, Process, Task\nfrom crewai.project import CrewBase, agent, crew, task\n\n# If you want to run a snippet of code before or after the crew starts,\n# you can use the @before_kickoff and @after_kickoff decorators\n# https://docs.crewai.com/concepts/crews#example-crew-class-with-decorators\n\n\n@CrewBase\nclass MyCrew:\n    \"\"\"MyCrew crew\"\"\"\n\n    # Learn more about YAML configuration files here:\n    # Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended\n    # Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended\n    agents_config = \"config/agents.yaml\"\n    tasks_config = \"config/tasks.yaml\"\n\n    # If you would like to add tools to your agents, you can learn more about it here:\n    # https://docs.crewai.com/concepts/agents#agent-tools\n    @agent\n    def researcher(self) -> Agent:\n        return Agent(config=self.agents_config[\"researcher\"], verbose=True)\n\n    @agent\n    def reporting_analyst(self) -> Agent:\n        return Agent(config=self.agents_config[\"reporting_analyst\"], verbose=True)\n\n    # To learn more about structured task outputs,\n    # task dependencies, and task callbacks, check out the documentation:\n    # https://docs.crewai.com/concepts/tasks#overview-of-a-task\n    @task\n    def research_task(self) -> Task:\n        return Task(\n            config=self.tasks_config[\"research_task\"],\n        )\n\n    @task\n    def reporting_task(self) -> Task:\n        return Task(config=self.tasks_config[\"reporting_task\"], output_file=\"report.md\")\n\n    @crew\n    def crew(self) -> Crew:\n        \"\"\"Creates the MyagentCrew crew\"\"\"\n        # To learn how to add knowledge sources to your crew, check out the documentation:\n        # https://docs.crewai.com/concepts/knowledge#what-is-knowledge\n\n        return Crew(\n            agents=self.agents,  # Automatically created by the @agent decorator\n            tasks=self.tasks,  # Automatically created by the @task decorator\n            process=Process.sequential,\n            verbose=True,\n            # process=Process.hierarchical, # In case you wanna use that instead https://docs.crewai.com/how-to/Hierarchical/\n        )\n```\n"
    },
    {
      "file": "SDKs/python/index.mdx",
      "meta": {
        "title": "Python SDK",
        "description": "Documentation for the Agentuity Python SDK"
      },
      "content": "\nThe [Agentuity Python SDK](https://github.com/agentuity/sdk-py) provides a powerful framework for building AI agents in Python. It offers a comprehensive set of tools for creating, deploying, and managing agents with features like key-value storage, vector storage, and OpenTelemetry integration.\n\n## Installation\n\nWhen you create a project with Agentuity, you will automatically have access to the Agentuity Python SDK.\n\n```bash\nagentuity new\n```\n\nThe SDK currently works with Python and the project will automatically install the correct dependencies.\n\n## Prerequisites\n\nBefore using the Agentuity Python SDK, ensure you have the following prerequisites installed:\n\n- **Python**: Version 3.10 or higher is required\n\n### Installing Python\n\nYou can download and install Python from the [official website](https://www.python.org/). Make sure to install version 3.10 or higher.\n\n### Installing UV\n\n[UV](https://docs.astral.sh/uv/) is an optional but recommended package manager for Python. You can install it using the following command:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nFor more information, visit the [UV installation documentation](https://docs.astral.sh/uv/getting-started/installation/).\n\n## Development\n\nYou can start your project by running the following command:\n\n```bash\nagentuity dev\n```\n\nThis will start your project in development mode and open a new browser window connecting your Agent to the Agentuity Console in Live Mode.\n\nYou can also start your project in development mode without connecting to the Agentuity Console by running the following command:\n\n```bash\nuv run server.py\n```\n\nIf you would like to manually test your Agents locally, you can do so by running the following command:\n\n```bash\ncurl -v http://localhost:3500/run/agent_ID --json '{\"input\": \"Hello, world!\"}'\n```\n\nMake sure you replace `agent_ID` with the ID of your Agent.\n\n\n## Next Steps\n\n- [Core Concepts](/SDKs/python/core-concepts) - Learn about the fundamental concepts of the Agentuity Python SDK\n- [LLM](/SDKs/python/llm) - Learn about the LLM integrations available in the Agentuity Python SDK\n- [Frameworks](/SDKs/python/frameworks) - Learn about using frameworks with the Agentuity Python SDK\n- [API Reference](/SDKs/python/api-reference) - Explore the detailed API documentation\n"
    },
    {
      "file": "SDKs/python/llm.mdx",
      "meta": {
        "title": "LLM",
        "description": "LLM integration for the Agentuity Python SDK"
      },
      "content": "\nThe Agentuity Python SDK provides a flexible and powerful way to integrate with LLMs.\n\n## AI Gateway\n\nThe Agentuity Cloud includes an AI Gateway to make it easy to integrate LLMs with your Agent with zero configuration. The following LLM integrations are supported:\n\n- [OpenAI](https://openai.com/)\n- [Anthropic](https://www.anthropic.com/)\n- [Cohere](https://cohere.com/)\n- [DeepSeek](https://www.deepseek.com/)\n- [Google AI Studio](https://ai.google.dev/)\n- [Grok](https://grok.x.ai/)\n- [Groq](https://groq.com/)\n- [Mistral](https://mistral.ai/)\n- [Perplexity AI](https://www.perplexity.ai/)\n\n## SDK Integrations\n\nTo use the zero config LLM integrations, you can use the following SDK integrations:\n\n- [OpenAI Python SDK](https://github.com/openai/openai-python)\n- [Anthropic Python SDK](https://github.com/anthropics/anthropic-sdk-python)\n- [LiteLLM Python SDK](https://github.com/BerriAI/litellm)\n\nWhen any of the above SDKs are installed, the Agentuity Project will automatically detect it and route your requests to the AI Gateway.  However, we will only route requests if you do not provide your own LLM API Key.  By providing your own LLM API Key, the AI Gateway detection will be disabled and you will need to manually configure the LLM integration in the Agentuity Console.\n\n"
    },
    {
      "file": "Troubleshooting/error-codes/authentication.mdx",
      "meta": {
        "title": "Authentication Errors",
        "description": "Reference for authentication-related error codes (AUTH-XXX)"
      },
      "content": "\nimport { Callout } from 'fumadocs-ui/components/callout';\n\n<Callout type=\"warn\" title=\"Document Status\">\n  This document is being worked on, information may change a lot over the next few weeks.\n</Callout>\n\n## AUTH-001\n\n**Error Message**: Invalid username or password\n\n**Cause**: The provided credentials are incorrect or do not exist.\n\n**Solution**: \n- Verify your username and password\n- Reset your password if necessary\n- Check for any typos in your credentials\n\n## AUTH-002\n\n**Error Message**: Authentication token has expired\n\n**Cause**: Your authentication token has exceeded its validity period.\n\n**Solution**: \n- Log out and log back in\n- Request a new authentication token\n- Check your system time is correct\n\n## AUTH-003\n\n**Error Message**: Invalid authentication token\n\n**Cause**: The provided token is malformed or has been tampered with.\n\n**Solution**: \n- Generate a new authentication token\n- Verify the token format\n- Check token transmission process\n\n[Content coming soon - Additional authentication error codes]        "
    },
    {
      "file": "Troubleshooting/error-codes/cli.mdx",
      "meta": {
        "title": "CLI Errors",
        "description": "Reference for CLI-related error codes (CLI-XXXX)"
      },
      "content": "\n## CLI-0001\n\n**Error Message**: Failed to delete agents\n\n**Cause**: The system encountered an error when attempting to delete one or more agents.\n\n**Solution**: \n- Verify you have the correct permissions\n- Check if the agents still exist\n- Try deleting agents one by one\n- Check the logs for more specific error details\n\n## CLI-0002\n\n**Error Message**: Failed to create project\n\n**Cause**: The system encountered an error when attempting to create a new project.\n\n**Solution**: \n- Verify you have the correct permissions\n- Check if a project with the same name already exists\n- Ensure all required project parameters are valid\n- Check the logs for more specific error details\n\n## CLI-0003\n\n**Error Message**: Unable to authenticate user\n\n**Cause**: The system could not authenticate your user credentials.\n\n**Solution**: \n- Verify your username and password\n- Check if your authentication token is valid\n- Try logging in again\n- Ensure your account has not been locked or disabled\n\n## CLI-0004\n\n**Error Message**: Environment variables not set\n\n**Cause**: Required environment variables are missing or not properly set.\n\n**Solution**: \n- Check which environment variables are required\n- Set the missing environment variables\n- Verify the environment variables have the correct values\n- Consider using a .env file for local development\n\n## CLI-0005\n\n**Error Message**: API request failed\n\n**Cause**: A request to the Agentuity API failed.\n\n**Solution**: \n- Check your internet connection\n- Verify the API endpoint is correct\n- Ensure your authentication token is valid\n- Check the logs for more specific error details\n\n## CLI-0006\n\n**Error Message**: Invalid configuration\n\n**Cause**: The configuration file or parameters contain invalid values.\n\n**Solution**: \n- Review your configuration file\n- Check for syntax errors\n- Ensure all required fields are present\n- Validate the values against the expected format\n\n## CLI-0007\n\n**Error Message**: Failed to save project\n\n**Cause**: The system encountered an error when attempting to save project changes.\n\n**Solution**: \n- Verify you have the correct permissions\n- Check if the project still exists\n- Ensure all project parameters are valid\n- Check the logs for more specific error details\n\n## CLI-0008\n\n**Error Message**: Failed to deploy project\n\n**Cause**: The system encountered an error when attempting to deploy a project.\n\n**Solution**: \n- Verify you have the correct permissions\n- Check if the project is valid and complete\n- Ensure all dependencies are available\n- Check the logs for more specific error details\n\n## CLI-0009\n\n**Error Message**: Failed to upload project\n\n**Cause**: The system encountered an error when attempting to upload project files.\n\n**Solution**: \n- Check your internet connection\n- Verify you have the correct permissions\n- Ensure the project files are not too large\n- Check the logs for more specific error details\n\n## CLI-0010\n\n**Error Message**: Failed to parse environment file\n\n**Cause**: The system could not parse the environment file (.env).\n\n**Solution**: \n- Check the syntax of your environment file\n- Ensure the file exists and is readable\n- Verify the file format is correct\n- Remove any invalid characters or formatting\n\n## CLI-0011\n\n**Error Message**: Invalid command flag error\n\n**Cause**: One or more command flags provided are invalid or incompatible.\n\n**Solution**: \n- Check the command documentation\n- Verify the flag names and values\n- Ensure flags are compatible with each other\n- Use the help command for correct usage\n\n## CLI-0012\n\n**Error Message**: Failed to list files and directories\n\n**Cause**: The system could not list files or directories in the specified location.\n\n**Solution**: \n- Verify the path exists\n- Check if you have permission to access the location\n- Ensure the path is correctly formatted\n- Check for any file system errors\n\n## CLI-0013\n\n**Error Message**: Failed to write configuration file\n\n**Cause**: The system could not write to the configuration file.\n\n**Solution**: \n- Check if you have write permissions\n- Verify the directory exists\n- Ensure there is enough disk space\n- Check if the file is locked by another process\n\n## CLI-0014\n\n**Error Message**: Failed to read configuration file\n\n**Cause**: The system could not read the configuration file.\n\n**Solution**: \n- Verify the file exists\n- Check if you have read permissions\n- Ensure the file is not corrupted\n- Check if the file format is correct\n\n## CLI-0015\n\n**Error Message**: Failed to create directory\n\n**Cause**: The system could not create a directory.\n\n**Solution**: \n- Check if you have write permissions\n- Verify the parent directory exists\n- Ensure there is enough disk space\n- Check if a file with the same name already exists\n\n## CLI-0016\n\n**Error Message**: Failed to create temporary file\n\n**Cause**: The system could not create a temporary file.\n\n**Solution**: \n- Check if you have write permissions to the temp directory\n- Ensure there is enough disk space\n- Verify the temp directory exists\n- Check system temporary file limits\n\n## CLI-0017\n\n**Error Message**: Failed to create zip file\n\n**Cause**: The system could not create a zip archive.\n\n**Solution**: \n- Check if you have write permissions\n- Ensure there is enough disk space\n- Verify all files to be zipped exist and are readable\n- Check if the zip utility is installed correctly\n\n## CLI-0018\n\n**Error Message**: Failed to open file\n\n**Cause**: The system could not open the specified file.\n\n**Solution**: \n- Verify the file exists\n- Check if you have permission to access the file\n- Ensure the file is not locked by another process\n- Check if the file path is correct\n\n## CLI-0019\n\n**Error Message**: Failed to load templates\n\n**Cause**: The system could not load the required templates.\n\n**Solution**: \n- Verify the templates exist\n- Check if you have permission to access the templates\n- Ensure the template format is correct\n- Check if the template path is correct\n\n## CLI-0020\n\n**Error Message**: Failed to authenticate with otel server\n\n**Cause**: The system could not authenticate with the OpenTelemetry server.\n\n**Solution**: \n- Verify your OTEL server credentials\n- Check if the OTEL server is running\n- Ensure the OTEL server URL is correct\n- Check your network connection to the OTEL server\n\n## CLI-0021\n\n**Error Message**: Failed to install dependencies\n\n**Cause**: The system could not install the required dependencies.\n\n**Solution**: \n- Check your internet connection\n- Verify you have the necessary permissions\n- Ensure the package manager is working correctly\n- Check for conflicts with existing packages\n\n## CLI-0022\n\n**Error Message**: Error importing project\n\n**Cause**: The system encountered an error when attempting to import a project.\n\n**Solution**: \n- Verify the project structure is valid\n- Ensure all required files are present\n- Check if the project is compatible with the current CLI version\n- Verify you have the necessary permissions to import the project\n\n## CLI-0023\n\n**Error Message**: Error encrypting deployment zip file\n\n**Cause**: The system could not encrypt the deployment zip file.\n\n**Solution**: \n- Check if encryption keys are valid\n- Verify you have the necessary permissions\n- Ensure the zip file was created successfully\n- Check if the encryption library is working correctly\n"
    },
    {
      "file": "Troubleshooting/error-codes/datastores.mdx",
      "meta": {
        "title": "Datastore Errors",
        "description": "Reference for datastore-related error codes (DATA-XXX)"
      },
      "content": "\nimport { Callout } from 'fumadocs-ui/components/callout';\n\n<Callout type=\"warn\" title=\"Document Status\">\n  This document is being worked on, information may change a lot over the next few weeks.\n</Callout>\n\n## DATA-001\n\n**Error Message**: Datastore not found\n\n**Cause**: The specified datastore ID does not exist or has been deleted.\n\n**Solution**: \n- Verify the datastore ID is correct\n- Check if the datastore still exists in the project\n- Contact support if you believe this is an error\n\n## DATA-002\n\n**Error Message**: Invalid datastore configuration\n\n**Cause**: The datastore configuration contains invalid or missing required fields.\n\n**Solution**: \n- Review the datastore configuration\n- Ensure all required fields are provided\n- Validate the configuration format\n\n## DATA-003\n\n**Error Message**: Unable to connect to datastore\n\n**Cause**: The system cannot establish a connection to the datastore.\n\n**Solution**: \n- Check the datastore connection settings\n- Verify the datastore is running and accessible\n- Check network connectivity\n\n## DATA-004\n\n**Error Message**: Datastore capacity exceeded\n\n**Cause**: The datastore has reached its storage capacity limit.\n\n**Solution**: \n- Review current data usage\n- Delete unnecessary data\n- Upgrade storage capacity\n\n## DATA-005\n\n**Error Message**: Invalid datastore query\n\n**Cause**: The query syntax or parameters are invalid.\n\n**Solution**: \n- Check the query syntax\n- Verify parameter types and values\n- Review the query documentation                                        "
    },
    {
      "file": "Troubleshooting/error-codes/index.mdx",
      "meta": {
        "title": "Error Codes",
        "description": "Complete reference for all Agentuity error codes and their solutions"
      },
      "content": "\nimport { Callout } from 'fumadocs-ui/components/callout';\n\n<Callout type=\"warn\" title=\"Document Status\">\n  This document is being worked on, information may change a lot over the next few weeks.\n</Callout>\n\nThis section provides detailed information about all error codes you might encounter while using Agentuity.\n\n## Error Categories\n\n- Authentication Errors (AUTH-XXX)\n- Project Errors (PROJ-XXX)\n- Agent Errors (AGENT-XXX)\n- Datastore Errors (DATA-XXX)\n- Integration Errors (INT-XXX)\n- System Errors (SYS-XXX)\n- CLI Errors (CLI-XXXX)\n\n## Reading Error Codes\n\n[Content coming soon - How to interpret error codes and find solutions]\n\n## Common Error Patterns\n\n[Content coming soon - Common patterns in error codes and general troubleshooting approaches]        "
    },
    {
      "file": "Troubleshooting/error-codes/integration.mdx",
      "meta": {
        "title": "Integration Errors",
        "description": "Reference for integration-related error codes (INT-XXX)"
      },
      "content": "\nimport { Callout } from 'fumadocs-ui/components/callout';\n\n<Callout type=\"warn\" title=\"Document Status\">\n  This document is being worked on, information may change a lot over the next few weeks.\n</Callout>\n\n## INT-001\n\n**Error Message**: Integration not found\n\n**Cause**: The specified integration does not exist or has been deleted.\n\n**Solution**: \n- Verify the integration ID is correct\n- Check if the integration is still configured\n- Set up the integration again if necessary\n\n## INT-002\n\n**Error Message**: Invalid webhook URL\n\n**Cause**: The webhook URL is not properly formatted or accessible.\n\n**Solution**: \n- Verify the webhook URL is correct\n- Ensure the endpoint is publicly accessible\n- Check URL formatting and protocol\n\n## INT-003\n\n**Error Message**: Integration authentication failed\n\n**Cause**: Unable to authenticate with the integrated service.\n\n**Solution**: \n- Check integration credentials\n- Verify API keys or tokens\n- Ensure the integration service is available\n\n## INT-004\n\n**Error Message**: Integration request timeout\n\n**Cause**: The integrated service did not respond within the expected time.\n\n**Solution**: \n- Check the integrated service status\n- Verify network connectivity\n- Adjust timeout settings if possible\n\n## INT-005\n\n**Error Message**: Invalid integration configuration\n\n**Cause**: The integration configuration is invalid or incomplete.\n\n**Solution**: \n- Review integration settings\n- Complete all required configuration fields\n- Check integration documentation        "
    },
    {
      "file": "Troubleshooting/error-codes/projects.mdx",
      "meta": {
        "title": "Project Errors",
        "description": "Reference for project-related error codes (PROJ-XXX)"
      },
      "content": "\nimport { Callout } from 'fumadocs-ui/components/callout';\n\n<Callout type=\"warn\" title=\"Document Status\">\n  This document is being worked on, information may change a lot over the next few weeks.\n</Callout>\n\n## PROJ-001\n\n**Error Message**: Project not found\n\n**Cause**: The specified project ID does not exist or has been deleted.\n\n**Solution**: \n- Verify the project ID is correct\n- Check if you have access to the project\n- Contact support if you believe this is an error\n\n## PROJ-002\n\n**Error Message**: Invalid project configuration\n\n**Cause**: The project configuration contains invalid or missing required fields.\n\n**Solution**: \n- Review the project configuration\n- Ensure all required fields are provided\n- Validate the configuration format\n\n## PROJ-003\n\n**Error Message**: Project limit exceeded\n\n**Cause**: You have reached the maximum number of projects allowed for your subscription.\n\n**Solution**: \n- Review your current projects\n- Delete unused projects\n- Upgrade your subscription plan\n\n## PROJ-004\n\n**Error Message**: Invalid project name\n\n**Cause**: The project name contains invalid characters or is too long/short.\n\n**Solution**: \n- Use only alphanumeric characters, hyphens, and underscores\n- Keep the name between 3-64 characters\n- Remove any special characters        "
    },
    {
      "file": "Troubleshooting/error-codes/system.mdx",
      "meta": {
        "title": "System Errors",
        "description": "Reference for system-related error codes (SYS-XXX)"
      },
      "content": "\nimport { Callout } from 'fumadocs-ui/components/callout';\n\n<Callout type=\"warn\" title=\"Document Status\">\n  This document is being worked on, information may change a lot over the next few weeks.\n</Callout>\n\n## SYS-001\n\n**Error Message**: Internal server error\n\n**Cause**: An unexpected error occurred in the system.\n\n**Solution**: \n- Retry the operation\n- Check system status page\n- Contact support if the issue persists\n\n## SYS-002\n\n**Error Message**: Rate limit exceeded\n\n**Cause**: Too many requests in a short period.\n\n**Solution**: \n- Reduce request frequency\n- Implement request throttling\n- Review rate limit documentation\n\n## SYS-003\n\n**Error Message**: Service temporarily unavailable\n\n**Cause**: The service is currently unavailable or under maintenance.\n\n**Solution**: \n- Check system status page\n- Wait and retry later\n- Subscribe to status updates\n\n## SYS-004\n\n**Error Message**: Invalid API version\n\n**Cause**: The requested API version is not supported or deprecated.\n\n**Solution**: \n- Update to a supported API version\n- Check API version compatibility\n- Review API migration guide\n\n## SYS-005\n\n**Error Message**: Resource conflict\n\n**Cause**: Concurrent modification of the same resource.\n\n**Solution**: \n- Implement proper locking mechanisms\n- Retry the operation\n- Handle conflicts in your application                                        "
    }
  ]
}